{
  "openapi": "3.1.0",
  "info": {
    "title": "Netlify's API documentation",
    "description": "Netlify is a hosting service for the programmable web. It understands your\ndocuments and provides an API to handle atomic deploys of websites, manage\nform submissions, inject JavaScript snippets, and much more. This is a\nREST-style API that uses JSON for serialization and OAuth 2 for\nauthentication.\n\n\nThis document is an OpenAPI reference for the Netlify API that you can\nexplore. For more detailed instructions for common uses, please visit the\n[online documentation](https://docs.netlify.com/api/get-started/). Visit our\nCommunity forum to join the conversation about\n[understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).\n\n\nAdditionally, we have two API clients for your convenience:\n- [Go Client](https://github.com/netlify/open-api#go-client)\n- [JS Client](https://github.com/netlify/js-client)\n",
    "version": "1.0",
    "termsOfService": "https://www.netlify.com/legal/terms-of-use/",
    "x-logo": {
      "url": "netlifyapi.png",
      "href": "https://docs.netlify.com/",
      "altText": "Netlify"
    }
  },
  "servers": [
    {
      "url": "https://api.netlify.com/"
    }
  ],
  "security": [
    {
      "netlifyAuth": [

      ]
    },
    {
      "bearerAuth": [

      ]
    }
  ],
  "externalDocs": {
    "description": "Getting Started in Netlfy Docs",
    "url": "https://docs.netlify.com/api/get-started/"
  },
  "paths": {
    "/api/v1/access_tokens/revoke": {
      "delete": {
        "tags": [
          "Access tokens"
        ],
        "operationId": "revokeAccessToken",
        "parameters": [

        ],
        "responses": {
          "204": {
            "description": "successfully revoked"
          }
        },
        "description": "Revokes the token that the client is currently using to access to the\nAPI.",
        "x-controller": "api/v1/access_tokens",
        "x-action": "revoke"
      }
    },
    "/api/v1/accounts/{account_id}/builds/status": {
      "get": {
        "tags": [
          "Builds"
        ],
        "operationId": "getAccountBuildStatus",
        "parameters": [
          {
            "name": "account_id",
            "description": "account_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "site_id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "description": "state",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountBuild"
                  }
                }
              }
            }
          }
        },
        "x-controller": "api/v1/account_builds",
        "x-action": "status"
      }
    },
    "/api/v1/{account_id}/members": {
      "get": {
        "tags": [
          "Members"
        ],
        "operationId": "listMembersForAccount",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account ID or slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emails",
            "description": "Search for members in email field",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "explode": true
          },
          {
            "name": "page",
            "description": "Number of per_page to skip when returning records",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "description": "Number of records to return",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles",
            "description": "Filter members by role(s)",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "explode": true
          },
          {
            "name": "site_id",
            "description": "Filter members by a site",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "description": "Field of member to sort by (descending). When reviewer role is specified self_invite_pending and invite_pending are the defaults.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "full_name",
                "email",
                "updated_at",
                "created_at",
                "self_invite_pending",
                "invite_pending"
              ]
            }
          },
          {
            "name": "states",
            "description": "Filter members by invite state(s)",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "invite_pending",
                  "self_invite_pending"
                ]
              }
            },
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Member"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of members for the account (team).",
        "x-controller": "api/v1/account_members",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Members"
        ],
        "operationId": "addMemberToAccount",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account ID or slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "build_id",
            "description": "Build ID member was invited from",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "description": "Email to invite to the account",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "description": "Role of the new member",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "Reviewer",
                "Billing Admin",
                "Content Editor",
                "Publisher",
                "Developer Lite",
                "Developer",
                "Owner"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "description": "Creates a new member for the account (team).",
        "x-controller": "api/v1/account_members",
        "x-action": "create"
      }
    },
    "/api/v1/{account_slug}/sites": {
      "get": {
        "tags": [
          "Sites"
        ],
        "operationId": "listSitesForAccount",
        "parameters": [
          {
            "name": "account_slug",
            "description": "The account slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "owner",
                "guest"
              ]
            }
          },
          {
            "name": "name",
            "description": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "description": "per_page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "description": "sort_by",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at",
                "alphabetical",
                "published_at"
              ]
            }
          },
          {
            "name": "visibility",
            "description": "When provided, returns only SSO/password protected / unprotected sites",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "protected",
                "public"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of sites for an account (team).",
        "x-controller": "api/v1/account_sites",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Sites"
        ],
        "operationId": "createSiteInTeam",
        "parameters": [
          {
            "name": "account_slug",
            "description": "The account slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "configure_dns",
            "description": "configure_dns",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          }
        },
        "description": "Creates a site for an account (team).",
        "x-controller": "api/v1/account_sites",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Site"
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "operationId": "listAccountsForUser",
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of accounts for the current user.\nThe accounts list excludes accounts that only allow SSO if the current\nuser is not logged in with SSO. If the user is logged in with SSO, all\naccounts are listed.",
        "x-controller": "api/v1/accounts",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "operationId": "createAccount",
        "parameters": [

        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        },
        "description": "Creates an account (team).",
        "x-controller": "api/v1/accounts",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type_id": {
                    "type": "string"
                  },
                  "payment_method_id": {
                    "type": "string"
                  },
                  "period": {
                    "type": "string",
                    "enum": [
                      "monthly",
                      "yearly"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/accounts/{account_id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccount",
        "parameters": [
          {
            "name": "account_id",
            "description": "The ID of the account",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Returns the details of an account (team).",
        "x-controller": "api/v1/accounts",
        "x-action": "show"
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "operationId": "updateAccount",
        "parameters": [
          {
            "name": "account_id",
            "description": "The ID of the account",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "description": "Updates an account (team).",
        "x-controller": "api/v1/accounts",
        "x-action": "update",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateParams"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "operationId": "cancelAccount",
        "parameters": [
          {
            "name": "account_id",
            "description": "The ID of the account",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Cancels an account (team).",
        "x-controller": "api/v1/accounts",
        "x-action": "destroy"
      }
    },
    "/api/v1/accounts/types": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "operationId": "listAccountTypesForUser",
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountType"
                }
              }
            }
          }
        },
        "description": "Returns a list of account types.",
        "x-controller": "api/v1/accounts",
        "x-action": "types"
      }
    },
    "/api/v1/accounts/{account_id}/audit": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "operationId": "listAccountAuditEvents",
        "parameters": [
          {
            "name": "account_id",
            "description": "The ID of the account",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_type",
            "description": "Filter logs by one of the accepted types",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "team",
                  "site"
                ]
              }
            },
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLog"
                  }
                }
              }
            }
          }
        },
        "description": "Return an account's audit logs.",
        "x-controller": "api/v1/accounts",
        "x-action": "audit"
      }
    },
    "/api/v1/sites/{site_id}/analytics": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "operationId": "enableAnalytics",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInstance"
                }
              }
            }
          },
          "422": {
            "description": "Payment Method not found, Analytics already enabled"
          }
        },
        "description": "Enables Analytics for the site.",
        "x-controller": "api/v1/analytics",
        "x-action": "create"
      }
    },
    "/api/v1/sites/{site_id}/analytics/{id}": {
      "delete": {
        "tags": [
          "Analytics"
        ],
        "operationId": "disableAnalytics",
        "parameters": [
          {
            "name": "id",
            "description": "Scope response to id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "Error during disabling"
          }
        },
        "description": "Disables Analytics for the site.",
        "x-controller": "api/v1/analytics",
        "x-action": "destroy"
      }
    },
    "/api/v1/sites/{site_id}/assets": {
      "get": {
        "tags": [
          "Site assets"
        ],
        "operationId": "listSiteAssets",
        "parameters": [
          {
            "name": "filter",
            "description": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "description": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Asset"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of assets for the site.\n_This endpoint is only available to certain sites._",
        "x-controller": "api/v1/assets",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Site assets"
        ],
        "operationId": "createSiteAsset",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetCreateResult"
                }
              }
            }
          }
        },
        "description": "Creates an asset for the site.\n_This endpoint is only available to certain sites._",
        "x-controller": "api/v1/assets",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateParams"
              }
            }
          }
        }
      }
    },
    "/api/v1/sites/{site_id}/assets/{asset_id}": {
      "get": {
        "tags": [
          "Site assets"
        ],
        "operationId": "getSiteAssetInfo",
        "parameters": [
          {
            "name": "asset_id",
            "description": "The asset ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "description": "Returns an asset for the site.\n_This endpoint is only available to certain sites._",
        "x-controller": "api/v1/assets",
        "x-action": "show"
      },
      "put": {
        "tags": [
          "Site assets"
        ],
        "operationId": "updateSiteAsset",
        "parameters": [
          {
            "name": "asset_id",
            "description": "The asset ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "description": "The state of the asset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "prepared",
                "uploaded"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "description": "Updates a state of the asset.\n_This endpoint is only available to certain sites._",
        "x-controller": "api/v1/assets",
        "x-action": "update"
      },
      "delete": {
        "tags": [
          "Site assets"
        ],
        "operationId": "deleteSiteAsset",
        "parameters": [
          {
            "name": "asset_id",
            "description": "The asset ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Deletes an asset.\n_This endpoint is only available to certain sites._",
        "x-controller": "api/v1/assets",
        "x-action": "destroy"
      }
    },
    "/api/v1/sites/{site_id}/assets/{asset_id}/public_signature": {
      "get": {
        "tags": [
          "Site assets"
        ],
        "operationId": "getSiteAssetPublicSignature",
        "parameters": [
          {
            "name": "asset_id",
            "description": "The asset ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Returns a URL of the asset. If the asset isn't publicly visible, returns\nthe signed URL of the asset.\n_This endpoint is only available to certain sites._",
        "x-controller": "api/v1/assets",
        "x-action": "public_signature"
      }
    },
    "/api/v1/billing/payment_methods": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "operationId": "listPaymentMethodsForUser",
        "parameters": [
          {
            "name": "account_id",
            "description": "The account ID",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethod"
                  }
                }
              }
            }
          }
        },
        "description": "Returns available payment methods for the current user. Returns list\nof payment methods for the account if account_id is provided.",
        "x-controller": "api/v1/billing/payment_methods",
        "x-action": "index"
      }
    },
    "/api/v1/sites/{site_id}/build_hooks": {
      "get": {
        "tags": [
          "Build Hooks"
        ],
        "operationId": "listSiteBuildHooks",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuildHook"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of build hooks for a site.",
        "x-controller": "api/v1/build_hooks",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Build Hooks"
        ],
        "operationId": "createSiteBuildHook",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildHook"
                }
              }
            }
          }
        },
        "description": "Creates a build hook for a site.",
        "x-controller": "api/v1/build_hooks",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBuildHook"
              }
            }
          }
        }
      }
    },
    "/api/v1/sites/{site_id}/build_hooks/{id}": {
      "get": {
        "tags": [
          "Build Hooks"
        ],
        "operationId": "getSiteBuildHook",
        "parameters": [
          {
            "name": "id",
            "description": "The build hook ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildHook"
                }
              }
            }
          }
        },
        "description": "Returns a build hook for a site.",
        "x-controller": "api/v1/build_hooks",
        "x-action": "show"
      },
      "put": {
        "tags": [
          "Build Hooks"
        ],
        "operationId": "updateSiteBuildHook",
        "parameters": [
          {
            "name": "id",
            "description": "The build hook ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Updates a build hook for a site.",
        "x-controller": "api/v1/build_hooks",
        "x-action": "update",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBuildHook"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Build Hooks"
        ],
        "operationId": "deleteSiteBuildHook",
        "parameters": [
          {
            "name": "id",
            "description": "The build hook ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Deletes a build hook for a site.",
        "x-controller": "api/v1/build_hooks",
        "x-action": "destroy"
      }
    },
    "/api/v1/builds/{build_id}": {
      "get": {
        "tags": [
          "Builds"
        ],
        "operationId": "getSiteBuild",
        "parameters": [
          {
            "name": "build_id",
            "description": "build_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            }
          }
        },
        "x-controller": "api/v1/builds",
        "x-action": "show"
      }
    },
    "/sites/{site_id}/builds": {
      "get": {
        "tags": [
          "Builds"
        ],
        "operationId": "listSiteBuilds",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Build"
                  }
                }
              }
            }
          }
        },
        "x-controller": "api/v1/builds",
        "x-action": "index"
      }
    },
    "/api/v1/sites/{site_id}/builds": {
      "post": {
        "tags": [
          "Builds"
        ],
        "operationId": "createSiteBuild",
        "parameters": [
          {
            "name": "branch",
            "description": "The branch to build; defaults to main branch",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clear_cache",
            "description": "Whether to clear the build cache before building",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "image",
            "description": "The build image tag to use for the build",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_id",
            "description": "The build template to use for the build",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "description": "Runs a build for a site. The build will be scheduled to run at the first opportunity, but it might not start immediately if insufficient account build capacity is available.",
        "x-controller": "api/v1/builds",
        "x-action": "create"
      }
    },
    "/api/v1/builds/{build_id}/log": {
      "post": {
        "tags": [
          "Builds"
        ],
        "operationId": "updateSiteBuildLog",
        "parameters": [
          {
            "name": "build_id",
            "description": "build_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Add a message to the build log.",
        "x-controller": "api/v1/builds",
        "x-action": "log",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  },
                  "error": {
                    "type": "boolean"
                  },
                  "section": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/builds/{build_id}/start": {
      "post": {
        "tags": [
          "Builds"
        ],
        "operationId": "notifyBuildStart",
        "parameters": [
          {
            "name": "build_id",
            "description": "build_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "build_version",
            "description": "build_version",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "buildbot_version",
            "description": "buildbot_version",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Mark that the build has started.",
        "x-controller": "api/v1/builds",
        "x-action": "start"
      }
    },
    "/api/v1/deploy_keys": {
      "get": {
        "tags": [
          "Deploy keys"
        ],
        "operationId": "listDeployKeys",
        "parameters": [
          {
            "name": "page",
            "description": "Page of results to retrieve. Default is 1.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "description": "Number of deploys to retrieve per page. The default and maximum value is 100.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployKey"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of deploy keys.",
        "x-controller": "api/v1/deploy_keys",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Deploy keys"
        ],
        "operationId": "createDeployKey",
        "parameters": [

        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployKey"
                }
              }
            }
          }
        },
        "description": "Creates a deploy key for the current user.",
        "x-controller": "api/v1/deploy_keys",
        "x-action": "create"
      }
    },
    "/api/v1/deploy_keys/{key_id}": {
      "get": {
        "tags": [
          "Deploy keys"
        ],
        "operationId": "getDeployKey",
        "parameters": [
          {
            "name": "key_id",
            "description": "The deploy key ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployKey"
                }
              }
            }
          }
        },
        "description": "Returns a deploy key.",
        "x-controller": "api/v1/deploy_keys",
        "x-action": "show"
      },
      "delete": {
        "tags": [
          "Deploy keys"
        ],
        "operationId": "deleteDeployKey",
        "parameters": [
          {
            "name": "key_id",
            "description": "The deploy key ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Deletes a deploy key.",
        "x-controller": "api/v1/deploy_keys",
        "x-action": "destroy"
      }
    },
    "/api/v1/sites/{site_id}/deploys": {
      "get": {
        "tags": [
          "Deploys"
        ],
        "operationId": "listSiteDeploys",
        "parameters": [
          {
            "name": "branch",
            "description": "If provided, the branch on which to filter the list of deploys.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploy-previews",
            "description": "If provided, filters the list of deploys to just deploy previews.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "description": "A Unix timestamp to filter for deploys created since a certain time",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "latest-published",
            "description": "If provided, sorts the list of deploys by published_at date, with the most recent deploy first.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "description": "Page of results to retrieve. Default is 1.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "description": "Number of deploys to retrieve per page. The default and maximum value is 100.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "production",
            "description": "If provided, filters the list of deploys to just production deploys.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "description": "If provided, the state on which to filter the list of deploys.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "new",
                "pending_review",
                "accepted",
                "rejected",
                "enqueued",
                "building",
                "uploading",
                "uploaded",
                "preparing",
                "prepared",
                "processing",
                "ready",
                "error",
                "retrying"
              ]
            }
          },
          {
            "name": "to",
            "description": "A Unix timestamp to filter for deploys created before a certain time",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Deploy"
                  }
                }
              }
            }
          }
        },
        "description": "Lists the deploys of a site.",
        "x-controller": "api/v1/deploys",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Deploys"
        ],
        "operationId": "createSiteDeploy",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "description": "The title of the deploy",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          }
        },
        "description": "Creates a deploy for a site.",
        "x-controller": "api/v1/deploys",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "object"
                  },
                  "draft": {
                    "type": "boolean"
                  },
                  "async": {
                    "type": "boolean"
                  },
                  "functions": {
                    "type": "object"
                  },
                  "function_schedules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "cron": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "functions_config": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "object",
                        "properties": {
                          "priority": {
                            "type": "integer"
                          },
                          "build_data": {
                            "type": "object"
                          },
                          "display_name": {
                            "type": "string"
                          },
                          "generator": {
                            "type": "string"
                          },
                          "routes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "pattern": {
                                  "type": "string"
                                },
                                "literal": {
                                  "type": "string"
                                },
                                "expression": {
                                  "type": "string"
                                },
                                "methods": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "branch": {
                    "type": "string"
                  },
                  "framework": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/deploys/{deploy_id}": {
      "get": {
        "tags": [
          "Deploys"
        ],
        "operationId": "getDeploy",
        "parameters": [
          {
            "name": "deploy_id",
            "description": "The ID of the deploy",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          }
        },
        "description": "Returns details about a deploy.",
        "x-controller": "api/v1/deploys",
        "x-action": "/api/v1/deploys/{deploy_id}_GET"
      },
      "delete": {
        "tags": [
          "Deploys"
        ],
        "operationId": "deleteDeploy",
        "parameters": [
          {
            "name": "deploy_id",
            "description": "The ID of the deploy to delete",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          }
        },
        "description": "Marks a deploy for deletion.",
        "x-controller": "api/v1/deploys",
        "x-action": "/api/v1/deploys/{deploy_id}_DELETE"
      }
    },
    "/api/v1/sites/{site_id}/deploys/{deploy_id}": {
      "get": {
        "tags": [
          "Deploys"
        ],
        "operationId": "getSiteDeploy",
        "parameters": [
          {
            "name": "deploy_id",
            "description": "The ID of the deploy",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          }
        },
        "description": "Returns details about a deploy.",
        "x-controller": "api/v1/deploys",
        "x-action": "show"
      },
      "delete": {
        "tags": [
          "Deploys"
        ],
        "operationId": "deleteSiteDeploy",
        "parameters": [
          {
            "name": "deploy_id",
            "description": "The ID of the deploy",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          }
        },
        "description": "Marks a deploy for deletion.",
        "x-controller": "api/v1/deploys",
        "x-action": "destroy"
      },
      "put": {
        "tags": [
          "Deploys"
        ],
        "operationId": "updateSiteDeploy",
        "parameters": [
          {
            "name": "deploy_id",
            "description": "The ID of the deploy",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          }
        },
        "description": "Updates a deploy for a site.",
        "x-controller": "api/v1/deploys",
        "x-action": "update",
        "requestBody": { "required": true,
          "description": ", await_ready_signal: boolean]",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "object"
                  },
                  "draft": {
                    "type": "boolean"
                  },
                  "async": {
                    "type": "boolean"
                  },
                  "functions": {
                    "type": "object"
                  },
                  "function_schedules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "cron": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "functions_config": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "object",
                        "properties": {
                          "display_name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "branch": {
                    "type": "string"
                  },
                  "framework": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sites/{site_id}/deploys/{deploy_id}/restore": {
      "post": {
        "tags": [
          "Deploys"
        ],
        "operationId": "restoreSiteDeploy",
        "parameters": [
          {
            "name": "deploy_id",
            "description": "The ID of the deploy to restore the site to",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          }
        },
        "description": "Deploys a different version of a site.",
        "x-controller": "api/v1/deploys",
        "x-action": "restore"
      }
    },
    "/api/v1/deploys/{deploy_id}/lock": {
      "post": {
        "tags": [
          "Deploys"
        ],
        "operationId": "lockDeploy",
        "parameters": [
          {
            "name": "deploy_id",
            "description": "The ID of the deploy to lock",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          }
        },
        "description": "Locks a specific deploy (subsequent deploys will be built but not published).",
        "x-controller": "api/v1/deploys",
        "x-action": "lock"
      }
    },
    "/api/v1/deploys/{deploy_id}/unlock": {
      "post": {
        "tags": [
          "Deploys"
        ],
        "operationId": "unlockDeploy",
        "parameters": [
          {
            "name": "deploy_id",
            "description": "The ID of the deploy to unlock",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          }
        },
        "description": "Unlocks a specific deploy.",
        "x-controller": "api/v1/deploys",
        "x-action": "unlock"
      }
    },
    "/api/v1/deploys/{deploy_id}/cancel": {
      "post": {
        "tags": [
          "Deploys"
        ],
        "operationId": "cancelSiteDeploy",
        "parameters": [
          {
            "name": "deploy_id",
            "description": "The ID of the deploy",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          }
        },
        "description": "Cancels a deploy.",
        "x-controller": "api/v1/deploys",
        "x-action": "cancel"
      }
    },
    "/api/v1/deploys/{deploy_id}/simple": {
      "get": {
        "tags": [
          "Deploys"
        ],
        "operationId": "getSimplePublicDeploy",
        "parameters": [
          {
            "name": "deploy_id",
            "description": "The ID of the deploy",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy_Simple"
                }
              }
            }
          }
        },
        "description": "Returns public information about a deploy.",
        "x-controller": "api/v1/deploys",
        "x-action": "/api/v1/deploys/{deploy_id}/simple_GET"
      }
    },
    "/api/v1/sites/{site_id}/dev_server_hooks": {
      "get": {
        "tags": [
          "Dev Server Hooks"
        ],
        "operationId": "listSiteDevServerHooks",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevServerHook"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of dev server hooks for a site.",
        "x-controller": "api/v1/dev_server_hooks",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Dev Server Hooks"
        ],
        "operationId": "createSiteDevServerHook",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevServerHook"
                }
              }
            }
          }
        },
        "description": "Creates a dev server hook for a site.",
        "x-controller": "api/v1/dev_server_hooks",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDevServerHook"
              }
            }
          }
        }
      }
    },
    "/api/v1/sites/{site_id}/dev_server_hooks/{id}": {
      "get": {
        "tags": [
          "Dev Server Hooks"
        ],
        "operationId": "getSiteDevServerHook",
        "parameters": [
          {
            "name": "id",
            "description": "The dev server hook ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevServerHook"
                }
              }
            }
          }
        },
        "description": "Returns a dev server hook for a site.",
        "x-controller": "api/v1/dev_server_hooks",
        "x-action": "show"
      },
      "put": {
        "tags": [
          "Dev Server Hooks"
        ],
        "operationId": "updateSiteDevServerHook",
        "parameters": [
          {
            "name": "id",
            "description": "The dev server hook ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Updates a dev server hook for a site.",
        "x-controller": "api/v1/dev_server_hooks",
        "x-action": "update",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDevServerHook"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Dev Server Hooks"
        ],
        "operationId": "deleteSiteDevServerHook",
        "parameters": [
          {
            "name": "id",
            "description": "The dev server hook ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Deletes a dev server hook for a site.",
        "x-controller": "api/v1/dev_server_hooks",
        "x-action": "destroy"
      }
    },
    "/api/v1/dns_zones/{zone_id}/dns_records": {
      "get": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "getDnsRecords",
        "parameters": [
          {
            "name": "zone_id",
            "description": "The ID or the name of the DNS zone",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DnsRecord"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of DNS records.",
        "x-controller": "api/v1/dns_records",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "createDnsRecord",
        "parameters": [
          {
            "name": "zone_id",
            "description": "The ID or the name of the DNS zone",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsRecord"
                }
              }
            }
          }
        },
        "description": "Creates a DNS record.",
        "x-controller": "api/v1/dns_records",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DnsRecordCreateParams"
              }
            }
          }
        }
      }
    },
    "/api/v1/dns_zones/{zone_id}/dns_records/{dns_record_id}": {
      "get": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "getIndividualDnsRecord",
        "parameters": [
          {
            "name": "dns_record_id",
            "description": "The ID of the DNS record",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zone_id",
            "description": "The ID or the name of the DNS zone",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsRecord"
                }
              }
            }
          }
        },
        "description": "Returns a DNS record.",
        "x-controller": "api/v1/dns_records",
        "x-action": "show"
      },
      "delete": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "deleteDnsRecord",
        "parameters": [
          {
            "name": "dns_record_id",
            "description": "The ID of the DNS record",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zone_id",
            "description": "The ID or the name of the DNS zone",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Deletes a DNS record.",
        "x-controller": "api/v1/dns_records",
        "x-action": "destroy"
      }
    },
    "/api/v1/dns_zones": {
      "get": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "getDnsZones",
        "parameters": [
          {
            "name": "account_slug",
            "description": "The account slug",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Number of per_page to skip when returning records",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "description": "Number of records to return",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DnsZone"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of DNS zones. If the `account_slug` is passed, returns\nthe list for the account. Otherwise, returns the list for all DNS zones\nthat the current user has access to.",
        "x-controller": "api/v1/dns_zones",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "createDnsZone",
        "parameters": [

        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsZone"
                }
              }
            }
          }
        },
        "description": "Creates a DNS zone.",
        "x-controller": "api/v1/dns_zones",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DnsZoneCreateParams"
              }
            }
          }
        }
      }
    },
    "/api/v1/dns_zones/{zone_id}": {
      "get": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "getDnsZone",
        "parameters": [
          {
            "name": "zone_id",
            "description": "The ID or the name of the DNS zone",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsZone"
                }
              }
            }
          }
        },
        "description": "Returns a DNS zone.",
        "x-controller": "api/v1/dns_zones",
        "x-action": "show"
      },
      "delete": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "deleteDnsZone",
        "parameters": [
          {
            "name": "zone_id",
            "description": "The ID or the name of the DNS zone",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Deletes a DNS zone.",
        "x-controller": "api/v1/dns_zones",
        "x-action": "destroy"
      }
    },
    "/api/v1/dns_zones/{zone_id}/enable-ipv6": {
      "put": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "enableDnsZoneIpv6",
        "parameters": [
          {
            "name": "zone_id",
            "description": "The ID or the name of the DNS zone",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsZone"
                }
              }
            }
          }
        },
        "description": "Enables IPv6 with a DNS zone.",
        "x-controller": "api/v1/dns_zones",
        "x-action": "enable_ipv6"
      }
    },
    "/api/v1/dns_zones/{zone_id}/transfer": {
      "put": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "transferDnsZone",
        "parameters": [
          {
            "name": "zone_id",
            "description": "The ID or the name of the DNS zone",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Transfers a DNS zone to the different account.",
        "x-controller": "api/v1/dns_zones",
        "x-action": "transfer",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DnsZoneTransferParams"
              }
            }
          }
        }
      }
    },
    "/api/v1/sites/{site_id}/dns": {
      "get": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "getDNSForSite",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DnsZone"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of the DNS configuration for a site.",
        "x-controller": "api/v1/dns_zones",
        "x-action": "show_dns_configuration"
      },
      "put": {
        "tags": [
          "DNS zones"
        ],
        "operationId": "configureDNSForSite",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DnsZone"
                  }
                }
              }
            }
          }
        },
        "description": "Configures all automatic DNS entries for a site. Based on the custom\ndomain and domain aliases, create DNS zones and/or records if they\ndon't exist already.\nThis configuration usually runs automatically when the custom domain or\ndomain aliases are modified.",
        "x-controller": "api/v1/dns_zones",
        "x-action": "update_dns_configuration"
      }
    },
    "/api/v1/accounts/{account_id}/env": {
      "get": {
        "tags": [
          "Environment variables"
        ],
        "operationId": "getEnvVars",
        "parameters": [
          {
            "name": "account_id",
            "description": "Scope response to account_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context",
            "description": "Filter by deploy context",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "dev",
                "branch-deploy",
                "deploy-preview",
                "production"
              ]
            }
          },
          {
            "name": "scope",
            "description": "Filter by scope",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "builds",
                "functions",
                "runtime",
                "post_processing"
              ]
            }
          },
          {
            "name": "site_id",
            "description": "If specified, only return environment variables set on this site",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvVar"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (not logged in; not on team; not allowed to create environment variables)"
          },
          "404": {
            "description": "Not Found (site_id not found)"
          }
        },
        "description": "Returns all environment variables for an account or site. An account corresponds to a team in the Netlify UI.",
        "x-controller": "api/v1/environment_variables",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Environment variables"
        ],
        "operationId": "createEnvVars",
        "parameters": [
          {
            "name": "account_id",
            "description": "Scope response to account_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client",
            "description": "Optional parameter that identifies where the request is coming from (added originally for telemetry purposes)",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "If provided, create an environment variable on the site level, not the account level",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvVar"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (request structured incorrectly)"
          },
          "401": {
            "description": "Unauthorized (not logged in; not on team; not allowed to create environment variables)"
          },
          "404": {
            "description": "Not Found (site_id not found)"
          },
          "409": {
            "description": "Conflict (key already exists on site/team)"
          },
          "422": {
            "description": "Unprocessable Entity (catchall for other error types)"
          }
        },
        "description": "Creates new environment variables. Granular scopes are available on Pro plans and above.",
        "x-controller": "api/v1/environment_variables",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "The array of environment variables to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnvVar"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sites/{site_id}/env": {
      "get": {
        "tags": [
          "Environment variables"
        ],
        "operationId": "getSiteEnvVars",
        "parameters": [
          {
            "name": "context",
            "description": "Filter by deploy context",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "dev",
                "branch-deploy",
                "deploy-preview",
                "production"
              ]
            }
          },
          {
            "name": "scope",
            "description": "Filter by scope",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "builds",
                "functions",
                "runtime",
                "post_processing"
              ]
            }
          },
          {
            "name": "site_id",
            "description": "Scope response to site_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvVar"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (not logged in; not on team; not allowed to create environment variables)"
          },
          "404": {
            "description": "Not Found (site_id not found)"
          }
        },
        "description": "Returns all environment variables for a site.",
        "x-controller": "api/v1/environment_variables",
        "x-action": "site_index_for_openapi"
      }
    },
    "/api/v1/accounts/{account_id}/env/{env_key}": {
      "get": {
        "tags": [
          "Environment variables"
        ],
        "operationId": "getEnvVar",
        "parameters": [
          {
            "name": "account_id",
            "description": "Scope response to account_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "env_key",
            "description": "The environment variable key (case-sensitive)",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "If provided, return the environment variable for a specific site (no merging is performed)",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvVar"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (not logged in; not on team; not allowed to create environment variables)"
          },
          "404": {
            "description": "Not Found (no environment variable found for the account or site)"
          }
        },
        "description": "Returns an individual environment variable.",
        "x-controller": "api/v1/environment_variables",
        "x-action": "show"
      },
      "put": {
        "tags": [
          "Environment variables"
        ],
        "operationId": "updateEnvVar",
        "parameters": [
          {
            "name": "account_id",
            "description": "Scope response to account_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "env_key",
            "description": "The existing environment variable key name (case-sensitive)",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "description": "The existing or new name of the key, if you wish to rename it (case-sensitive)",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "If provided, update an environment variable set on this site",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvVar"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (not logged in; not on team; not allowed to update environment variables)"
          },
          "404": {
            "description": "Not Found (site_id or env var not found)"
          }
        },
        "description": "Updates an existing environment variable and all of its values. Existing values will be replaced by values provided.",
        "x-controller": "api/v1/environment_variables",
        "x-action": "update",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "values": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EnvVarValue"
                    }
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "builds",
                        "functions",
                        "runtime",
                        "post_processing"
                      ]
                    }
                  },
                  "is_secret": {
                    "type": "boolean"
                  }
                },
                "requiredProperties": [
                  "values",
                  "scopes",
                  "is_secret"
                ]
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Environment variables"
        ],
        "operationId": "setEnvVarValue",
        "parameters": [
          {
            "name": "account_id",
            "description": "Scope response to account_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "env_key",
            "description": "The existing environment variable key name (case-sensitive)",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "If provided, update an environment variable set on this site",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvVar"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (not logged in; not on team; not allowed to update environment variables)"
          },
          "404": {
            "description": "Not Found (site_id or env var not found)"
          }
        },
        "description": "(SET) Updates or creates a value on an environment variable.",
        "x-controller": "api/v1/environment_variables",
        "x-action": "set_value",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvVarSet"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Environment variables"
        ],
        "operationId": "deleteEnvVar",
        "parameters": [
          {
            "name": "account_id",
            "description": "Scope response to account_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "env_key",
            "description": "The environment variable key (case-sensitive)",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "If provided, delete the environment variable from this site",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content (success)"
          },
          "401": {
            "description": "Unauthorized (not logged in; not on team; not allowed to delete environment variables)"
          },
          "404": {
            "description": "Not Found (site_id or env var not found)"
          }
        },
        "description": "Deletes an environment variable.",
        "x-controller": "api/v1/environment_variables",
        "x-action": "destroy"
      }
    },
    "/api/v1/accounts/{account_id}/env/{env_key}/value/{id}": {
      "delete": {
        "tags": [
          "Environment variables"
        ],
        "operationId": "deleteEnvVarValue",
        "parameters": [
          {
            "name": "account_id",
            "description": "Scope response to account_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "env_key",
            "description": "The environment variable key name (case-sensitive)",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "description": "The environment variable value's ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "If provided, delete the value from an environment variable on this site",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content (success)"
          },
          "401": {
            "description": "Unauthorized (not logged in; not on team; not allowed to delete environment variables)"
          },
          "404": {
            "description": "Not Found (site_id or id not found)"
          }
        },
        "description": "Deletes a specific environment variable value.",
        "x-controller": "api/v1/environment_variables",
        "x-action": "destroy_value"
      }
    },
    "/api/v1/sites/{site_id}/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "operationId": "listSiteFiles",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SiteFile"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of files for a site.",
        "x-controller": "api/v1/files",
        "x-action": "index"
      }
    },
    "/api/v1/sites/{site_id}/files/{file_path}": {
      "get": {
        "tags": [
          "Files"
        ],
        "operationId": "getSiteFileByPathName",
        "parameters": [
          {
            "name": "file_path",
            "description": "The file path of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "description": "Returns a file for a site by a path name.",
        "x-controller": "api/v1/files",
        "x-action": "show"
      }
    },
    "/api/v1/sites/{site_id}/forms": {
      "get": {
        "tags": [
          "Forms"
        ],
        "operationId": "listSiteForms",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID or subdomain of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Form"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Returns a list of forms for the site.",
        "x-controller": "api/v1/forms",
        "x-action": "index"
      }
    },
    "/api/v1/sites/{site_id}/forms/{form_id}": {
      "delete": {
        "tags": [
          "Forms"
        ],
        "operationId": "deleteSiteForm",
        "parameters": [
          {
            "name": "form_id",
            "description": "The ID or name of the form",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The ID or subdomain of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Deletes a form and all its submissions.",
        "x-controller": "api/v1/forms",
        "x-action": "destroy"
      }
    },
    "/api/v1/deploys/{deploy_id}/functions/{name}": {
      "put": {
        "tags": [
          "Functions"
        ],
        "operationId": "uploadDeployFunction",
        "parameters": [
          {
            "name": "deploy_id",
            "description": "The ID of the deploy",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the function",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runtime",
            "description": "The runtime of the function",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": ""
          }
        },
        "description": "Uploads a function of the deploy.",
        "x-controller": "api/v1/functions",
        "x-action": "update",
        "requestBody": { "required": true,
          "description": "file",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "/api/v1/hooks": {
      "get": {
        "tags": [
          "Hooks"
        ],
        "operationId": "listHooksBySiteId",
        "parameters": [
          {
            "name": "event",
            "description": "The name of the hook event",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_id",
            "description": "form_id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "site_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutgoingHook"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of outgoing hooks of site. You can pass form_id or\nevent to filter the result.",
        "x-controller": "api/v1/hooks",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Hooks"
        ],
        "operationId": "createHookBySiteId",
        "parameters": [

        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutgoingHook"
                }
              }
            }
          },
          "404": {
            "description": "Associated form with given form_id or form_name not found"
          },
          "422": {
            "description": "Invalid parameters"
          }
        },
        "description": "Creates a new outgoing hook.",
        "x-controller": "api/v1/hooks",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOutgoingHook"
              }
            }
          }
        }
      }
    },
    "/api/v1/hooks/{hook_id}": {
      "get": {
        "tags": [
          "Hooks"
        ],
        "operationId": "getHook",
        "parameters": [
          {
            "name": "hook_id",
            "description": "The hook ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutgoingHook"
                }
              }
            }
          }
        },
        "description": "Returns an outgoing hook.",
        "x-controller": "api/v1/hooks",
        "x-action": "show"
      },
      "put": {
        "tags": [
          "Hooks"
        ],
        "operationId": "updateHook",
        "parameters": [
          {
            "name": "hook_id",
            "description": "The hook ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutgoingHook"
                }
              }
            }
          },
          "404": {
            "description": "Associated form with given form_id not found"
          },
          "422": {
            "description": "Invalid parameters"
          }
        },
        "description": "Updates an outgoing hook.",
        "x-controller": "api/v1/hooks",
        "x-action": "update",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOutgoingHook"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Hooks"
        ],
        "operationId": "deleteHook",
        "parameters": [
          {
            "name": "hook_id",
            "description": "The hook ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Deletes an outgoing hook.",
        "x-controller": "api/v1/hooks",
        "x-action": "destroy"
      }
    },
    "/api/v1/hooks/types": {
      "get": {
        "tags": [
          "Hooks"
        ],
        "operationId": "listHookTypes",
        "parameters": [
          {
            "name": "site_id",
            "description": "site_id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutgoingHookType"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of hook types that are available.\n\nReturns only a list of available hook types to the site if the `site_id`.\nis given.",
        "x-controller": "api/v1/hooks",
        "x-action": "types"
      }
    },
    "/api/v1/hooks/{hook_id}/enable": {
      "post": {
        "tags": [
          "Hooks"
        ],
        "operationId": "enableHook",
        "parameters": [
          {
            "name": "hook_id",
            "description": "The hook ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutgoingHook"
                }
              }
            }
          }
        },
        "description": "Enables an outgoing hook that was disabled due to the error count.",
        "x-controller": "api/v1/hooks",
        "x-action": "enable"
      }
    },
    "/api/v1/sites/{site_id}/metadata": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "operationId": "getSiteMetadata",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Returns metadata for a site.",
        "x-controller": "api/v1/metadata",
        "x-action": "show"
      },
      "put": {
        "tags": [
          "Metadata"
        ],
        "operationId": "updateSiteMetadata",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "description": "Updates metadata for a site.",
        "x-controller": "api/v1/metadata",
        "x-action": "update",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/oauth/tickets/{ticket_id}": {
      "get": {
        "tags": [
          "OAuth tickets"
        ],
        "operationId": "showTicket",
        "parameters": [
          {
            "name": "ticket_id",
            "description": "The ticket ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth_Ticket"
                }
              }
            }
          },
          "404": {
            "description": "OAuth ticket not found"
          }
        },
        "description": "Returns an OAuth ticket by ID.",
        "x-controller": "api/v1/oauth/tickets",
        "x-action": "show"
      }
    },
    "/api/v1/oauth/tickets": {
      "post": {
        "tags": [
          "OAuth tickets"
        ],
        "operationId": "createTicket",
        "parameters": [
          {
            "name": "client_id",
            "description": "The UID of the OAuth application",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth_Ticket"
                }
              }
            }
          },
          "401": {
            "description": "OAuth application not found"
          }
        },
        "description": "Creates an OAuth ticket with the OAuth application.",
        "x-controller": "api/v1/oauth/tickets",
        "x-action": "create"
      }
    },
    "/api/v1/oauth/tickets/{ticket_id}/authorize": {
      "post": {
        "tags": [
          "OAuth tickets"
        ],
        "operationId": "authorizeWithTicket",
        "parameters": [
          {
            "name": "grant_saml",
            "description": "Whether token should allow API access to currently authenticated SAML protected account",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ticket_id",
            "description": "The ticket ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authorized"
          },
          "404": {
            "description": "OAuth ticket not found"
          }
        },
        "description": "Authorizes a current user with the OAuth ticket.",
        "x-controller": "api/v1/oauth/tickets",
        "x-action": "authorize"
      }
    },
    "/api/v1/oauth/tickets/{ticket_id}/exchange": {
      "post": {
        "tags": [
          "OAuth tickets"
        ],
        "operationId": "exchangeTicket",
        "parameters": [
          {
            "name": "ticket_id",
            "description": "The ticket ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Doorkeeper_AccessToken"
                }
              }
            }
          },
          "401": {
            "description": "OAuth ticket not authorized"
          },
          "404": {
            "description": "OAuth ticket not found"
          }
        },
        "description": "Exchanges an OAuth ticket to an OAuth token.",
        "x-controller": "api/v1/oauth/tickets",
        "x-action": "exchange"
      }
    },
    "/api/v1/organizations/{organization_id}/receipts": {
      "get": {
        "tags": [
          "Organization receipts"
        ],
        "operationId": "getOrganizationReceipts",
        "parameters": [
          {
            "name": "organization_id",
            "description": "The organization ID or slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "The page number",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "description": "Number to show per page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Receipt"
                  }
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Only owners are allowed to view receipts"
          }
        },
        "description": "Returns all receipts for an organization.",
        "x-controller": "api/v1/organization_receipts",
        "x-action": "index"
      }
    },
    "/api/v1/organizations/{organization_id}/receipts/{id}": {
      "get": {
        "tags": [
          "Organization receipts"
        ],
        "operationId": "getOrganizationReceipt",
        "parameters": [
          {
            "name": "id",
            "description": "The receipt ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization_id",
            "description": "The organization ID or slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a specific receipt for an organization, either HTML or PDF format"
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Only owners are allowed to view receipts"
          }
        },
        "description": "Returns a specific receipt for an organization.",
        "x-controller": "api/v1/organization_receipts",
        "x-action": "show"
      }
    },
    "/api/v1/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "listOrganizationsForUser",
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of all organizations that the current user is an owner of.",
        "x-controller": "api/v1/organizations",
        "x-action": "index"
      }
    },
    "/api/v1/organizations/:id": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "getOrganization",
        "parameters": [
          {
            "name": "id",
            "description": "The organization ID",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "description": "Returns an organization.",
        "x-controller": "api/v1/organizations",
        "x-action": "show"
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "operationId": "updateOrganization",
        "parameters": [
          {
            "name": "id",
            "description": "The organization ID",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the organization",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "description": "The slug of the organization",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        },
        "description": "Updates an organization.",
        "x-controller": "api/v1/organizations",
        "x-action": "update"
      }
    },
    "/api/v1/organizations/{id}/logo": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "operationId": "createOrganizationLogo",
        "parameters": [
          {
            "name": "id",
            "description": "The organization ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Only owners are allowed to upload logo"
          }
        },
        "description": "Uploads an organization logo as multipart/form-data. Maximum file size is 1 MB. Accepts JPEG, PNG, GIF image formats.",
        "x-controller": "api/v1/organizations",
        "x-action": "logo",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "operationId": "deleteOrganizationLogo",
        "parameters": [
          {
            "name": "id",
            "description": "The organization ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Only owners are allowed to remove the logo"
          }
        },
        "description": "Removes an organizations logo.",
        "x-controller": "api/v1/organizations",
        "x-action": "destroy_logo"
      }
    },
    "/api/v1/organizations/{id}/accounts": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "getOrganizationAccounts",
        "parameters": [
          {
            "name": "id",
            "description": "The organization ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationAccount"
                  }
                }
              }
            }
          }
        },
        "description": "Get all accounts associated to an organization.",
        "x-controller": "api/v1/organizations",
        "x-action": "accounts"
      }
    },
    "/api/v1/organizations/{id}/invoices": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "getOrganizationInvoices",
        "parameters": [
          {
            "name": "id",
            "description": "The organization ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Billing_ZuoraInvoice"
                  }
                }
              }
            }
          }
        },
        "description": "Lists all the invoices for an organization.",
        "x-controller": "api/v1/organizations",
        "x-action": "invoices"
      }
    },
    "/api/v1/organizations/{id}/invoices/{invoice_id}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "getOrganizationInvoice",
        "parameters": [
          {
            "name": "id",
            "description": "The organization ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "description": "The invoice ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "description": "Returns the invoice PDF for an organization.",
        "x-controller": "api/v1/organizations",
        "x-action": "invoice_pdf"
      }
    },
    "/api/v1/organizations/{id}/client_token": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "operationId": "getOrganizationClientToken",
        "parameters": [
          {
            "name": "id",
            "description": "The organization ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    },
                    "signature": {
                      "type": "string"
                    },
                    "uri": {
                      "type": "string"
                    },
                    "payment_gateway_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Returns a client token for an organization to use with credit card payments.",
        "x-controller": "api/v1/organizations",
        "x-action": "client_token"
      }
    },
    "/api/v1/organizations/{id}/payments": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "operationId": "createOrganizationPayment",
        "parameters": [
          {
            "name": "data",
            "description": "The payment method data",
            "required": false,
            "in": "query",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "last4": {
                  "type": "string"
                },
                "card_type": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "enterprise_exception",
            "description": "Boolean to allow enterprise accounts to change payment type from ACH",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "description": "The organization ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "description": "The type of payment method",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "card"
              ]
            }
          },
          {
            "name": "zuora_id",
            "description": "The Zuora payment method ID",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          }
        },
        "description": "Sets the payment method for an organization.",
        "x-controller": "api/v1/organizations",
        "x-action": "payments"
      }
    },
    "/api/v1/sites/{site_id}/services/{addon}/instances": {
      "post": {
        "tags": [
          "Service instances"
        ],
        "operationId": "createServiceInstance",
        "parameters": [
          {
            "name": "addon",
            "description": "The slug of the service",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInstance"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "x-controller": "api/v1/service_instances",
        "x-action": "create"
      }
    },
    "/api/v1/sites/{site_id}/services/{addon}/instances/{instance_id}": {
      "get": {
        "tags": [
          "Service instances"
        ],
        "operationId": "showServiceInstance",
        "parameters": [
          {
            "name": "addon",
            "description": "The slug of the service",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "description": "The ID of the service instance",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInstance"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "x-controller": "api/v1/service_instances",
        "x-action": "show"
      },
      "put": {
        "tags": [
          "Service instances"
        ],
        "operationId": "updateServiceInstance",
        "parameters": [
          {
            "name": "addon",
            "description": "The slug of the service",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "description": "The ID of the service instance",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "x-controller": "api/v1/service_instances",
        "x-action": "update"
      },
      "delete": {
        "tags": [
          "Service instances"
        ],
        "operationId": "deleteServiceInstance",
        "parameters": [
          {
            "name": "addon",
            "description": "The slug of the service",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instance_id",
            "description": "The ID of the service instance",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "x-controller": "api/v1/service_instances",
        "x-action": "destroy"
      }
    },
    "/api/v1/sites/{site_id}/service-instances": {
      "get": {
        "tags": [
          "Service instances"
        ],
        "operationId": "listServiceInstancesForSite",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceInstance"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "x-controller": "api/v1/service_instances",
        "x-action": "enabled"
      }
    },
    "/api/v1/services": {
      "get": {
        "tags": [
          "Services"
        ],
        "operationId": "getServices",
        "parameters": [
          {
            "name": "search",
            "description": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-controller": "api/v1/services",
        "x-action": "index"
      }
    },
    "/api/v1/service/{addonName}": {
      "get": {
        "tags": [
          "Services"
        ],
        "operationId": "showService",
        "parameters": [
          {
            "name": "addonName",
            "description": "The slug of the service",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-controller": "api/v1/services",
        "x-action": "show"
      }
    },
    "/api/v1/service/{addonName}/manifest": {
      "get": {
        "tags": [
          "Services"
        ],
        "operationId": "showServiceManifest",
        "parameters": [
          {
            "name": "addonName",
            "description": "The name of the service",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-controller": "api/v1/services",
        "x-action": "manifest"
      }
    },
    "/api/v1/sites": {
      "get": {
        "tags": [
          "Sites"
        ],
        "operationId": "listSites",
        "parameters": [
          {
            "name": "filter",
            "description": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "owner",
                "guest"
              ]
            }
          },
          {
            "name": "include_favorites",
            "description": "include_favorites",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "label_ids",
            "description": "label_ids",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "explode": true
          },
          {
            "name": "name",
            "description": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "description": "per_page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort_by",
            "description": "sort_by",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at",
                "alphabetical",
                "published_at"
              ]
            }
          },
          {
            "name": "visibility",
            "description": "When provided, returns only SSO/password protected / unprotected sites",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "protected",
                "public"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          }
        },
        "description": "Lists available sites.",
        "x-controller": "api/v1/sites",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Sites"
        ],
        "operationId": "createSite",
        "parameters": [
          {
            "name": "configure_dns",
            "description": "configure_dns",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          }
        },
        "description": "Creates a site.",
        "x-controller": "api/v1/sites",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Site"
              }
            }
          }
        }
      }
    },
    "/api/v1/sites/{site_id}": {
      "get": {
        "tags": [
          "Sites"
        ],
        "operationId": "getSite",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          }
        },
        "description": "Returns the details of a site.",
        "x-controller": "api/v1/sites",
        "x-action": "show"
      },
      "patch": {
        "tags": [
          "Sites"
        ],
        "operationId": "updateSite",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          }
        },
        "description": "Updates a site.",
        "x-controller": "api/v1/sites",
        "x-action": "update",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Site"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sites"
        ],
        "operationId": "deleteSite",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Deletes a site.",
        "x-controller": "api/v1/sites",
        "x-action": "destroy"
      }
    },
    "/api/v1/sites/{site_id}/deployed-branches": {
      "get": {
        "tags": [
          "Sites"
        ],
        "operationId": "listSiteDeployedBranches",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "description": "Returns the deployed branches for a site.",
        "x-controller": "api/v1/sites",
        "x-action": "list_deployed_branches"
      }
    },
    "/api/v1/sites/{site_id}/rollback": {
      "put": {
        "tags": [
          "Sites"
        ],
        "operationId": "rollbackSiteDeploy",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "Site not found"
          }
        },
        "description": "Rolls back the production deploy for this site\nto the latest known based on the `rollback_id` attribute in the deploy.\nIt does nothing if the rollback_id in the current production deploy is\nempty.",
        "x-controller": "api/v1/sites",
        "x-action": "rollback"
      }
    },
    "/api/v1/sites/{id}/unlink_repo": {
      "put": {
        "tags": [
          "Sites"
        ],
        "operationId": "unlinkSiteRepo",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "404": {
            "description": "Site not found"
          }
        },
        "description": "Unlinks the repo from the site.\nThis will:\n* Delete associated deploy keys\n* Delete outgoing webhooks for the repo\n* Delete the site's build hooks",
        "x-controller": "api/v1/sites",
        "x-action": "unlink_repo"
      }
    },
    "/api/v1/sites/{site_id}/simple": {
      "get": {
        "tags": [
          "Sites"
        ],
        "operationId": "getSimplePublicSite",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site_Simple"
                }
              }
            }
          }
        },
        "description": "Returns public information about a site.",
        "x-controller": "api/v1/sites",
        "x-action": "/api/v1/sites/{site_id}/simple_GET"
      }
    },
    "/api/v1/sites/{site_id}/snippets": {
      "get": {
        "tags": [
          "Snippets"
        ],
        "operationId": "listSiteSnippets",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Snippet"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of snippets for a site.",
        "x-controller": "api/v1/snippets",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Snippets"
        ],
        "operationId": "createSiteSnippet",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snippet"
                }
              }
            }
          }
        },
        "description": "Creates a snippet for a site.",
        "x-controller": "api/v1/snippets",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Snippet"
              }
            }
          }
        }
      }
    },
    "/api/v1/sites/{site_id}/snippets/{snippet_id}": {
      "get": {
        "tags": [
          "Snippets"
        ],
        "operationId": "getSiteSnippet",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "snippet_id",
            "description": "The snippet ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snippet"
                }
              }
            }
          }
        },
        "description": "Returns a snippet.",
        "x-controller": "api/v1/snippets",
        "x-action": "show"
      },
      "delete": {
        "tags": [
          "Snippets"
        ],
        "operationId": "deleteSiteSnippet",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "snippet_id",
            "description": "The snippet ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Deletes a snippet.",
        "x-controller": "api/v1/snippets",
        "x-action": "destroy"
      },
      "put": {
        "tags": [
          "Snippets"
        ],
        "operationId": "updateSiteSnippet",
        "parameters": [
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "snippet_id",
            "description": "The snippet ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snippet"
                }
              }
            }
          }
        },
        "description": "Creates a snippet for a site.",
        "x-controller": "api/v1/snippets",
        "x-action": "update",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Snippet"
              }
            }
          }
        }
      }
    },
    "/api/v1/sites/{site_id}/ssl": {
      "get": {
        "tags": [
          "SNI certificates"
        ],
        "operationId": "showSiteTLSCertificate",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SniCertificate"
                }
              }
            }
          }
        },
        "description": "Returns a TLS certificate of the site.",
        "x-controller": "api/v1/ssl",
        "x-action": "show"
      },
      "post": {
        "tags": [
          "SNI certificates"
        ],
        "operationId": "provisionSiteTLSCertificate",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SniCertificate"
                }
              }
            }
          }
        },
        "description": "Creates a certificate with the site. If the certificate param is passed,\ncreate a custom certificate with it. Otherwise, initiate the Let's\nEncrypt certificate provisioning.\nIf there is already associated certificate with the site, update it.",
        "x-controller": "api/v1/ssl",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateInfo"
              }
            }
          }
        }
      }
    },
    "/api/v1/form/{form_id}/submissions": {
      "get": {
        "tags": [
          "Form submissions"
        ],
        "operationId": "listFormSubmissions",
        "parameters": [
          {
            "name": "form_id",
            "description": "The form ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "description": "Number of per_page to skip when returning records",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "description": "Number of records to return",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormSubmission"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-controller": "api/v1/submissions",
        "x-action": "/api/v1/form/{form_id}/submissions_GET"
      }
    },
    "/api/v1/sites/{site_id}/submissions": {
      "get": {
        "tags": [
          "Form submissions"
        ],
        "operationId": "listSiteSubmissions",
        "parameters": [
          {
            "name": "page",
            "description": "Number of per_page to skip when returning records",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "description": "Number of records to return",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormSubmission"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-controller": "api/v1/submissions",
        "x-action": "index"
      }
    },
    "/api/v1/submissions/{submission_id}": {
      "get": {
        "tags": [
          "Form submissions"
        ],
        "operationId": "listFormSubmission",
        "parameters": [
          {
            "name": "page",
            "description": "Number of per_page to skip when returning records",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "description": "Number of records to return",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "submission_id",
            "description": "The submission ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormSubmission"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-controller": "api/v1/submissions",
        "x-action": "show"
      },
      "delete": {
        "tags": [
          "Form submissions"
        ],
        "operationId": "deleteSubmission",
        "parameters": [
          {
            "name": "submission_id",
            "description": "The submission ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-controller": "api/v1/submissions",
        "x-action": "destroy"
      }
    },
    "/api/v1/sites/{site_id}/traffic_splits": {
      "get": {
        "tags": [
          "Split tests"
        ],
        "operationId": "getSplitTests",
        "parameters": [
          {
            "name": "page",
            "description": "Number of per_page to skip when returning records",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "description": "Number of records to return",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "description": "The site ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SplitTest"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-controller": "api/v1/traffic_splits",
        "x-action": "index"
      },
      "post": {
        "tags": [
          "Split tests"
        ],
        "operationId": "createSplitTest",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitTest"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "x-controller": "api/v1/traffic_splits",
        "x-action": "create",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "branch_tests": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sites/{site_id}/traffic_splits/{split_test_id}": {
      "get": {
        "tags": [
          "Split tests"
        ],
        "operationId": "getSplitTest",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID or subdomain of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "split_test_id",
            "description": "The ID of the split test",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitTest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-controller": "api/v1/traffic_splits",
        "x-action": "show"
      },
      "put": {
        "tags": [
          "Split tests"
        ],
        "operationId": "updateSplitTest",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID or subdomain of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "split_test_id",
            "description": "The ID of the split test",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitTest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-controller": "api/v1/traffic_splits",
        "x-action": "update",
        "requestBody": { "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "branch_tests": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sites/{site_id}/traffic_splits/{split_test_id}/unpublish": {
      "post": {
        "tags": [
          "Split tests"
        ],
        "operationId": "disableSplitTest",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID or subdomain of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "split_test_id",
            "description": "The ID of the split test",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Disabled"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-controller": "api/v1/traffic_splits",
        "x-action": "unpublish"
      }
    },
    "/api/v1/sites/{site_id}/traffic_splits/{split_test_id}/publish": {
      "post": {
        "tags": [
          "Split tests"
        ],
        "operationId": "enableSplitTest",
        "parameters": [
          {
            "name": "site_id",
            "description": "The ID or subdomain of the site",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "split_test_id",
            "description": "The ID of the split test",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Enabled"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-controller": "api/v1/traffic_splits",
        "x-action": "publish"
      }
    },
    "/api/v1/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getCurrentUser",
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "description": "Returns the details of the current user.",
        "x-controller": "api/v1/users",
        "x-action": "show"
      }
    },
    "/api/v1/organizations/{organization_id}/workos_scim": {
      "get": {
        "tags": [
          "WorkOSScim"
        ],
        "operationId": "getDirectory",
        "parameters": [
          {
            "name": "organization_id",
            "description": "The ID of the organization",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "directory_type": {
                      "type": "string"
                    },
                    "scim_configured": {
                      "type": "boolean"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Returns the details of an existing directory.",
        "x-controller": "api/v1/workos_scim",
        "x-action": "show"
      },
      "delete": {
        "tags": [
          "WorkOSScim"
        ],
        "operationId": "deleteDirectory",
        "parameters": [
          {
            "name": "organization_id",
            "description": "The ID of the organization",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Deletes the WorkOS directory",
        "x-controller": "api/v1/workos_scim",
        "x-action": "destroy"
      }
    },
    "/api/v1/organizations/{organization_id}/workos_scim/delete_directory_sync": {
      "delete": {
        "tags": [
          "WorkOSScim"
        ],
        "operationId": "deleteDirectorySync",
        "parameters": [
          {
            "name": "organization_id",
            "description": "The ID of the organization",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "description": "Deletes the WorkOS directory keeping users in their teams.",
        "x-controller": "api/v1/workos_scim",
        "x-action": "delete_directory_sync"
      }
    }
  },
  "tags": [
    {
      "name": "Access tokens",
      "description": "This document describes the API for revoking access tokens."
    },
    {
      "name": "Accounts",
      "description": "Endpoints for managing accounts. In the Netlify UI, accounts are known as teams."
    },
    {
      "name": "Analytics",
      "description": "Endpoints for managing Analytics."
    },
    {
      "name": "Build Hooks",
      "description": "Endpoints for managing build hooks."
    },
    {
      "name": "Builds",
      "description": ""
    },
    {
      "name": "Deploy keys",
      "description": "Endpoints for managing deploy keys."
    },
    {
      "name": "Deploys",
      "description": "Endpoints for managing deploys."
    },
    {
      "name": "Dev Server Hooks",
      "description": "Endpoints for managing dev server hooks."
    },
    {
      "name": "DNS zones",
      "description": "Endpoints for managing DNS zones and records."
    },
    {
      "name": "Environment variables",
      "description": "Endpoints to retrieve, create, update, and delete environment variables.\nDuring the beta period, you must opt in to the new environment variable experience\nusing the Netlify UI before you can use these endpoints to set contextual values and specific scopes."
    },
    {
      "name": "Files",
      "description": "Endpoints for managing files for sites and deploys."
    },
    {
      "name": "Form submissions",
      "description": ""
    },
    {
      "name": "Forms",
      "description": "Endpoints for managing forms."
    },
    {
      "name": "Functions",
      "description": "Endpoints for managing functions."
    },
    {
      "name": "Hooks",
      "description": "Endpoints for managing outgoing hooks with sites and forms."
    },
    {
      "name": "Members",
      "description": "Endpoints for managing members. The member endpoints help you invite, retrieve, update, or delete members of a team. Accounts are equivalent to teams."
    },
    {
      "name": "Metadata",
      "description": "Endpoints for managing site metadata."
    },
    {
      "name": "OAuth tickets",
      "description": "This document describes the API for creating and reading OAuth tickets,\nor authorizing and exchanging tickets."
    },
    {
      "name": "Organization receipts",
      "description": "Endpoints for managing organization receipts."
    },
    {
      "name": "Organizations",
      "description": "This document describes the API for organizations"
    },
    {
      "name": "Payment Methods",
      "description": "Endpoints for managing payment methods."
    },
    {
      "name": "Service instances",
      "description": "Endpoints for managing services instances. Services are also known as Add-ons"
    },
    {
      "name": "Services",
      "description": "Endpoints for managing services. Services are also known as Add-ons"
    },
    {
      "name": "Site assets",
      "description": "Endpoints for managing private assets.\n_This endpoint is only available to certain sites._"
    },
    {
      "name": "Sites",
      "description": "Endpoints for managing sites."
    },
    {
      "name": "SNI certificates",
      "description": "Endpoints for managing TLS certificates."
    },
    {
      "name": "Snippets",
      "description": "Endpoints for managing snippets."
    },
    {
      "name": "Split tests",
      "description": ""
    },
    {
      "name": "Users",
      "description": "Endpoints for managing users."
    },
    {
      "name": "WorkOSScim",
      "description": "Endpoints to manage WorkOS SCIM integration."
    }
  ],
  "components": {
    "schemas": {
      "AccountBuild": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the identifier for the build"
          },
          "sha": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "done": {
            "type": "boolean"
          },
          "priority": {
            "type": "object",
            "properties": {
              "prioritized_at": {
                "type": "string",
                "format": "date-time"
              },
              "prioritized_by": {
                "type": "string"
              }
            },
            "description": "included if the build is prioritized"
          },
          "site_id": {
            "type": "string"
          },
          "subdomain": {
            "type": "string"
          },
          "custom_domain": {
            "type": "string"
          },
          "deploy_id": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "commit_ref": {
            "type": "string"
          },
          "commit_url": {
            "type": "string"
          },
          "committer": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "review_id": {
            "type": "string"
          },
          "review_url": {
            "type": "string"
          },
          "deploy_time": {
            "type": "string",
            "format": "date-time"
          },
          "deploy_state": {
            "type": "string"
          },
          "deploy_pending_review_reason": {
            "type": "string"
          },
          "deploy_ssl_url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "sha",
          "created_at",
          "started_at",
          "state",
          "error",
          "error_message",
          "done",
          "priority",
          "site_id",
          "subdomain",
          "custom_domain",
          "deploy_id",
          "context",
          "branch",
          "commit_ref",
          "commit_url",
          "committer",
          "title",
          "review_id",
          "review_url",
          "deploy_time",
          "deploy_state",
          "deploy_pending_review_reason",
          "deploy_ssl_url"
        ],
        "description": "AccountBuild model definition"
      },
      "AccountCompliance": {
        "type": "object",
        "properties": {
          "private_corp_repos": {
            "type": "object",
            "properties": {
              "in_compliance": {
                "type": "boolean"
              }
            }
          },
          "max_members": {
            "type": "object",
            "properties": {
              "in_compliance": {
                "type": "boolean"
              },
              "count": {
                "type": "integer"
              },
              "in_negotiation": {
                "type": "boolean"
              },
              "continuous_deployment_disabled": {
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "private_corp_repos",
          "max_members"
        ],
        "description": "AccountCompliance definition"
      },
      "AccountFirewallConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "unpublished_rules": {
            "$ref": "#/components/schemas/FirewallRuleSet"
          },
          "published_rules": {
            "$ref": "#/components/schemas/FirewallRuleSet"
          },
          "site_overrides": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deployed branch was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deployed branch was updated"
          }
        },
        "required": [
          "id",
          "unpublished_rules",
          "published_rules",
          "site_overrides",
          "created_at",
          "updated_at"
        ],
        "description": "AccountFirewallConfig model definition"
      },
      "CreateAccountFirewallConfig": {
        "type": "object",
        "properties": {
          "unpublished": {
            "$ref": "#/components/schemas/FirewallRuleSet"
          },
          "published": {
            "$ref": "#/components/schemas/FirewallRuleSet"
          }
        }
      },
      "AccountMemberRole": {
        "type": "object",
        "properties": {
        }
      },
      "AccountType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "capabilities": {
            "type": "object"
          },
          "monthly_dollar_price": {
            "type": "string"
          },
          "yearly_dollar_price": {
            "type": "string"
          },
          "monthly_seats_addon_dollar_price": {
            "type": "string"
          },
          "yearly_seats_addon_dollar_price": {
            "type": "string"
          },
          "monthly_concurrent_builds_addon_dollar_price": {
            "type": "string"
          },
          "skip_payment": {
            "type": "boolean"
          },
          "zuora_products": {
            "type": "object",
            "description": "The Zuora products and their attributes given the Zuora environment"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "description",
          "capabilities",
          "monthly_dollar_price",
          "yearly_dollar_price",
          "monthly_seats_addon_dollar_price",
          "yearly_seats_addon_dollar_price",
          "monthly_concurrent_builds_addon_dollar_price"
        ],
        "description": "AccountType model definition"
      },
      "Account": {
        "type": "object",
        "properties": {
          "billing_email": {
            "type": "string"
          },
          "billing_name": {
            "type": "string"
          },
          "billing_period": {
            "type": "string"
          },
          "capabilities": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "member_roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountMemberRole"
            }
          },
          "name": {
            "type": "string"
          },
          "owner_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "payment_method_id": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "roles_allowed": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "slug": {
            "type": "string"
          },
          "type_id": {
            "type": "string"
          },
          "type_name": {
            "type": "string"
          },
          "type_slug": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "vat": {
            "type": "string"
          },
          "support_administration_enabled": {
            "type": "boolean"
          },
          "deploy_diagnostics_setting": {
            "type": "string"
          }
        },
        "required": [
          "billing_email",
          "billing_name",
          "billing_period",
          "capabilities",
          "created_at",
          "id",
          "member_roles",
          "name",
          "owner_ids",
          "payment_method_id",
          "role",
          "roles_allowed",
          "slug",
          "type_id",
          "type_name",
          "type_slug",
          "updated_at",
          "vat",
          "support_administration_enabled",
          "deploy_diagnostics_setting"
        ],
        "description": "Account model definition"
      },
      "AccountUpdateParams": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "type_id": {
            "type": "string"
          },
          "payment_method_id": {
            "type": "string"
          },
          "period": {
            "type": "string",
            "enum": [
              "monthly",
              "yearly"
            ]
          },
          "billing_name": {
            "type": "string"
          },
          "billing_email": {
            "type": "string"
          },
          "billing_details": {
            "type": "string"
          },
          "free_trial": {
            "type": "boolean"
          },
          "enforce_mfa": {
            "type": "boolean"
          }
        }
      },
      "AdminSite": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Site"
          },
          {
            "type": "object",
            "properties": {
              "site_build_timelimit": {
                "type": "number"
              },
              "site_build_pre_process_timeout": {
                "type": "number"
              },
              "site_functions_config": {
                "type": "object"
              },
              "edge_functions_manifest": {
                "type": "object"
              }
            },
            "required": [
              "site_build_timelimit",
              "site_build_pre_process_timeout",
              "site_functions_config"
            ]
          }
        ],
        "description": "AdminSite model definition. Obfuscates private fields"
      },
      "Administrator": {
        "type": "object",
        "properties": {
          "avatar_url": {
            "type": "string",
            "description": "The URL for the avatar"
          },
          "email": {
            "type": "string",
            "description": "The administrator email"
          },
          "full_name": {
            "type": "string",
            "description": "The administrator name"
          },
          "id": {
            "type": "string",
            "description": "The identifier for the administrator record"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "description": "When this user last logged in"
          },
          "mfa_enabled": {
            "type": "boolean",
            "description": "Whether the user has two-factor authentication enabled or not"
          },
          "role": {
            "type": "string",
            "description": "The role of the administrator"
          },
          "scopes": {
            "type": "string",
            "description": "A space-separated list of scopes given based on the role"
          },
          "user_id": {
            "type": "string",
            "description": "The identifier for the user"
          }
        },
        "required": [
          "avatar_url",
          "email",
          "full_name",
          "id",
          "last_login",
          "mfa_enabled",
          "role",
          "scopes",
          "user_id"
        ],
        "description": "Administrator model definition"
      },
      "Asset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "account_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "content_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "uploaded_url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "site_id",
          "account_id",
          "name",
          "size",
          "content_type",
          "created_at",
          "updated_at",
          "state",
          "key",
          "url",
          "visibility",
          "uploaded_url"
        ],
        "description": "Asset model definition"
      },
      "AssetCreateParams": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "uploaded_url": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "content_type": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          }
        }
      },
      "AssetCreateResult": {
        "type": "object",
        "properties": {
          "form": {
            "$ref": "#/components/schemas/AssetCreateForm"
          },
          "asset": {
            "$ref": "#/components/schemas/Asset"
          }
        }
      },
      "AssetCreateForm": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "fields": {
            "type": "object",
            "properties": {
              "property1": {
                "type": "string"
              },
              "property2": {
                "type": "string"
              }
            }
          }
        }
      },
      "AuditLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "account_id": {
            "type": "string"
          },
          "payload": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "account_id",
          "payload"
        ],
        "description": "AuditLog model definition"
      },
      "BandwidthUsage": {
        "type": "object",
        "properties": {
          "used": {
            "type": "integer"
          },
          "included": {
            "type": "integer"
          },
          "additional": {
            "type": "integer"
          },
          "last_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "period_start_date": {
            "type": "string",
            "format": "date-time"
          },
          "period_end_date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "used",
          "included",
          "additional",
          "last_updated_at",
          "period_start_date",
          "period_end_date"
        ]
      },
      "Billing_ZuoraInvoiceItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Zuora id of the invoice item"
          },
          "title": {
            "type": "string",
            "description": "The title of the Zuora invoice item"
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the Zuora invoice item"
          },
          "display_amount": {
            "type": "string",
            "description": "The formatted amount with currency"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the Zuora invoice item"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "The start date of the Zuora invoice item"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "The end date of the Zuora invoice item"
          },
          "service_start_date": {
            "type": "string",
            "description": "The start date of the Zuora invoice item"
          },
          "service_end_date": {
            "type": "string",
            "description": "The end date of the Zuora invoice item"
          },
          "site_id": {
            "type": "integer",
            "description": "The Netlify site ID in which this invoice belongs to"
          },
          "domain_name": {
            "type": "string",
            "description": "The domain name of the site connected to this Zuora invoice item"
          },
          "expires_at": {
            "type": "string",
            "description": "The formatted domain expiration date"
          },
          "site_name": {
            "type": "string",
            "description": "The site name of site connected to this Zuora invoice item"
          },
          "site_domain": {
            "type": "string",
            "description": "The site domain of the site connected to this Zuora invoice item"
          },
          "recurring": {
            "type": "boolean",
            "description": "If this Zuora invoice item is recurring"
          },
          "tax_amount": {
            "type": "integer",
            "description": "The tax amount on the Zuora invoice"
          }
        },
        "required": [
          "id",
          "title",
          "amount",
          "display_amount",
          "quantity",
          "start_date",
          "end_date",
          "service_start_date",
          "service_end_date",
          "site_id",
          "domain_name",
          "expires_at",
          "site_name",
          "site_domain",
          "recurring",
          "tax_amount"
        ],
        "description": "ZuoraInvoiceItem model definition"
      },
      "Billing_ZuoraInvoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Zuora ID of the invoice"
          },
          "invoice_number": {
            "type": "string",
            "description": "The Zuora invoice number"
          },
          "invoice_date": {
            "type": "string",
            "format": "date",
            "description": "The Zuora invoice date"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "The Zuora due_date"
          },
          "balance": {
            "type": "integer",
            "description": "The remaining balance in Zuora"
          },
          "amount": {
            "type": "integer",
            "description": "The amount due in Zuora"
          },
          "payment_amount": {
            "type": "integer",
            "description": "The payment amount on the Zuora invoice"
          },
          "refund_amount": {
            "type": "integer",
            "description": "The refund amount on the Zuora invoice"
          },
          "credit_balance_adjustment_amount": {
            "type": "integer",
            "description": "The credit balance adjustment amount"
          },
          "tax_amount": {
            "type": "integer",
            "description": "The tax amount on the Zuora Invoice"
          },
          "invoice_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Billing_ZuoraInvoiceItem"
            },
            "description": "Zuora invoice items"
          }
        },
        "required": [
          "id",
          "invoice_number",
          "invoice_date",
          "due_date",
          "balance",
          "amount",
          "payment_amount",
          "refund_amount",
          "credit_balance_adjustment_amount",
          "tax_amount",
          "invoice_items"
        ],
        "description": "ZuoraInvoice model definition"
      },
      "BitbucketSelfHostedConfig": {
        "type": "object",
        "properties": {
          "instance_url": {
            "type": "string",
            "description": "the url for the bitbucket instance"
          },
          "clone_url": {
            "type": "string",
            "description": "the clone url for the bitbucket instance"
          },
          "client_id": {
            "type": "string",
            "description": "the client id of the bitbucket application"
          },
          "client_secret": {
            "type": "string",
            "description": "the client secret of the bitbucket application"
          }
        }
      },
      "BuildHook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the build hook"
          },
          "site_id": {
            "type": "string",
            "description": "The site ID of the build hook"
          },
          "title": {
            "type": "string",
            "description": "The title of the build hook"
          },
          "branch": {
            "type": "string",
            "description": "The branch of the build hook"
          },
          "url": {
            "type": "string",
            "description": "The URL of the build hook"
          },
          "draft": {
            "type": "boolean",
            "description": "If this build hook should be used to create draft deploys"
          },
          "msg": {
            "type": "string",
            "description": "The message of the build hook"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the build hook was created"
          }
        },
        "required": [
          "id",
          "site_id",
          "title",
          "branch",
          "url",
          "draft",
          "msg",
          "created_at"
        ]
      },
      "CreateBuildHook": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the build hook"
          },
          "branch": {
            "type": "string",
            "description": "The branch of the build hook"
          },
          "draft": {
            "type": "boolean",
            "description": "If this build hook should be used to create draft deploys"
          }
        }
      },
      "UpdateBuildHook": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the build hook"
          },
          "branch": {
            "type": "string",
            "description": "The branch of the build hook"
          },
          "draft": {
            "type": "boolean",
            "description": "If this build hook should be used to create draft deploys"
          }
        }
      },
      "Build": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "deploy_id": {
            "type": "string"
          },
          "deploy_state": {
            "type": "string",
            "enum": [
              "new",
              "pending_review",
              "accepted",
              "rejected",
              "enqueued",
              "building",
              "uploading",
              "uploaded",
              "preparing",
              "prepared",
              "processing",
              "ready",
              "error",
              "retrying"
            ],
            "description": "The state of the associated deploy, or empty string if there's no associated deploy."
          },
          "sha": {
            "type": "string"
          },
          "done": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "deploy_id",
          "deploy_state",
          "sha",
          "done",
          "error",
          "created_at"
        ]
      },
      "BuildStatus": {
        "type": "object",
        "properties": {
          "active": {
            "type": "integer",
            "description": "Number of active builds"
          },
          "pending_concurrency": {
            "type": "integer",
            "description": "Number of pending concurrency"
          },
          "enqueued": {
            "type": "integer",
            "description": "Number of enqueued builds"
          },
          "minutes": {
            "type": "object",
            "properties": {
              "current": {
                "type": "integer"
              },
              "previous": {
                "type": "integer"
              },
              "period_start_date": {
                "type": "string",
                "format": "date-time"
              },
              "period_end_date": {
                "type": "string",
                "format": "date-time"
              },
              "last_updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "included_minutes": {
                "type": "integer"
              },
              "included_minutes_with_packs": {
                "type": "integer"
              }
            },
            "description": "Build minutes information"
          }
        },
        "required": [
          "active",
          "pending_concurrency",
          "enqueued",
          "minutes"
        ]
      },
      "CDP_Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Event"
          },
          "user": {
            "$ref": "#/components/schemas/CDP_User"
          },
          "type": {
            "type": "string",
            "description": "The type of event (ticket, comment, view etc.)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event ticket was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event ticket was created"
          },
          "metadata": {
            "type": "object",
            "description": "Information about the metadata for the Event"
          },
          "body": {
            "type": "string",
            "description": "The body of the comment"
          },
          "resolved": {
            "type": "boolean",
            "description": "Whether the comment has been resolved"
          },
          "resolved_by": {
            "$ref": "#/components/schemas/CDP_User"
          },
          "service": {
            "type": "string",
            "description": "The service the comment belongs to (github etc)"
          },
          "service_comment_id": {
            "type": "string",
            "description": "The service id of the comment"
          },
          "review": {
            "type": "string",
            "description": "The review state of the comment (approved, denied)"
          },
          "automated": {
            "type": "boolean",
            "description": "Whether the comment is automated"
          },
          "pending": {
            "type": "boolean",
            "description": "Whether the comment is pending"
          },
          "reviewer_id": {
            "type": "string",
            "description": "The ID of the user who created the comment"
          }
        },
        "required": [
          "id",
          "user",
          "type",
          "created_at",
          "updated_at",
          "metadata",
          "body",
          "resolved",
          "resolved_by",
          "service",
          "service_comment_id",
          "review",
          "automated",
          "pending",
          "reviewer_id"
        ]
      },
      "CDP_Data_Branch": {
        "type": "object",
        "properties": {
          "additions": {
            "type": "integer",
            "description": "The number of git additions in the PullRequest"
          },
          "author": {
            "$ref": "#/components/schemas/CDP_TicketData_Member"
          },
          "base": {
            "type": "object",
            "description": "The base ref of the branch"
          },
          "body": {
            "type": "string",
            "description": "The body text for the commit"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the commit was pushed"
          },
          "deletions": {
            "type": "integer",
            "description": "The number of git deletions in the PullRequest"
          },
          "files": {
            "type": "integer",
            "description": "The number of git files changed in the commit"
          },
          "id": {
            "type": "string",
            "description": "The sha of the commit"
          },
          "repo_id": {
            "type": "integer",
            "description": "The id of the vcs repository for associated with the commit"
          },
          "title": {
            "type": "string",
            "description": "The commit message of the commit"
          },
          "url": {
            "type": "string",
            "description": "The web url of the commit"
          },
          "vcs": {
            "type": "string",
            "description": "The git host of the commit (github, gitlab, bitbucket)"
          }
        },
        "required": [
          "additions",
          "author",
          "base",
          "body",
          "created_at",
          "deletions",
          "files",
          "id",
          "repo_id",
          "title",
          "url",
          "vcs"
        ],
        "description": "CDP::Data::Branch model definition"
      },
      "CDP_Data_PullRequest": {
        "type": "object",
        "properties": {
          "additions": {
            "type": "integer",
            "description": "The number of git additions in the PullRequest"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CDP_TicketData_Member"
            },
            "description": "Information about the assignees for the PullRequest"
          },
          "author": {
            "$ref": "#/components/schemas/CDP_TicketData_Member"
          },
          "base": {
            "type": "object",
            "description": "The base ref of the PullRequest"
          },
          "body": {
            "type": "string",
            "description": "The body text for the PullRequest"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the PullRequest was closed"
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Array of information about the comments for the PullRequest"
          },
          "commits": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Array of information about the commits for the PullRequest"
          },
          "comments_count": {
            "type": "integer",
            "description": "The number of comments in the PullRequest"
          },
          "commits_count": {
            "type": "integer",
            "description": "The number of commits in the PullRequest"
          },
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CDP_TicketData_Member"
            },
            "description": "Array of information about the contributors to the PullRequest"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the PullRequest was created"
          },
          "deletions": {
            "type": "integer",
            "description": "The number of git deletions in the PullRequest"
          },
          "draft": {
            "type": "boolean",
            "description": "Whether the PullRequest is a draft"
          },
          "files": {
            "type": "integer",
            "description": "The number of git files changed in the PullRequest"
          },
          "head": {
            "type": "object",
            "description": "The head ref of the PullRequest"
          },
          "id": {
            "type": "string",
            "description": "The id of the PullRequest"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CDP_TicketData_Label"
            },
            "description": "Array of information about the labels for the PullRequest"
          },
          "last_commit_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the last commit was authored"
          },
          "merged_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the PullRequest was merged"
          },
          "milestone": {
            "$ref": "#/components/schemas/CDP_TicketData_Epic"
          },
          "number": {
            "type": "integer",
            "description": "The review number of the PullRequest"
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of project_ids associated with the PullRequest"
          },
          "repo_id": {
            "type": "integer",
            "description": "The id of the vcs repository for associated with the PullRequest"
          },
          "reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CDP_TicketData_Member"
            },
            "description": "Array of information about the reviewers for the PullRequest"
          },
          "state": {
            "type": "string",
            "description": "The state of the PullRequest (open, merged, closed)"
          },
          "title": {
            "type": "string",
            "description": "The title of the PullRequest"
          },
          "url": {
            "type": "string",
            "description": "The web url of the PullRequest"
          },
          "vcs": {
            "type": "string",
            "description": "The git host of the PullRequest (github, gitlab, bitbucket)"
          }
        },
        "required": [
          "additions",
          "assignees",
          "author",
          "base",
          "body",
          "closed_at",
          "comments",
          "commits",
          "comments_count",
          "commits_count",
          "contributors",
          "created_at",
          "deletions",
          "draft",
          "files",
          "head",
          "id",
          "labels",
          "last_commit_at",
          "merged_at",
          "milestone",
          "number",
          "projects",
          "repo_id",
          "reviewers",
          "state",
          "title",
          "url",
          "vcs"
        ],
        "description": "CDP::Data::PullRequest model definition"
      },
      "CDP_Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Event"
          },
          "user": {
            "$ref": "#/components/schemas/CDP_User"
          },
          "type": {
            "type": "string",
            "description": "The type of event (ticket, comment, view etc.)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event ticket was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event ticket was created"
          },
          "metadata": {
            "type": "object",
            "description": "Information about the metadata for the Event"
          }
        },
        "required": [
          "id",
          "user",
          "type",
          "created_at",
          "updated_at",
          "metadata"
        ]
      },
      "CDP_RunTimeError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Event"
          },
          "user": {
            "$ref": "#/components/schemas/CDP_User"
          },
          "type": {
            "type": "string",
            "description": "The type of event (ticket, comment, view etc.)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event ticket was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event ticket was created"
          },
          "metadata": {
            "type": "object",
            "description": "Information about the metadata for the Event"
          },
          "data": {
            "type": "object",
            "description": "Information about the data for the Error"
          }
        },
        "required": [
          "id",
          "user",
          "type",
          "created_at",
          "updated_at",
          "metadata",
          "data"
        ]
      },
      "CDP_TicketData_Board": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "project_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CDP_TicketData_State"
            }
          }
        },
        "required": [
          "created_at",
          "description",
          "id",
          "name",
          "project_ids",
          "states"
        ]
      },
      "CDP_TicketData_Epic": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "completed": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "state_type": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "archived",
          "completed",
          "created_at",
          "description",
          "ended_at",
          "id",
          "name",
          "state_type",
          "started_at",
          "updated_at"
        ]
      },
      "CDP_TicketData_Label": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "color": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "archived",
          "created_at",
          "color",
          "description",
          "id",
          "name"
        ]
      },
      "CDP_TicketData_Member": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "disabled": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "avatar",
          "created_at",
          "disabled",
          "email",
          "id",
          "name",
          "role",
          "username"
        ]
      },
      "CDP_TicketData_Milestone": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "completed": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "state_type": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "archived",
          "completed",
          "created_at",
          "description",
          "ended_at",
          "id",
          "name",
          "state_type",
          "started_at",
          "updated_at"
        ]
      },
      "CDP_TicketData_Project": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "color": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "issue_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CDP_TicketData_Project_IssueType"
            },
            "description": "An array of issue types of the project. Only available for Jira"
          }
        },
        "required": [
          "archived",
          "color",
          "created_at",
          "description",
          "id",
          "name",
          "updated_at",
          "issue_types"
        ]
      },
      "CDP_TicketData_Project_IssueType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the issue type"
          },
          "name": {
            "type": "string",
            "description": "The name of the issue type"
          }
        }
      },
      "CDP_TicketData_Sprint": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "archived",
          "created_at",
          "description",
          "ended_at",
          "id",
          "name",
          "started_at",
          "updated_at"
        ]
      },
      "CDP_TicketData_State": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "position": {
            "type": "integer"
          },
          "state_type": {
            "type": "string"
          }
        },
        "required": [
          "color",
          "created_at",
          "description",
          "id",
          "name",
          "position",
          "state_type"
        ]
      },
      "CDP_TicketData_Team": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "color": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "archived",
          "color",
          "id",
          "name"
        ]
      },
      "CDP_TicketData_Template": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "fields": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "fields",
          "id",
          "name"
        ]
      },
      "CDP_Ticket": {
        "type": "object",
        "properties": {
          "confidential": {
            "type": "boolean",
            "description": "Whether the ticket is only visible to members with certain access"
          },
          "description": {
            "type": "string",
            "description": "The body text of the ticket"
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "description": "The Date the ticket is due"
          },
          "epic": {
            "type": "string",
            "description": "The Epic ID for the ticket"
          },
          "estimate": {
            "type": "integer",
            "description": "The estimate for the ticket"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels for the ticket"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The IDs for the owners of the ticket"
          },
          "priority": {
            "type": "integer",
            "description": "The priority of the ticket"
          },
          "project": {
            "type": "string",
            "description": "The project id for the ticket"
          },
          "sprint": {
            "type": "string",
            "description": "The sprint id for the ticket"
          },
          "state": {
            "type": "string",
            "description": "The state of the ticket"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The IDs for the subscribers to the ticket"
          },
          "team": {
            "type": "string",
            "description": "The team ID of the ticket"
          },
          "title": {
            "type": "string",
            "description": "The title of the ticket"
          },
          "ticket_type": {
            "type": "string",
            "description": "The type of the ticket"
          },
          "number": {
            "type": "string",
            "description": "The ticket number"
          },
          "url": {
            "type": "string",
            "description": "The web url of the ticket"
          },
          "service": {
            "type": "string",
            "description": "The Ticket's service (github, clubhouse, trello etc)"
          }
        },
        "required": [
          "confidential",
          "description",
          "due_at",
          "epic",
          "estimate",
          "labels",
          "owners",
          "priority",
          "project",
          "sprint",
          "state",
          "subscribers",
          "team",
          "title",
          "ticket_type",
          "number",
          "url",
          "service"
        ]
      },
      "CDP_UserIntegration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the UserIntegration"
          },
          "slug": {
            "type": "string",
            "description": "The slug if the integration provider"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event ticket was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event ticket was created"
          },
          "integration_data": {
            "type": "object",
            "description": "Information about the user integration"
          }
        },
        "required": [
          "id",
          "slug",
          "created_at",
          "updated_at",
          "integration_data"
        ]
      },
      "CDP_User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the identifier for the user"
          },
          "full_name": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string",
            "description": "the URL for the avatar"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "connected_accounts": {
            "type": "object",
            "properties": {
              "github": {
                "type": "string"
              },
              "gitlab": {
                "type": "string"
              },
              "bitbucket": {
                "type": "string"
              }
            },
            "description": "information of the connected providers' slug if any"
          }
        },
        "required": [
          "id",
          "full_name",
          "avatar_url",
          "created_at",
          "connected_accounts"
        ],
        "description": "User model definition"
      },
      "CDP_View": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Event"
          },
          "user": {
            "$ref": "#/components/schemas/CDP_User"
          },
          "type": {
            "type": "string",
            "description": "The type of event (ticket, comment, view etc.)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event ticket was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event ticket was created"
          },
          "metadata": {
            "type": "object",
            "description": "Information about the metadata for the Event"
          },
          "path": {
            "type": "string",
            "description": "The page that was viewed"
          }
        },
        "required": [
          "id",
          "user",
          "type",
          "created_at",
          "updated_at",
          "metadata",
          "path"
        ]
      },
      "CertOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the certificate order"
          },
          "url": {
            "type": "string",
            "description": "The URL of the certificate order"
          },
          "state": {
            "type": "string",
            "description": "The state of the certificate order"
          },
          "aasm_state": {
            "type": "string",
            "description": "The state of the certificate order managed by AASM gem"
          },
          "error_reason": {
            "type": "string",
            "description": "The exception class and message putting the order into an error state"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the certificate order was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the certificate order was updated"
          }
        },
        "required": [
          "id",
          "url",
          "state",
          "aasm_state",
          "error_reason",
          "created_at",
          "updated_at"
        ],
        "description": "CertOrder model definition"
      },
      "Committer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the committer"
          },
          "account_id": {
            "type": "string",
            "description": "The ID of the account the committer is associated with"
          },
          "user_id": {
            "type": "string",
            "description": "The ID of the user associated with the committer, if found"
          },
          "provider": {
            "type": "string",
            "description": "The name of the provider, for example: **github**, **gitlab**, **bitbucket**"
          },
          "provider_id": {
            "type": "integer",
            "description": "The ID of the committer within the provider's system"
          },
          "provider_slug": {
            "type": "string",
            "description": "The username of the committer within the provider's system"
          },
          "member_id": {
            "type": "string",
            "description": "The ID of the member of the account matched to this committer"
          },
          "invite_id": {
            "type": "string",
            "description": "The invite ID matched to this committer"
          },
          "match_method": {
            "type": "string",
            "enum": [
              "automatic",
              "manual"
            ],
            "description": "How the member was matched to the committer: **automatic** for our system, or **manual**  for a human"
          },
          "last_seen": {
            "type": "string",
            "format": "date-time",
            "description": "The last time an event (push/pull/merge request) was detected for the committer"
          }
        },
        "required": [
          "id",
          "account_id",
          "user_id",
          "provider",
          "provider_id",
          "provider_slug",
          "member_id",
          "invite_id",
          "match_method",
          "last_seen"
        ],
        "description": "Committer model definition"
      },
      "ConnectBandwidthUsage": {
        "type": "object",
        "properties": {
          "used": {
            "type": "integer"
          },
          "last_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "period_start_date": {
            "type": "string",
            "format": "date-time"
          },
          "period_end_date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "used",
          "last_updated_at",
          "period_start_date",
          "period_end_date"
        ]
      },
      "Deploy_LogAttributes": {
        "type": "object",
        "properties": {
        },
        "description": "Deploy model definition"
      },
      "Deploy_Simple": {
        "type": "object",
        "properties": {
          "admin_url": {
            "type": "string"
          },
          "commit_ref": {
            "type": "string"
          },
          "commit_url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "published_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "admin_url",
          "commit_ref",
          "commit_url",
          "title",
          "published_at"
        ]
      },
      "Deploy_SimpleState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deploy was created"
          },
          "deploy_time": {
            "type": "integer",
            "description": "The total time, in seconds, it took to deploy"
          },
          "context": {
            "type": "string",
            "enum": [
              "production",
              "branch-deploy",
              "deploy-preview"
            ],
            "description": "The deploy context"
          },
          "concurrent_upload_limit": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "site_id",
          "state",
          "created_at",
          "deploy_time",
          "context",
          "concurrent_upload_limit"
        ]
      },
      "Deploy_SiteDeploy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deploy was created"
          },
          "deploy_time": {
            "type": "integer",
            "description": "The total time, in seconds, it took to deploy"
          },
          "context": {
            "type": "string",
            "enum": [
              "production",
              "branch-deploy",
              "deploy-preview"
            ],
            "description": "The deploy context"
          },
          "branch": {
            "type": "string",
            "description": "The git branch name of the deploy"
          },
          "commit_ref": {
            "type": "string",
            "description": "The git commit SHA"
          },
          "commit_url": {
            "type": "string",
            "description": "The URL for the commit of the deploy"
          },
          "ssl_url": {
            "type": "string",
            "description": "The HTTPS URL of the production deploy"
          },
          "deploy_ssl_url": {
            "type": "string",
            "description": "The HTTPS URL of the Deploy Preview"
          },
          "build_id": {
            "type": "string",
            "description": "The build ID"
          },
          "review_id": {
            "type": "integer",
            "description": "The pull request or merge request number"
          },
          "error_message": {
            "type": "string",
            "description": "The error message, if an error occurred during the deploy"
          },
          "title": {
            "type": "string",
            "description": "The title of the pull request or merge request"
          },
          "skipped": {
            "type": "boolean",
            "description": "Whether the deploy has been skipped"
          },
          "plugin_state": {
            "type": "string",
            "enum": [
              "success",
              "canceled_build",
              "failed_plugin",
              "failed_build",
              "skipped",
              "none"
            ],
            "description": "The state of the deploy's plugins"
          }
        },
        "required": [
          "id",
          "site_id",
          "state",
          "created_at",
          "deploy_time",
          "context",
          "branch",
          "commit_ref",
          "commit_url",
          "ssl_url",
          "deploy_ssl_url",
          "build_id",
          "review_id",
          "error_message",
          "title",
          "skipped",
          "plugin_state"
        ]
      },
      "SiteFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The path of the file"
          },
          "path": {
            "type": "string",
            "description": "The path of the file"
          },
          "sha": {
            "type": "string",
            "description": "The sha of the file"
          },
          "mime_type": {
            "type": "string",
            "description": "The mime_type of the file"
          },
          "size": {
            "type": "integer",
            "description": "The size of the file in bytes"
          },
          "site_id": {
            "type": "string",
            "description": "The site ID of the file"
          },
          "deploy_id": {
            "type": "string",
            "description": "The deploy ID of the file"
          }
        },
        "required": [
          "id",
          "path",
          "sha",
          "mime_type",
          "size",
          "site_id",
          "deploy_id"
        ]
      },
      "SiteFileUploadResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The path of the file"
          },
          "path": {
            "type": "string",
            "description": "The path of the file"
          },
          "sha": {
            "type": "string",
            "description": "The sha of the file"
          },
          "mime_type": {
            "type": "string",
            "description": "The mime_type of the file"
          },
          "size": {
            "type": "integer",
            "description": "The size of the file in bytes"
          }
        }
      },
      "DeployKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The deploy key ID"
          },
          "public_key": {
            "type": "string",
            "description": "The public key"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deploy key was created"
          }
        },
        "required": [
          "id",
          "public_key",
          "created_at"
        ],
        "description": "DeployKey model definition"
      },
      "Deploy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The deploy ID"
          },
          "site_id": {
            "type": "string",
            "description": "The site ID"
          },
          "build_id": {
            "type": "string",
            "description": "The build ID"
          },
          "state": {
            "type": "string",
            "enum": [
              "new",
              "pending_review",
              "accepted",
              "rejected",
              "enqueued",
              "building",
              "uploading",
              "uploaded",
              "preparing",
              "prepared",
              "processing",
              "ready",
              "error",
              "retrying"
            ],
            "description": "The state of the deploy"
          },
          "name": {
            "type": "string",
            "description": "The site name"
          },
          "url": {
            "type": "string",
            "description": "The HTTP URL of the production deploy"
          },
          "ssl_url": {
            "type": "string",
            "description": "The HTTPS URL of the production deploy"
          },
          "admin_url": {
            "type": "string",
            "description": "The URL of the deploy in the Netlify UI"
          },
          "deploy_url": {
            "type": "string",
            "description": "The HTTP URL of the Deploy Preview"
          },
          "deploy_ssl_url": {
            "type": "string",
            "description": "The HTTPS URL of the Deploy Preview"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deploy was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deploy was updated"
          },
          "user_id": {
            "type": "string",
            "description": "The user ID of the deploy's site owner"
          },
          "error_message": {
            "type": "string",
            "description": "The error message, if an error occurred during the deploy"
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of required files that need to be uploaded to complete the deploy"
          },
          "required_functions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of required functions that need to be uploaded to complete the deploy"
          },
          "commit_ref": {
            "type": "string",
            "description": "The git commit SHA"
          },
          "review_id": {
            "type": "integer",
            "description": "The pull request or merge request number"
          },
          "branch": {
            "type": "string",
            "description": "The git branch name of the deploy"
          },
          "commit_url": {
            "type": "string",
            "description": "The URL for the commit of the deploy"
          },
          "skipped": {
            "type": "boolean",
            "description": "Whether the deploy has been skipped"
          },
          "locked": {
            "type": "boolean",
            "description": "Whether the deploy has been locked"
          },
          "title": {
            "type": "string",
            "description": "The title of the pull request or merge request"
          },
          "commit_message": {
            "type": "string",
            "description": "The latest commit message for the pull request or merge request"
          },
          "review_url": {
            "type": "string",
            "description": "The URL of the pull request or merge request"
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deploy was published to production"
          },
          "context": {
            "type": "string",
            "enum": [
              "production",
              "branch-deploy",
              "deploy-preview"
            ],
            "description": "The deploy context"
          },
          "deploy_time": {
            "type": "integer",
            "description": "The total time, in seconds, it took to deploy"
          },
          "available_functions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of available functions"
          },
          "screenshot_url": {
            "type": "string",
            "description": "The URL of the screenshot of the deploy"
          },
          "committer": {
            "type": "string",
            "description": "The username of the committer on GitHub, GitLab, or BitBucket"
          },
          "skipped_log": {
            "type": "boolean",
            "description": "Whether the build logs have been skipped"
          },
          "manual_deploy": {
            "type": "boolean",
            "description": "Whether the deploy was deployed manually"
          },
          "plugin_state": {
            "type": "string",
            "enum": [
              "success",
              "canceled_build",
              "failed_plugin",
              "failed_build",
              "skipped",
              "none"
            ],
            "description": "The state of the deploy's plugins"
          },
          "framework": {
            "type": "string",
            "description": "The frontend framework detected, if any"
          },
          "entry_path": {
            "type": "string",
            "description": "The initial route of the Deploy Preview"
          },
          "summary": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "messages": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Information about the summary of the deploy"
          },
          "views_count": {
            "type": "integer",
            "description": "The number of times the deploy has been viewed"
          },
          "function_schedules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "cron": {
                  "type": "string"
                }
              }
            },
            "description": "An array of function schedules"
          },
          "edge_functions_present": {
            "type": "boolean",
            "description": "Whether the deploy includes at least one Edge Function"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date at which the deploy will be soft-deleted"
          }
        },
        "required": [
          "id",
          "site_id",
          "build_id",
          "state",
          "name",
          "url",
          "ssl_url",
          "admin_url",
          "deploy_url",
          "deploy_ssl_url",
          "created_at",
          "updated_at",
          "user_id",
          "error_message",
          "required",
          "required_functions",
          "commit_ref",
          "review_id",
          "branch",
          "commit_url",
          "skipped",
          "locked",
          "title",
          "commit_message",
          "review_url",
          "published_at",
          "context",
          "deploy_time",
          "available_functions",
          "screenshot_url",
          "committer",
          "skipped_log",
          "manual_deploy",
          "plugin_state",
          "framework",
          "entry_path",
          "summary",
          "views_count",
          "function_schedules"
        ],
        "description": "Deploy model definition"
      },
      "DeploySummary": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ready",
              "unavailable"
            ],
            "description": "The status of the summary"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploySummaryMessage"
            },
            "description": "The messages of the summary"
          }
        },
        "required": [
          "status",
          "messages"
        ],
        "description": "Deploy summary details"
      },
      "DeploySummaryMessage": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the message in Markdown format"
          },
          "details": {
            "type": "string",
            "description": "The details of the message in Markdown format"
          },
          "title": {
            "type": "string",
            "description": "The title of the message"
          },
          "type": {
            "type": "string",
            "enum": [
              "info",
              "warning"
            ],
            "description": "The type of the message"
          }
        },
        "description": "Deploy summary message"
      },
      "DeployedBranch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the deployed branch"
          },
          "site_id": {
            "type": "string",
            "description": "The site ID of the deployed branch"
          },
          "deploy_id": {
            "type": "string",
            "description": "The deploy ID of the deployed branch"
          },
          "name": {
            "type": "string",
            "description": "The name of the deployed branch"
          },
          "slug": {
            "type": "string",
            "description": "The slugified name of the deployed branch"
          },
          "url": {
            "type": "string",
            "description": "The URL of the deployed branch"
          },
          "ssl_url": {
            "type": "string",
            "description": "The SSL URL of the deployed branch"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deployed branch was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deployed branch was updated"
          }
        },
        "required": [
          "id",
          "site_id",
          "deploy_id",
          "name",
          "slug",
          "url",
          "ssl_url",
          "created_at",
          "updated_at"
        ],
        "description": "DeployedBranch model definition"
      },
      "DevServer_LogAttributes": {
        "type": "object",
        "properties": {
        },
        "description": "DevServer model definition"
      },
      "DevServerHook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the dev server hook"
          },
          "site_id": {
            "type": "string",
            "description": "The site ID of the dev server hook"
          },
          "title": {
            "type": "string",
            "description": "The title of the dev server hook"
          },
          "branch": {
            "type": "string",
            "description": "The branch of the dev server hook"
          },
          "url": {
            "type": "string",
            "description": "The URL of the dev server hook"
          },
          "msg": {
            "type": "string",
            "description": "The message of the dev server hook"
          },
          "type": {
            "type": "string",
            "description": "The type of the dev server hook"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the dev server hook was created"
          }
        },
        "required": [
          "id",
          "site_id",
          "title",
          "branch",
          "url",
          "msg",
          "type",
          "created_at"
        ]
      },
      "CreateDevServerHook": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the dev server hook"
          },
          "branch": {
            "type": "string",
            "description": "The branch of the dev server hook"
          },
          "type": {
            "type": "string",
            "description": "The type of dev server hook"
          }
        }
      },
      "UpdateDevServerHook": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the dev server hook"
          },
          "branch": {
            "type": "string",
            "description": "The branch of the dev server hook"
          },
          "type": {
            "type": "string",
            "description": "The type of dev server hook"
          }
        }
      },
      "DevServer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the dev server"
          },
          "site_id": {
            "type": "string",
            "description": "The id of the site"
          },
          "state": {
            "type": "string",
            "description": "The state of the dev server"
          },
          "enqueued_at": {
            "type": "string",
            "description": "The time the dev server was enqueued"
          },
          "created_at": {
            "type": "string",
            "description": "The time the dev server was created"
          },
          "updated_at": {
            "type": "string",
            "description": "The time the dev server was updated"
          },
          "url": {
            "type": "string",
            "description": "The url of the dev server"
          },
          "starting_at": {
            "type": "string",
            "description": "The time the dev server started"
          },
          "error_at": {
            "type": "string",
            "description": "The time the dev server errored"
          },
          "live_at": {
            "type": "string",
            "description": "The time the dev server went live"
          },
          "done_at": {
            "type": "string",
            "description": "The time the dev server was done"
          },
          "branch": {
            "type": "string",
            "description": "The branch of the dev server"
          },
          "title": {
            "type": "string",
            "description": "The title of the dev server"
          }
        }
      },
      "DevServerEnvironment": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "description": "The branch of the dev server environment"
          },
          "live": {
            "$ref": "#/components/schemas/DevServer"
          },
          "latest": {
            "$ref": "#/components/schemas/DevServer"
          }
        }
      },
      "DevServerConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the dev server"
          },
          "expires_at": {
            "type": "string",
            "description": "The time the new config should expire"
          },
          "repo_url": {
            "type": "string",
            "description": "The repo url"
          }
        }
      },
      "DirectorySyncEntity": {
        "type": "object",
        "properties": {
        }
      },
      "DnsRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the DNS record"
          },
          "site_id": {
            "type": "string",
            "description": "The site ID"
          },
          "dns_zone_id": {
            "type": "string",
            "description": "The ID of the DNS zone the record belongs to"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of error messages"
          },
          "managed": {
            "type": "boolean",
            "description": "Whether Netlify created (managed) record or the user created"
          },
          "value": {
            "type": "string",
            "description": "The value of the DNS record"
          },
          "hostname": {
            "type": "string",
            "description": "The hostname of the DNS record"
          },
          "type": {
            "type": "string",
            "description": "The type of the DNS record"
          },
          "ttl": {
            "type": "integer",
            "description": "The TTL of the DNS record"
          },
          "priority": {
            "type": "integer",
            "description": "The priority of the DNS record"
          },
          "weight": {
            "type": "integer",
            "description": "The weight of the DNS record (for SRV type record)"
          },
          "port": {
            "type": "integer",
            "description": "The port of the DNS record (for SRV type record)"
          },
          "flag": {
            "type": "integer",
            "description": "The flag of the DNS record (for CAA type record)"
          },
          "tag": {
            "type": "string",
            "description": "The tag of the DNS record (for CAA type record)"
          }
        },
        "required": [
          "id",
          "site_id",
          "dns_zone_id",
          "errors",
          "managed",
          "value",
          "hostname",
          "type",
          "ttl",
          "priority",
          "weight",
          "port",
          "flag",
          "tag"
        ]
      },
      "DnsRecordCreateParams": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string",
            "description": "The site ID"
          },
          "managed": {
            "type": "boolean",
            "description": "Whether Netlify created (managed) record or the user created"
          },
          "value": {
            "type": "string",
            "description": "The value of the DNS record"
          },
          "hostname": {
            "type": "string",
            "description": "The hostname of the DNS record"
          },
          "type": {
            "type": "string",
            "description": "The type of the DNS record"
          },
          "ttl": {
            "type": "integer",
            "description": "The TTL of the DNS record"
          },
          "priority": {
            "type": "integer",
            "description": "The priority of the DNS record"
          },
          "weight": {
            "type": "integer",
            "description": "The weight of the DNS record (for SRV type record)"
          },
          "port": {
            "type": "integer",
            "description": "The port of the DNS record (for SRV type record)"
          },
          "flag": {
            "type": "integer",
            "description": "The flag of the DNS record (for CAA type record)"
          },
          "tag": {
            "type": "string",
            "description": "The tag of the DNS record (for CAA type record)"
          }
        }
      },
      "DnsZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the DNS zone"
          },
          "name": {
            "type": "string",
            "description": "The name of the DNS zone"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of error messages"
          },
          "supported_record_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of supported DNS record types"
          },
          "user_id": {
            "type": "string",
            "description": "The user ID of the DNS zone creator"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DnsRecord"
            },
            "description": "An array of DNS records for this DNS zone"
          },
          "dns_servers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name servers of the DNS zone"
          },
          "account_id": {
            "type": "string",
            "description": "The account ID"
          },
          "site_id": {
            "type": "string",
            "description": "The site ID"
          },
          "account_slug": {
            "type": "string",
            "description": "The account slug"
          },
          "account_name": {
            "type": "string",
            "description": "The account name"
          },
          "domain": {
            "$ref": "#/components/schemas/Domain"
          },
          "ipv6_enabled": {
            "type": "boolean",
            "description": "Whether IPv6 is enabled"
          },
          "dedicated": {
            "type": "boolean",
            "description": "Whether using a dedicated network"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the DNS zone was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the DNS zone was updated"
          }
        },
        "required": [
          "id",
          "name",
          "errors",
          "supported_record_types",
          "user_id",
          "records",
          "dns_servers",
          "account_id",
          "site_id",
          "account_slug",
          "account_name",
          "ipv6_enabled",
          "dedicated",
          "created_at",
          "updated_at"
        ]
      },
      "DnsZoneCreateParams": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string",
            "description": "The ID of the site"
          },
          "account_slug": {
            "type": "string",
            "description": "The account slug. If not provided, the current user's default account will be used"
          },
          "name": {
            "type": "string",
            "description": "The name of the DNS zone"
          }
        }
      },
      "DnsZoneTransferParams": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "The current account ID of the DNS zone"
          },
          "transfer_account_id": {
            "type": "string",
            "description": "The account ID to transfer the DNS zone to"
          },
          "transfer_user_id": {
            "type": "string",
            "description": "The userID to transfer the DNS zone to"
          }
        }
      },
      "Domain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the domain"
          },
          "name": {
            "type": "string",
            "description": "The name of the domain"
          },
          "user_id": {
            "type": "string",
            "description": "The user ID of the domain creator"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the domain expires"
          },
          "registered_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the domain was registered"
          },
          "renewal_price": {
            "type": "string",
            "description": "The renewal price of the domain"
          },
          "auto_renew": {
            "type": "boolean",
            "description": "Whether the domain auto renews or not"
          },
          "auth_code": {
            "type": "string",
            "description": "The auth code used for transferring out the domain"
          },
          "transferred_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the domain was transferred"
          },
          "auto_renew_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the domain was auto renewed"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the domain was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the domain was updated"
          }
        },
        "required": [
          "id",
          "name",
          "user_id",
          "expires_at",
          "registered_at",
          "renewal_price",
          "auto_renew",
          "auth_code",
          "transferred_at",
          "auto_renew_at",
          "created_at",
          "updated_at"
        ]
      },
      "Doorkeeper_AccessToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the access token (same as access token)"
          },
          "access_token": {
            "type": "string",
            "description": "The access token"
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token set during OAuth"
          },
          "user_id": {
            "type": "string",
            "description": "The user ID of this token's owner"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of scopes for this token"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the access token was created"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the access token expires"
          }
        },
        "required": [
          "id",
          "access_token",
          "refresh_token",
          "user_id",
          "scopes",
          "created_at",
          "expires_at"
        ]
      },
      "Doorkeeper_Application": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "personal": {
            "type": "boolean"
          },
          "redirect_uri": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "authorized_at": {
            "type": "string",
            "format": "date-time"
          },
          "saml_account_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "personal",
          "redirect_uri",
          "client_id",
          "secret",
          "created_at",
          "updated_at",
          "authorized_at",
          "saml_account_id"
        ],
        "description": "Doorkeeper::Application model definition"
      },
      "EdgeFunctionConfig": {
        "type": "object",
        "properties": {
          "function": {
            "type": "string"
          },
          "generator": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "excluded_patterns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cache": {
            "type": "boolean"
          }
        },
        "required": [
          "function"
        ]
      },
      "EdgeFunctionsUsage": {
        "type": "object",
        "properties": {
          "used": {
            "type": "integer"
          },
          "included": {
            "type": "integer"
          },
          "additional": {
            "type": "integer"
          },
          "last_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "period_start_date": {
            "type": "string",
            "format": "date-time"
          },
          "period_end_date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "used",
          "included",
          "additional",
          "last_updated_at",
          "period_start_date",
          "period_end_date"
        ]
      },
      "EnvVar": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The environment variable key, like ALGOLIA_ID (case-sensitive)",
            "x-faker": "commerce.productName"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "builds",
                "functions",
                "runtime",
                "post_processing"
              ]
            },
            "description": "The scopes that this environment variable is set to"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvVarValue"
            },
            "description": "An array of Value objects containing values and metadata",
            "x-faker": "internet.password"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp of when the value was last updated",
            "x-faker": "date.past"
          },
          "updated_by": {
            "$ref": "#/components/schemas/EnvVarUser"
          },
          "is_secret": {
            "type": "boolean",
            "description": "Should this environment variable be treated as a write-only variable and not accesible outside of Netlify runtimes"
          }
        },
        "required": [
          "key",
          "scopes",
          "values",
          "updated_at",
          "updated_by"
        ],
        "description": "Environment variable model definition"
      },
      "EnvVarValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The environment variable value's universally unique ID",
            "x-faker": "datatype.uuid"
          },
          "value": {
            "type": "string",
            "description": "The environment variable's unencrypted value",
            "x-faker": "internet.password"
          },
          "context": {
            "type": "string",
            "enum": [
              "all",
              "dev",
              "branch-deploy",
              "deploy-preview",
              "production",
              "branch"
            ],
            "description": "The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`. `branch` must be provided with a value in `context_parameter`."
          },
          "context_parameter": {
            "type": "string",
            "description": "An additional parameter for custom branches. Currently, this is used for providing a branch name when `context=branch`."
          }
        },
        "description": "Environment variable value model definition"
      },
      "EnvVarUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The user's unique identifier",
            "x-faker": "datatype.number"
          },
          "full_name": {
            "type": "string",
            "description": "The user's full name (first and last)",
            "x-faker": "name.findName"
          },
          "email": {
            "type": "string",
            "description": "The user's email address",
            "x-faker": "internet.email"
          },
          "avatar_url": {
            "type": "string",
            "description": "A URL pointing to the user's avatar",
            "x-faker": "internet.avatar"
          }
        }
      },
      "EnvVarSet": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "dev",
              "branch-deploy",
              "deploy-preview",
              "production",
              "branch"
            ],
            "description": "The deploy context where this value will be applied"
          },
          "context_parameter": {
            "type": "string",
            "description": "If present, the name of the custom context related to the context_parameter"
          },
          "value": {
            "type": "string",
            "description": "The plaintext value to be set on the key-context"
          },
          "is_secret": {
            "type": "boolean",
            "description": "Should this environment variable be treated as a write-only variable and not accesible outside of Netlify runtimes"
          }
        }
      },
      "SiteFirewallConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "unpublished_rules": {
            "$ref": "#/components/schemas/FirewallRuleSet"
          },
          "published_rules": {
            "$ref": "#/components/schemas/FirewallRuleSet"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deployed branch was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deployed branch was updated"
          }
        },
        "required": [
          "id",
          "unpublished_rules",
          "published_rules",
          "created_at",
          "updated_at"
        ]
      },
      "CreateSiteFirewallConfig": {
        "type": "object",
        "properties": {
          "unpublished": {
            "$ref": "#/components/schemas/FirewallRuleSet"
          },
          "published": {
            "$ref": "#/components/schemas/FirewallRuleSet"
          }
        }
      },
      "FirewallRule": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "allow",
              "deny"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "geo",
              "ip"
            ]
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "description": {
            "type": "string"
          },
          "disabled": {
            "type": "bool"
          }
        },
        "required": [
          "action",
          "type",
          "data"
        ]
      },
      "FirewallRuleSet": {
        "type": "object",
        "properties": {
          "default": {
            "type": "string",
            "enum": [
              "allow",
              "deny"
            ]
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirewallRule"
            }
          }
        },
        "required": [
          "default",
          "rules"
        ]
      },
      "Form": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "submission_count": {
            "type": "integer"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "honeypot": {
            "type": "boolean"
          },
          "recaptcha": {
            "type": "boolean"
          },
          "last_submission_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "site_id",
          "name",
          "paths",
          "submission_count",
          "fields",
          "honeypot",
          "recaptcha",
          "last_submission_at",
          "created_at"
        ]
      },
      "FormSubmission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "form_id": {
            "type": "string"
          },
          "form_name": {
            "type": "string"
          },
          "site_url": {
            "type": "string"
          },
          "site_name": {
            "type": "string"
          },
          "number": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "form_id",
          "form_name",
          "site_url",
          "site_name",
          "number",
          "email",
          "name",
          "first_name",
          "last_name",
          "company",
          "summary",
          "body",
          "data",
          "created_at"
        ]
      },
      "FormSubmissionParams": {
        "type": "object",
        "properties": {
          "form_id": {
            "type": "string",
            "description": "The form ID"
          },
          "deploy_id": {
            "type": "string",
            "description": "The deploy ID of the form submission"
          },
          "form_submission": {
            "type": "object",
            "description": "The form submission values in hash"
          },
          "dry": {
            "type": "boolean",
            "description": "Whether to persist changes to the database or not"
          },
          "connection_ip": {
            "type": "string",
            "description": "The client IP address of the form submission request"
          },
          "user_agent": {
            "type": "string",
            "description": "The user agent of the form submission request"
          },
          "referrer": {
            "type": "string",
            "description": "The referrer of the form submission request"
          }
        }
      },
      "FunctionBundle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The function bundle ID"
          },
          "provider": {
            "type": "string",
            "enum": [
              "aws_lambda"
            ],
            "description": "The provider of the function"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the function bundle was created"
          },
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Function"
            },
            "description": "An array of the functions of this function bundle"
          },
          "log_type": {
            "type": "string",
            "enum": [
              "socketeer"
            ],
            "description": "The function log type"
          },
          "branch": {
            "type": "string",
            "description": "The branch of the deploy"
          }
        },
        "required": [
          "id",
          "provider",
          "created_at",
          "functions",
          "log_type"
        ],
        "description": "FunctionBundle model definition"
      },
      "Function": {
        "type": "object",
        "properties": {
          "n": {
            "type": "string",
            "description": "The name of the function"
          },
          "d": {
            "type": "string",
            "description": "The sha256 of the function"
          },
          "id": {
            "type": "string",
            "description": "The ID of the function"
          },
          "s": {
            "type": "string",
            "description": "The size of the function"
          },
          "r": {
            "type": "string",
            "description": "The runtime of the function"
          },
          "c": {
            "type": "string",
            "format": "date-time",
            "description": "When the function was created"
          },
          "ro": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "p": {
                  "type": "string"
                }
              }
            },
            "description": "Routes for a function"
          },
          "endpoint": {
            "type": "string",
            "description": "The endpoint of the function"
          },
          "schedule": {
            "type": "string",
            "description": "The schedule of the function as a cron expression"
          }
        }
      },
      "GithubEnterpriseConfig": {
        "type": "object",
        "properties": {
          "instance_url": {
            "type": "string",
            "description": "The URL for the GitHub instance"
          },
          "clone_url": {
            "type": "string",
            "description": "The clone URL for the GitHub instance"
          },
          "client_id": {
            "type": "string",
            "description": "The client ID of the GitHub application"
          },
          "client_secret": {
            "type": "string",
            "description": "The client secret of the GitHub application"
          },
          "app_id": {
            "type": "integer",
            "description": "The app ID of the GitHub application"
          },
          "private_key": {
            "type": "string",
            "description": "The private key of the GitHub application"
          },
          "webhook_secret": {
            "type": "string",
            "description": "The webhook secret of the GitHub application"
          }
        },
        "required": [
          "instance_url",
          "clone_url",
          "client_id",
          "client_secret",
          "app_id",
          "private_key",
          "webhook_secret"
        ]
      },
      "GitlabSelfHostedConfig": {
        "type": "object",
        "properties": {
          "instance_url": {
            "type": "string",
            "description": "the url for the gitlab instance"
          },
          "clone_url": {
            "type": "string",
            "description": "the clone url for the gitlab instance"
          },
          "client_id": {
            "type": "string",
            "description": "the client id of the gitlab application"
          },
          "client_secret": {
            "type": "string",
            "description": "the client secret of the gitlab application"
          }
        },
        "required": [
          "instance_url",
          "clone_url",
          "client_id",
          "client_secret"
        ]
      },
      "HeroAccount": {
        "type": "object",
        "properties": {
          "admin_url": {
            "type": "string"
          },
          "build_node_pool": {
            "type": "string"
          },
          "build_pre_process_timeout": {
            "type": "integer"
          },
          "build_resources": {
            "type": "object"
          },
          "build_timelimit": {
            "type": "integer"
          },
          "dev_server_resources": {
            "type": "object"
          },
          "concurrent_upload_limit": {
            "type": "integer"
          },
          "functions_config": {
            "type": "object"
          },
          "zuora_url": {
            "type": "string"
          },
          "sites_count": {
            "type": "integer"
          },
          "dunning": {
            "type": "boolean"
          },
          "enterprise_features": {
            "$ref": "#/components/schemas/EnterpriseFeatures"
          }
        },
        "required": [
          "admin_url",
          "build_node_pool",
          "build_pre_process_timeout",
          "build_resources",
          "build_timelimit",
          "dev_server_resources",
          "concurrent_upload_limit",
          "functions_config",
          "zuora_url",
          "sites_count",
          "dunning",
          "enterprise_features"
        ],
        "description": "HeroAccount model definition, see AccountUserMembershipSerializer for other fields"
      },
      "EnterpriseFeatures": {
        "type": "object",
        "properties": {
          "high_performance_builds": {
            "$ref": "#/components/schemas/HighPerformanceFeatureAttributes"
          },
          "high_performance_edge": {
            "$ref": "#/components/schemas/HighPerformanceFeatureAttributes"
          },
          "support_level": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "concurrent_builds": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "build_minutes": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "additional_build_minutes": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "edge_functions": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "additional_edge_functions": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "bandwidth": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "additional_bandwidth": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "seats": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "additional_seats": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          }
        },
        "description": "EnterpriseFeatures model definition."
      },
      "EnterpriseFeatureAttributes": {
        "type": "object",
        "properties": {
          "price": {
            "type": "string",
            "description": "The custom price for the feature in the contract; per unit for features that start with `additional_`"
          },
          "included_quantity": {
            "type": "integer",
            "description": "The amount included in the contract; consult Account#capabilities first"
          }
        },
        "description": "EnterpriseFeatureAttributes model definition."
      },
      "HighPerformanceFeatureAttributes": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether the feature is enabled for the account"
          },
          "price": {
            "type": "string",
            "description": "The custom price for the feature in the contract; per unit for features that start with `additional_`"
          },
          "included_quantity": {
            "type": "integer",
            "description": "The amount included in the contract; consult Account#capabilities first"
          }
        },
        "description": "HighPerformanceFeatureAttributes model definition."
      },
      "EnterpriseFeatureAdditional": {
        "type": "object",
        "properties": {
          "price": {
            "type": "string",
            "description": "The custom per unit price for the feature in the contract"
          }
        },
        "description": "EnterpriseFeatureAdditional model definition."
      },
      "EnterpriseFeatureEnablePrice": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether the feature is enabled for the account"
          },
          "price": {
            "type": "string",
            "description": "The custom price for the feature in the contract"
          }
        },
        "description": "EnterpriseFeatureEnablePrice model definition."
      },
      "EnterpriseFeatureSupport": {
        "type": "object",
        "properties": {
          "price": {
            "type": "string",
            "description": "The custom price for support in the contract"
          },
          "level": {
            "type": "integer",
            "description": "The support level, either **0**, **1** or **2**"
          }
        },
        "description": "EnterpriseFeatureSupport model definition."
      },
      "EnterpriseFeaturesParam": {
        "type": "object",
        "properties": {
          "saml_enabled": {
            "type": "boolean",
            "description": "Whether SAML is enabled for the account"
          },
          "connect_api_enabled": {
            "type": "boolean",
            "description": "Whether Netlify Connect is enabled for the account"
          },
          "high_performance_builds": {
            "$ref": "#/components/schemas/EnterpriseFeatureEnablePrice"
          },
          "high_performance_edge": {
            "$ref": "#/components/schemas/EnterpriseFeatureEnablePrice"
          },
          "support_level": {
            "$ref": "#/components/schemas/EnterpriseFeatureSupport"
          },
          "concurrent_builds": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "additional_concurrent_builds": {
            "$ref": "#/components/schemas/EnterpriseFeatureAdditional"
          },
          "build_minutes": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "additional_build_minutes": {
            "$ref": "#/components/schemas/EnterpriseFeatureAdditional"
          },
          "edge_functions": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "additional_edge_functions": {
            "$ref": "#/components/schemas/EnterpriseFeatureAdditional"
          },
          "bandwidth": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "additional_bandwidth": {
            "$ref": "#/components/schemas/EnterpriseFeatureAdditional"
          },
          "seats": {
            "$ref": "#/components/schemas/EnterpriseFeatureAttributes"
          },
          "additional_seats": {
            "$ref": "#/components/schemas/EnterpriseFeatureAdditional"
          },
          "additional_committers": {
            "$ref": "#/components/schemas/EnterpriseFeatureAdditional"
          }
        },
        "description": "EnterpriseFeaturesParam model definition."
      },
      "HeroOrganization": {
        "type": "object",
        "properties": {
          "admin_url": {
            "type": "string",
            "description": "The URL of the organization in the Netlify UI"
          },
          "zuora_url": {
            "type": "string",
            "description": "The URL of the zuora account"
          },
          "capabilities": {
            "type": "object"
          }
        },
        "required": [
          "admin_url",
          "zuora_url",
          "capabilities"
        ],
        "description": "HeroOrganization model definition, see OrganizationSerializer for other fields"
      },
      "HeroSitesSummary": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "use_functions_count": {
            "type": "integer"
          },
          "use_forms_count": {
            "type": "integer"
          },
          "use_edge_functions_count": {
            "type": "integer"
          },
          "use_lm_count": {
            "type": "integer"
          },
          "functions_breakdown": {
            "type": "object"
          }
        },
        "required": [
          "account_id",
          "total",
          "use_functions_count",
          "use_forms_count",
          "use_edge_functions_count",
          "use_lm_count",
          "functions_breakdown"
        ],
        "description": "HeroSitesSummary model definition"
      },
      "HeroUser": {
        "type": "object",
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "disabled_reason": {
            "type": "string"
          },
          "spam": {
            "type": "boolean"
          },
          "spam_score": {
            "type": "number"
          },
          "billing_details": {
            "type": "string"
          },
          "payments_gateway_name": {
            "type": "string"
          },
          "github_slug": {
            "type": "string"
          },
          "bitbucket_slug": {
            "type": "string"
          },
          "all_sites": {
            "type": "integer"
          },
          "support_priority": {
            "type": "integer"
          },
          "zuora_url": {
            "type": "string"
          },
          "all_accounts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "all_organizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sift_spam_score": {
            "type": "number"
          },
          "safe_to_spam": {
            "type": "boolean"
          }
        },
        "required": [
          "disabled",
          "disabled_reason",
          "spam",
          "spam_score",
          "billing_details",
          "payments_gateway_name",
          "github_slug",
          "bitbucket_slug",
          "all_sites",
          "support_priority",
          "zuora_url",
          "all_accounts",
          "all_organizations",
          "sift_spam_score",
          "safe_to_spam"
        ],
        "description": "HeroUser model definition, see UserSerializer for other fields"
      },
      "OutgoingHook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the hook"
          },
          "site_id": {
            "type": "string",
            "description": "The site ID associated with this hook"
          },
          "form_id": {
            "type": "string",
            "description": "The form ID associated with this hook"
          },
          "form_name": {
            "type": "string",
            "description": "The form name of this hook"
          },
          "user_id": {
            "type": "string",
            "description": "The user ID of the hook creator"
          },
          "type": {
            "type": "string",
            "description": "The type of the hook",
            "example": "email"
          },
          "event": {
            "type": "string",
            "description": "The name of the hook event",
            "example": "deploy_created"
          },
          "data": {
            "type": "object",
            "description": "The additional data for the hook",
            "example": {
              "email": "foo@example.com"
            }
          },
          "success": {
            "type": "boolean",
            "description": "Whether the last notification succeeded"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the hook was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the hook was updated"
          },
          "actor": {
            "type": "string",
            "description": "Which actor the hook is triggered by",
            "example": "deploy"
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether the hook is disabled due to the error rate"
          },
          "restricted": {
            "type": "boolean",
            "description": "Whether this hook type is supported by the account type"
          }
        },
        "required": [
          "id",
          "site_id",
          "form_id",
          "form_name",
          "user_id",
          "type",
          "event",
          "data",
          "success",
          "created_at",
          "updated_at",
          "actor",
          "disabled",
          "restricted"
        ],
        "description": "Outgoing hook model definition"
      },
      "CreateOutgoingHook": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string",
            "description": "The site ID of the hook"
          },
          "form_id": {
            "type": "string",
            "description": "The form ID of the hook (either form_id or form_name is required if the hook will be created for the form)"
          },
          "form_name": {
            "type": "string",
            "description": "The form name of the hook"
          },
          "type": {
            "type": "string",
            "description": "The type of the hook",
            "example": "email"
          },
          "event": {
            "type": "string",
            "description": "The name of the hook event",
            "example": "deploy_created"
          },
          "data": {
            "type": "object",
            "description": "Additional data for the hook",
            "example": {
              "email": "foo@example.com"
            }
          }
        }
      },
      "UpdateOutgoingHook": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string",
            "description": "The site ID of the hook"
          },
          "form_id": {
            "type": "string",
            "description": "The form ID of the hook (either form_id or form_name is required if the hook will be created for the form)"
          },
          "form_name": {
            "type": "string",
            "description": "The form name of the hook"
          },
          "event": {
            "type": "string",
            "description": "The name of the hook event",
            "example": "deploy_created"
          },
          "data": {
            "type": "object",
            "description": "Additional data for the hook",
            "example": {
              "email": "foo@example.com"
            }
          }
        }
      },
      "OutgoingHookType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the hook type"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of available events for this type"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "options": {
                  "type": "object"
                }
              }
            },
            "description": "The list of fields this hook type can take"
          }
        }
      },
      "IdentityVerification": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The provider of the IdentityVerification (stripe)"
          },
          "code": {
            "type": "string",
            "description": "The UUID for IdentityVerification lookups"
          },
          "session_id": {
            "type": "string",
            "description": "The session_id for IdentityVerification session"
          },
          "report": {
            "type": "object",
            "description": "The report from the identity verification service"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "state": {
            "type": "string",
            "description": "The current state of the verification"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event IdentityVerification was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the Event IdentityVerification was updated"
          }
        }
      },
      "LogDrain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the log drain"
          },
          "site_id": {
            "type": "string",
            "description": "The site ID"
          },
          "log_types": {
            "type": "string",
            "description": "An array of the selected log types"
          },
          "format": {
            "type": "string",
            "enum": [
              "json",
              "ndjson"
            ],
            "description": "The format for log drain output"
          },
          "destination": {
            "type": "string",
            "enum": [
              "datadog"
            ],
            "description": "The destination of the log drain"
          },
          "exclude_pii": {
            "type": "boolean",
            "description": "Whether to exclude PII from the user traffic logs"
          },
          "service_config": {
            "$ref": "#/components/schemas/LogDrainServiceConfig"
          }
        },
        "required": [
          "id",
          "site_id",
          "log_types",
          "format",
          "destination",
          "service_config"
        ],
        "description": "Log Drain model definition"
      },
      "LogDrainServiceConfig": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL for the log drain"
          }
        },
        "required": [
          "url"
        ],
        "description": "The configuration for sending log drains to the destination service"
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the identifier for the member (user ID)"
          },
          "full_name": {
            "type": "string",
            "description": "the full name of the member"
          },
          "email": {
            "type": "string",
            "description": "the email of the member"
          },
          "avatar": {
            "type": "string",
            "description": "the avatar URL of the member"
          },
          "role": {
            "type": "string",
            "description": "the role of the member in the team"
          },
          "mfa_enabled": {
            "type": "boolean",
            "description": "if the member has 2Factor Auth enabled or"
          },
          "capabilities": {
            "type": "object",
            "description": "the table of what CRUD actions that the member could take in the UI"
          },
          "connected_accounts": {
            "type": "object",
            "properties": {
              "github": {
                "type": "string"
              },
              "gitlab": {
                "type": "string"
              },
              "bitbucket": {
                "type": "string"
              }
            },
            "description": "information of the connected providers' slug if any"
          },
          "site_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "site ids this member has access to"
          },
          "site_access": {
            "type": "string",
            "description": "which site access this member has. either all, selected, or none"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "pending": {
            "type": "boolean",
            "description": "if the associated invite is pending acceptance"
          },
          "managed_by_directory_sync": {
            "type": "boolean",
            "description": "flag indicating if the member is managed by an idp directory"
          },
          "committer_match_method": {
            "type": "object",
            "properties": {
              "automatic": {
                "type": "string"
              },
              "manual": {
                "type": "string"
              }
            },
            "description": "the method the member is matched to a committer by."
          },
          "last_activity_date": {
            "type": "string",
            "format": "date",
            "description": "The last activity date of the member on the site. Note: activity data cannot be accessed before Nov 17th 2023, null values indicate last activity was before this date."
          }
        },
        "required": [
          "id",
          "full_name",
          "email",
          "avatar",
          "role",
          "mfa_enabled",
          "capabilities",
          "connected_accounts",
          "site_ids",
          "site_access",
          "created_at",
          "updated_at",
          "pending",
          "managed_by_directory_sync"
        ],
        "description": "Member model definition. Similar to the User model, but includes the information\nof the associated team (account)."
      },
      "OAuth_Ticket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the OAuth ticket"
          },
          "client_id": {
            "type": "string",
            "description": "The UID of the OAuth application"
          },
          "authorized": {
            "type": "boolean",
            "description": "Whether the OAuth ticket is authorized"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the OAuth ticket was created"
          }
        },
        "required": [
          "id",
          "client_id",
          "authorized",
          "created_at"
        ]
      },
      "OrganizationAccount": {
        "type": "object",
        "properties": {
          "bandwidth_usage": {
            "$ref": "#/components/schemas/BandwidthUsage"
          },
          "billing_email": {
            "type": "string",
            "description": "The billing email for the account"
          },
          "billing_name": {
            "type": "string",
            "description": "The billing name for the account"
          },
          "build_status": {
            "$ref": "#/components/schemas/BuildStatus"
          },
          "high_performance_builds_enabled": {
            "type": "boolean",
            "description": "Whether the HP builds is enabled for the account"
          },
          "high_performance_edge_enabled": {
            "type": "boolean",
            "description": "Whether the HP edge is enabled for the account"
          },
          "id": {
            "type": "string",
            "description": "The identifier for the account (account ID)"
          },
          "included_concurrent_builds": {
            "type": "integer",
            "description": "The number of included concurrent builds"
          },
          "member_roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountMemberRole"
            }
          },
          "name": {
            "type": "string",
            "description": "The name for the account"
          },
          "owner_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of owner_ids on the account"
          },
          "slug": {
            "type": "string",
            "description": "The slug for the account"
          },
          "support_level": {
            "type": "string",
            "description": "The support level of the account"
          },
          "total_seats": {
            "type": "integer",
            "description": "Total seats"
          },
          "used_seats": {
            "type": "integer",
            "description": "Used seats"
          }
        },
        "required": [
          "bandwidth_usage",
          "billing_email",
          "billing_name",
          "build_status",
          "high_performance_builds_enabled",
          "high_performance_edge_enabled",
          "id",
          "included_concurrent_builds",
          "member_roles",
          "name",
          "owner_ids",
          "slug",
          "support_level",
          "total_seats",
          "used_seats"
        ],
        "description": "Account model definition, with more details relating to organizations."
      },
      "Organization": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "description": "The slug for the organization, a normalized internal identifier for use in places like URLs"
          },
          "id": {
            "type": "string",
            "description": "The organization ID"
          },
          "name": {
            "type": "string",
            "description": "The name for the organization"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the organization was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the organization was updated"
          },
          "billing_email": {
            "type": "string",
            "description": "The billing email for the organization"
          },
          "logo_url": {
            "type": "string",
            "description": "The logo url of the organization"
          },
          "billing_period": {
            "type": "string",
            "description": "Billing Period"
          },
          "invoicing": {
            "type": "boolean",
            "description": "Whether the organization uses invoices"
          },
          "payment_term": {
            "type": "integer",
            "description": "The number of days to pay the invoice; Only applies to organizations where invoicing is true.  Value values: *30*, *60*, *null*, defaults to 30."
          },
          "payment_method_id": {
            "type": "string",
            "description": "The payment method ID"
          },
          "sandbox": {
            "type": "boolean",
            "description": "Whether the organization uses Zuora sandbox"
          },
          "bill_cycle_day": {
            "type": "integer",
            "description": "The bill cycle day of the month for the Zuora account"
          },
          "contract_start_date": {
            "type": "string",
            "format": "date-time",
            "description": "When the current contract starts"
          },
          "contract_end_date": {
            "type": "string",
            "format": "date-time",
            "description": "When the current contract ends"
          },
          "contract_term_months": {
            "type": "integer",
            "description": "The contract term length in months"
          },
          "auto_renew": {
            "type": "boolean",
            "description": "Whether the enterprise subscription automatically renews at the end of its term in Zuora"
          },
          "purchase_order": {
            "type": "string",
            "description": "The purchase order number"
          },
          "first_name": {
            "type": "string",
            "description": "The first name to show on invoice"
          },
          "last_name": {
            "type": "string",
            "description": "The last name to show on invoice"
          },
          "company_name": {
            "type": "string",
            "description": "The company name to show on invoice"
          },
          "address1": {
            "type": "string",
            "description": "The first address line to show on invoice"
          },
          "address2": {
            "type": "string",
            "description": "The second address line to show on invoice"
          },
          "city": {
            "type": "string",
            "description": "The city to show on invoice"
          },
          "state": {
            "type": "string",
            "description": "The state to show on invoice"
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code to show on invoice"
          },
          "country": {
            "type": "string",
            "description": "The country to show on invoice"
          },
          "saml_enabled": {
            "type": "boolean",
            "description": "Whether the organization has configured sso"
          },
          "enforce_saml": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "not_enforced",
              "enforced_strict"
            ],
            "description": "Determines type of saml enforcement",
            "nullable": true
          },
          "enforce_mfa": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "not_enforced",
              "enforced",
              "dry-run_strict"
            ],
            "description": "Determines type of mfa enforcement",
            "nullable": true
          },
          "capabilities": {
            "type": "object"
          },
          "support_administration_enabled": {
            "type": "boolean",
            "description": "Whether the organization allows Netlify support to access their account via UI"
          },
          "directory_sync_connected_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "When the organization connected to directory sync",
            "nullable": true
          },
          "directory_sync_activated_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "When the organization activated directory sync",
            "nullable": true
          },
          "directory_sync_deactivated_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "When the organization deactivated directory sync",
            "nullable": true
          },
          "directory_sync_deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "When the organization deleted directory sync",
            "nullable": true
          },
          "saml_enabled_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "When the organization enabled SAML",
            "nullable": true
          },
          "total_member_count": {
            "type": "integer",
            "description": "The number of team members in the organization"
          }
        },
        "required": [
          "slug",
          "id",
          "name",
          "created_at",
          "updated_at",
          "billing_email",
          "logo_url",
          "billing_period",
          "invoicing",
          "payment_term",
          "payment_method_id",
          "sandbox",
          "bill_cycle_day",
          "contract_start_date",
          "contract_end_date",
          "contract_term_months",
          "auto_renew",
          "purchase_order",
          "first_name",
          "last_name",
          "company_name",
          "address1",
          "address2",
          "city",
          "state",
          "postal_code",
          "country",
          "saml_enabled",
          "enforce_saml",
          "enforce_mfa",
          "capabilities",
          "support_administration_enabled",
          "directory_sync_connected_at",
          "directory_sync_activated_at",
          "directory_sync_deactivated_at",
          "directory_sync_deleted_at",
          "saml_enabled_at",
          "total_member_count"
        ],
        "description": "Organization model definition"
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The payment method ID"
          },
          "type": {
            "type": "string",
            "description": "The name for the organization"
          },
          "data": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "last4": {
                "type": "string"
              },
              "card_type": {
                "type": "string"
              }
            },
            "description": "The payment method data"
          },
          "state": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "description": "The state of the payment method"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the payment method was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the payment method was updated"
          },
          "account_id": {
            "type": "string",
            "description": "The ID of the account the payment method belongs to"
          },
          "customer_id": {
            "type": "string",
            "description": "The ID of the customer the payment method belongs to"
          },
          "zuora_id": {
            "type": "string",
            "description": "The Zuora payment method ID"
          },
          "organization_id": {
            "type": "string",
            "description": "The ID of the organization the payment method belongs to"
          }
        },
        "required": [
          "id",
          "type",
          "data",
          "state",
          "created_at",
          "updated_at",
          "account_id",
          "customer_id",
          "zuora_id",
          "organization_id"
        ],
        "description": "PaymentMethod model definition"
      },
      "PluginRun": {
        "type": "object",
        "properties": {
          "deploy_id": {
            "type": "string",
            "description": "The ID of the deploy during which the plugin ran"
          },
          "site_id": {
            "type": "string",
            "description": "The ID of the site for which the plugin ran"
          },
          "package": {
            "type": "string",
            "description": "The name of the plugin npm package"
          },
          "version": {
            "type": "string",
            "description": "The version of the plugin that ran during the deploy"
          },
          "reporting_event": {
            "type": "string",
            "description": "The last build lifecycle event during which the plugin ran"
          },
          "state": {
            "type": "string",
            "enum": [
              "success",
              "canceled_build",
              "failed_plugin",
              "failed_build",
              "skipped",
              "none"
            ],
            "description": "The resulting success, failure, or cancelation state"
          },
          "title": {
            "type": "string",
            "description": "The title reported by the plugin"
          },
          "summary": {
            "type": "string",
            "description": "The summary reported by the plugin"
          },
          "text": {
            "type": "string",
            "description": "The full text result reported by the plugin"
          }
        },
        "required": [
          "deploy_id",
          "site_id",
          "package",
          "version",
          "reporting_event",
          "state",
          "title",
          "summary",
          "text"
        ],
        "description": "PluginRun model definition"
      },
      "PluginRunCreateParams": {
        "type": "object",
        "properties": {
          "package": {
            "type": "string",
            "description": "The name of the plugin"
          },
          "version": {
            "type": "string",
            "description": "The version of the plugin that was run"
          },
          "reporting_event": {
            "type": "string",
            "description": "The plugin build lifecycle event that generated the report e.g onPostBuild"
          },
          "state": {
            "type": "string",
            "enum": [
              "success",
              "canceled_build",
              "failed_plugin",
              "failed_build",
              "skipped",
              "none"
            ],
            "description": "The resulting success, failure or cancellation state"
          },
          "summary": {
            "type": "string",
            "description": "The summary reported by the plugin"
          },
          "text": {
            "type": "string",
            "description": "The full text result reported by the plugin"
          },
          "deploy_id": {
            "type": "string",
            "description": "The ID of the deploy during which the plugin ran"
          },
          "site_id": {
            "type": "string",
            "description": "The ID of the site for which the plugin ran"
          }
        }
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "package": {
            "type": "string",
            "description": "The name of the plugin package"
          },
          "pinned_version": {
            "type": "string",
            "description": "The pinned major version for the plugin"
          }
        },
        "required": [
          "package",
          "pinned_version"
        ],
        "description": "Plugin model definition"
      },
      "PluginParams": {
        "type": "object",
        "properties": {
          "pinned_version": {
            "type": "string",
            "description": "The pinned major version for the plugin"
          }
        }
      },
      "PluginCreateParams": {
        "type": "object",
        "properties": {
          "package": {
            "type": "string",
            "description": "The name of the plugin package"
          },
          "pinned_version": {
            "type": "string",
            "description": "The pinned major version for the plugin"
          }
        }
      },
      "PublicDeploy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The deploy ID"
          },
          "site_id": {
            "type": "string",
            "description": "The site ID"
          },
          "build_id": {
            "type": "string",
            "description": "The build ID"
          },
          "state": {
            "type": "string",
            "enum": [
              "new",
              "pending_review",
              "accepted",
              "rejected",
              "enqueued",
              "building",
              "uploading",
              "uploaded",
              "preparing",
              "prepared",
              "processing",
              "ready",
              "error",
              "retrying"
            ],
            "description": "The state of the deploy"
          },
          "name": {
            "type": "string",
            "description": "The site name"
          },
          "url": {
            "type": "string",
            "description": "The HTTP URL of the production deploy"
          },
          "ssl_url": {
            "type": "string",
            "description": "The HTTPS URL of the production deploy"
          },
          "admin_url": {
            "type": "string",
            "description": "The URL of the deploy in the Netlify UI"
          },
          "deploy_url": {
            "type": "string",
            "description": "The HTTP URL of the Deploy Preview"
          },
          "deploy_ssl_url": {
            "type": "string",
            "description": "The HTTPS URL of the Deploy Preview"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deploy was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deploy was updated"
          },
          "commit_ref": {
            "type": "string",
            "description": "The git commit SHA"
          },
          "review_id": {
            "type": "integer",
            "description": "The pull request or merge request number"
          },
          "skipped": {
            "type": "boolean",
            "description": "Whether the deploy has been skipped"
          },
          "locked": {
            "type": "boolean",
            "description": "Whether the deploy has been locked"
          },
          "branch": {
            "type": "string",
            "description": "The git branch name of the deploy"
          },
          "commit_url": {
            "type": "string",
            "description": "The URL for the commit of the deploy"
          },
          "title": {
            "type": "string",
            "description": "The title of the pull request or merge request"
          },
          "review_url": {
            "type": "string",
            "description": "The URL of the pull request or merge request"
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the deploy was published to production"
          },
          "context": {
            "type": "string",
            "enum": [
              "production",
              "branch-deploy",
              "deploy-preview"
            ],
            "description": "The deploy context"
          },
          "deploy_time": {
            "type": "integer",
            "description": "The total time, in seconds, it took to deploy"
          },
          "summary": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "messages": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Information about the summary of the deploy"
          },
          "plugin_state": {
            "type": "string",
            "enum": [
              "success",
              "canceled_build",
              "failed_plugin",
              "failed_build",
              "skipped",
              "none"
            ],
            "description": "The state of the deploy's plugins"
          },
          "public": {
            "type": "boolean",
            "description": "Whether the deploy is public"
          }
        },
        "required": [
          "id",
          "site_id",
          "build_id",
          "state",
          "name",
          "url",
          "ssl_url",
          "admin_url",
          "deploy_url",
          "deploy_ssl_url",
          "created_at",
          "updated_at",
          "commit_ref",
          "review_id",
          "skipped",
          "locked",
          "branch",
          "commit_url",
          "title",
          "review_url",
          "published_at",
          "context",
          "deploy_time",
          "summary",
          "plugin_state",
          "public"
        ],
        "description": "PublicDeploy model definition"
      },
      "Receipt": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "transaction_id": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "print_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "usage": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "display_amount": {
            "type": "string"
          },
          "tax_amount": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "payment_method_id": {
            "type": "string"
          },
          "payment_method_last_four": {
            "type": "string"
          },
          "payment_method_card_type": {
            "type": "string"
          },
          "html_stored": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "transaction_created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "transaction_id",
          "amount",
          "print_fields",
          "items",
          "usage",
          "display_amount",
          "tax_amount",
          "user_id",
          "site_id",
          "payment_method_id",
          "payment_method_last_four",
          "payment_method_card_type",
          "html_stored",
          "created_at",
          "updated_at",
          "transaction_created_at"
        ]
      },
      "Repo": {
        "type": "object",
        "properties": {
          "allowed_branches": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "base": {
            "type": "string"
          },
          "base_rel_dir": {
            "type": "boolean"
          },
          "configuration_file_path": {
            "type": "string"
          },
          "cmd": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deploy_key_id": {
            "type": "string"
          },
          "dir": {
            "type": "string"
          },
          "env": {
            "type": "object"
          },
          "functions_dir": {
            "type": "string"
          },
          "installation_id": {
            "type": "integer"
          },
          "private_logs": {
            "type": "boolean"
          },
          "provider": {
            "type": "string"
          },
          "public_repo": {
            "type": "boolean"
          },
          "repo_branch": {
            "type": "string"
          },
          "repo_owner_type": {
            "type": "string"
          },
          "repo_path": {
            "type": "string"
          },
          "repo_type": {
            "type": "string",
            "description": "Always \"git\""
          },
          "repo_url": {
            "type": "string"
          },
          "skip_automatic_builds": {
            "type": "boolean"
          },
          "skip_prs": {
            "type": "boolean"
          },
          "stop_builds": {
            "type": "boolean"
          },
          "untrusted_flow": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Repo model definition"
      },
      "Reviewer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the reviewer"
          },
          "account_id": {
            "type": "string",
            "description": "The ID of the account the reviewer is associated with"
          },
          "user_id": {
            "type": "string",
            "description": "The ID of the user associated with the reviewer"
          },
          "state": {
            "type": "string",
            "enum": [
              "pending",
              "approved",
              "blocked"
            ],
            "description": "The state of the reviewer"
          },
          "site_access": {
            "type": "string",
            "enum": [
              "all",
              "selected",
              "none"
            ],
            "description": "The site access type of the reviewer"
          },
          "email": {
            "type": "string",
            "description": "The email address of the reviewer"
          },
          "full_name": {
            "type": "string",
            "description": "The full name of the reviewer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the reviewer was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the reviewer was updated"
          }
        },
        "required": [
          "id",
          "account_id",
          "user_id",
          "state",
          "site_access",
          "email",
          "full_name",
          "created_at",
          "updated_at"
        ],
        "description": "Reviewer model definition"
      },
      "ReviewerSetup": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "pending",
              "approved",
              "blocked"
            ],
            "description": "The state of the reviewer"
          },
          "site_access": {
            "type": "string",
            "enum": [
              "all",
              "selected",
              "none"
            ],
            "description": "The site access type of the reviewer. Currently, only **all** is supported"
          },
          "site_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of site IDs the reviewer has access to. Only required when site_access is selected"
          }
        }
      },
      "ReviewerInvite": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address to send a reviewer invitation"
          },
          "deploy_id": {
            "type": "string",
            "description": "The deploy ID of the deploy preview which will be used to create a deploy preview link as an invitation link"
          }
        }
      },
      "SecurityContact": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the security contact"
          },
          "role": {
            "type": "string",
            "description": "Role of the security contact"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the security contact was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the security contact was updated"
          }
        },
        "required": [
          "email",
          "role",
          "created_at",
          "updated_at"
        ],
        "description": "SecurityContact model definition"
      },
      "ServiceInstance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the identifier for the service instance"
          },
          "url": {
            "type": "string"
          },
          "config": {
            "type": "object"
          },
          "service_slug": {
            "type": "string",
            "description": "the service slug of the instance"
          },
          "service_path": {
            "type": "string",
            "description": "the service path of the instance"
          },
          "service_name": {
            "type": "string",
            "description": "the service name of the instance"
          },
          "env": {
            "type": "object"
          },
          "snippets": {
            "type": "object"
          },
          "auth_url": {
            "type": "string"
          },
          "external_attributes": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "url",
          "config",
          "service_slug",
          "service_path",
          "service_name",
          "env",
          "snippets",
          "auth_url",
          "external_attributes",
          "created_at",
          "updated_at"
        ]
      },
      "Service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "service_path": {
            "type": "string"
          },
          "long_description": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "icon": {
            "type": "string"
          },
          "manifest_url": {
            "type": "string"
          },
          "environments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "service_path",
          "long_description",
          "description",
          "events",
          "tags",
          "icon",
          "manifest_url",
          "environments",
          "created_at",
          "updated_at"
        ]
      },
      "SimpleAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the account"
          },
          "name": {
            "type": "string",
            "description": "The name of the account"
          },
          "team_logo_url": {
            "type": "string",
            "description": "The URL of the team logo"
          },
          "cdp_capabilities": {
            "type": "object",
            "description": "The hash list of capabilities related to CDP"
          }
        },
        "required": [
          "id",
          "name",
          "team_logo_url",
          "cdp_capabilities"
        ],
        "description": "SimpleAccount model definition"
      },
      "Site_Simple": {
        "type": "object",
        "properties": {
          "primary_create_project": {
            "type": "string"
          },
          "pending_create_changes": {
            "type": "number"
          }
        },
        "required": [
          "primary_create_project",
          "pending_create_changes"
        ]
      },
      "SiteLabel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the id of the label"
          },
          "name": {
            "type": "string",
            "description": "the name of the label"
          },
          "description": {
            "type": "string",
            "description": "the description of the label"
          },
          "color": {
            "type": "string",
            "description": "the color of the label"
          },
          "account_id": {
            "type": "string",
            "description": "the account_id of the label"
          }
        }
      },
      "Site": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "default_domain": {
            "type": "string"
          },
          "custom_domain": {
            "type": "string"
          },
          "branch_deploy_custom_domain": {
            "type": "string"
          },
          "deploy_preview_custom_domain": {
            "type": "string"
          },
          "domain_aliases": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "password": {
            "type": "string"
          },
          "password_context": {
            "type": "string"
          },
          "password_hash": {
            "type": "string"
          },
          "sso_login": {
            "type": "boolean"
          },
          "sso_login_context": {
            "type": "string"
          },
          "notification_email": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "admin_url": {
            "type": "string"
          },
          "deploy_url": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "screenshot_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "ssl_url": {
            "type": "string"
          },
          "force_ssl": {
            "type": "boolean"
          },
          "build_settings": {
            "$ref": "#/components/schemas/Repo"
          },
          "processing_settings": {
            "type": "object",
            "properties": {
              "html": {
                "type": "object",
                "properties": {
                  "pretty_urls": {
                    "type": "boolean"
                  }
                }
              },
              "ignore_html_forms": {
                "type": "boolean"
              }
            }
          },
          "deploy_hook": {
            "type": "string"
          },
          "managed_dns": {
            "type": "boolean"
          },
          "account_id": {
            "type": "string"
          },
          "account_slug": {
            "type": "string"
          },
          "account_name": {
            "type": "string"
          },
          "capabilities": {
            "type": "object"
          },
          "id_domain": {
            "type": "string"
          },
          "build_image": {
            "type": "string"
          },
          "build_timelimit": {
            "type": "number"
          },
          "deploy_retention_in_days": {
            "type": "number"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteLabel"
            }
          }
        },
        "required": [
          "id",
          "plan",
          "name",
          "default_domain",
          "custom_domain",
          "branch_deploy_custom_domain",
          "deploy_preview_custom_domain",
          "domain_aliases",
          "password",
          "password_context",
          "password_hash",
          "sso_login",
          "sso_login_context",
          "notification_email",
          "url",
          "admin_url",
          "deploy_url",
          "state",
          "screenshot_url",
          "created_at",
          "updated_at",
          "ssl_url",
          "force_ssl",
          "build_settings",
          "processing_settings",
          "deploy_hook",
          "managed_dns",
          "account_id",
          "account_slug",
          "account_name",
          "capabilities",
          "id_domain",
          "build_image",
          "build_timelimit",
          "deploy_retention_in_days",
          "labels"
        ],
        "description": "Site model definition"
      },
      "SitesSummary": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "total_sites": {
            "type": "integer"
          },
          "included_sites": {
            "type": "integer"
          },
          "sites_with_custom_domains_count": {
            "type": "integer"
          },
          "concurrent_builds_count": {
            "type": "integer"
          },
          "extra_concurrent_builds": {
            "type": "integer"
          }
        },
        "required": [
          "account_id",
          "total_sites",
          "included_sites",
          "sites_with_custom_domains_count",
          "concurrent_builds_count",
          "extra_concurrent_builds"
        ],
        "description": "SitesSummary model definition"
      },
      "Slack_Generic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the TeamWorkspace"
          },
          "account_id": {
            "type": "string",
            "description": "The ID of the TeamWorkspace's Account"
          },
          "data": {
            "type": "hash",
            "description": "The data for the Notification"
          }
        }
      },
      "Slack_SniCertificate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "custom": {
            "type": "boolean"
          },
          "migrate_to_le_running": {
            "type": "boolean"
          },
          "renewal_error_message": {
            "type": "string"
          },
          "renewable": {
            "type": "boolean"
          },
          "renew_running": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "state",
          "domains",
          "expires_at",
          "custom",
          "migrate_to_le_running",
          "renewal_error_message",
          "renewable",
          "renew_running",
          "created_at",
          "updated_at"
        ],
        "description": "@property(x-internal:true) other_sites [array<object>] A list of sites also using this certificate. Included only in `show` responses."
      },
      "CertificateInfo": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "ca_certificates": {
            "type": "string"
          }
        }
      },
      "Slack_TeamWorkspace": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the TeamWorkspace"
          },
          "account_id": {
            "type": "string",
            "description": "The ID of the TeamWorkspace's Account"
          },
          "created_at": {
            "type": "datetime",
            "description": "When the TeamWorkspace was created"
          },
          "updated_at": {
            "type": "datetime",
            "description": "When the TeamWorkspace was updated"
          },
          "workspace": {
            "$ref": "#/components/schemas/Slack_Workspace"
          }
        },
        "required": [
          "workspace"
        ]
      },
      "Slack_TeamWorkspaceSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the TeamWorkspaceSubscription"
          },
          "site_name": {
            "type": "string",
            "description": "The name of the Site the subscription is configured to"
          },
          "site_id": {
            "type": "string",
            "description": "The id of the Site the subscription is configured to"
          },
          "event_type": {
            "type": "string",
            "description": "The event_type for the subscription (deploy / site / membership / collaboration)"
          },
          "channel_id": {
            "type": "string",
            "description": "The slack channel ID for the subscription"
          },
          "deploy_contexts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The context for the subscription (only set for deploy events)"
          },
          "deploy_states": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The states for the subscription (only set for deploy events)"
          },
          "created_at": {
            "type": "datetime",
            "description": "When the subscription was created"
          },
          "updated_at": {
            "type": "datetime",
            "description": "When the subscription was updated"
          },
          "account_id": {
            "type": "string",
            "description": "The account ID for the subscription"
          },
          "paused": {
            "type": "boolean",
            "description": "If the channel is paused"
          }
        },
        "required": [
          "id",
          "site_name",
          "site_id",
          "event_type",
          "channel_id"
        ]
      },
      "Slack_UserWorkspace": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the UserWorkspace"
          },
          "slack_user_id": {
            "type": "string",
            "description": "The Slack User ID for user in the Workspace"
          },
          "workspace": {
            "$ref": "#/components/schemas/Slack_Workspace"
          },
          "configuration": {
            "type": "object",
            "description": "The settings for the Workspace"
          }
        },
        "required": [
          "id",
          "slack_user_id",
          "workspace",
          "configuration"
        ]
      },
      "Slack_Workspace": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Workspace"
          },
          "name": {
            "type": "string",
            "description": "The name of the Workspace"
          },
          "slack_team_id": {
            "type": "string",
            "description": "The Slack ID of the Workspace"
          },
          "cooldown_until": {
            "type": "datetime",
            "description": "The cooldown datetime for the Workspace"
          },
          "plan": {
            "type": "string",
            "description": "The billing tier of the Workspace"
          }
        },
        "required": [
          "id",
          "name",
          "slack_team_id"
        ]
      },
      "SniCertificate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "custom": {
            "type": "boolean"
          },
          "migrate_to_le_running": {
            "type": "boolean"
          },
          "renewal_error_message": {
            "type": "string"
          },
          "renewable": {
            "type": "boolean"
          },
          "renew_running": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "state",
          "domains",
          "expires_at",
          "custom",
          "migrate_to_le_running",
          "renewal_error_message",
          "renewable",
          "renew_running",
          "created_at",
          "updated_at"
        ],
        "description": "@property(x-internal:true) other_sites [array<object>] A list of sites also using this certificate. Included only in `show` responses."
      },
      "Snippet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the snippet"
          },
          "title": {
            "type": "string",
            "description": "The title of the snippet"
          },
          "general": {
            "type": "string",
            "description": "The general snippet content"
          },
          "general_position": {
            "type": "string",
            "enum": [
              "head",
              "footer"
            ],
            "description": "The position to inject the snippet. Uses footer if not specified"
          },
          "goal": {
            "type": "string",
            "description": "The goal snippet content"
          },
          "goal_position": {
            "type": "string",
            "enum": [
              "head",
              "footer"
            ],
            "description": "The position to inject the snippet. Uses footer if not specified"
          }
        },
        "required": [
          "id",
          "title",
          "general",
          "general_position",
          "goal",
          "goal_position"
        ]
      },
      "SnippetParams": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the snippet"
          },
          "title": {
            "type": "string",
            "description": "The title of the snippet"
          },
          "general": {
            "type": "string",
            "description": "The general snippet content"
          },
          "general_position": {
            "type": "string",
            "enum": [
              "head",
              "footer"
            ],
            "description": "The position to inject the snippet. Uses footer if not specified"
          },
          "goal": {
            "type": "string",
            "description": "The goal snippet content"
          },
          "goal_position": {
            "type": "string",
            "enum": [
              "head",
              "footer"
            ],
            "description": "The position to inject the snippet. Uses footer if not specified"
          }
        }
      },
      "TrafficRule": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/TrafficRule_Action"
          },
          "target": {
            "$ref": "#/components/schemas/TrafficRule_Target"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "target",
          "id"
        ]
      },
      "TrafficRule_Action": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rate_limit",
              "rewrite"
            ]
          },
          "config": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ResponseConfig"
              },
              {
                "$ref": "#/components/schemas/RewriteConfig"
              }
            ]
          }
        },
        "required": [
          "type",
          "config"
        ]
      },
      "TrafficRule_Target": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "or",
              "and",
              "geo",
              "header",
              "cookie",
              "path",
              "connection_ip",
              "query",
              "domain",
              "method",
              "client_ip"
            ]
          },
          "config": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompositeTargetConfig"
              },
              {
                "$ref": "#/components/schemas/GeoTargetConfig"
              },
              {
                "$ref": "#/components/schemas/KeyValueTargetConfig"
              },
              {
                "$ref": "#/components/schemas/ValueTargetConfig"
              },
              {
                "$ref": "#/components/schemas/IPTargetConfig"
              }
            ]
          }
        },
        "required": [
          "type",
          "config"
        ]
      },
      "ResponseConfig": {
        "type": "object",
        "properties": {
          "aggregate": {
            "$ref": "#/components/schemas/RateLimitConfig_AggregateConfig"
          },
          "rate_limit_config": {
            "$ref": "#/components/schemas/RateLimitConfig"
          },
          "status_code": {
            "type": "integer",
            "description": "Response status code. Default: 429"
          }
        },
        "required": [
          "aggregate",
          "rate_limit_config"
        ]
      },
      "RateLimitConfig_AggregateConfig": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateLimitConfig_AggregateConfig_AggregateKey"
            }
          }
        },
        "required": [
          "keys"
        ]
      },
      "RateLimitConfig": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "enum": [
              "sliding_window"
            ],
            "description": "]"
          },
          "window_size": {
            "type": "integer",
            "description": "In seconds"
          },
          "window_limit": {
            "type": "integer"
          }
        },
        "required": [
          "algorithm",
          "window_limit"
        ]
      },
      "RateLimitConfig_RateLimits": {
        "type": "object",
        "properties": {
          "window": {
            "type": "integer"
          }
        },
        "required": [
          "window"
        ]
      },
      "RateLimitConfig_AggregateConfig_AggregateKey": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ip",
              "domain"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "RewriteConfig": {
        "type": "object",
        "properties": {
          "aggregate": {
            "$ref": "#/components/schemas/RateLimitConfig_AggregateConfig"
          },
          "limits": {
            "$ref": "#/components/schemas/RateLimitConfig_RateLimits"
          },
          "rate_limit_config": {
            "$ref": "#/components/schemas/RateLimitConfig"
          },
          "to": {
            "type": "string",
            "description": "The path and query to rewrite the request to"
          }
        },
        "required": [
          "aggregate",
          "limits",
          "rate_limit_config",
          "to"
        ]
      },
      "CompositeTargetConfig": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrafficRule_Target"
            }
          }
        },
        "required": [
          "conditions"
        ]
      },
      "GeoTargetConfig": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "sub_region": {
            "type": "string"
          },
          "exclude": {
            "type": "boolean"
          }
        },
        "required": [
          "country"
        ]
      },
      "KeyValueTargetConfig": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "regex": {
            "type": "boolean"
          },
          "exclude": {
            "type": "boolean"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "ValueTargetConfig": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "regex": {
            "type": "boolean"
          },
          "exclude": {
            "type": "boolean"
          }
        },
        "required": [
          "value"
        ]
      },
      "IPTargetConfig": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "exclude": {
            "type": "boolean"
          }
        },
        "required": [
          "address"
        ]
      },
      "TrafficRulesConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrafficRule"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the traffic rule config was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the traffic rule config was updated"
          }
        },
        "required": [
          "id",
          "rules",
          "created_at",
          "updated_at"
        ],
        "description": "TrafficRulesConfig model definition"
      },
      "SetTrafficRulesConfig": {
        "type": "object",
        "properties": {
          "config_id": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        }
      },
      "SplitTest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "site_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "branches": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "unpublished_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "site_id",
          "name",
          "path",
          "branches",
          "active",
          "created_at",
          "updated_at",
          "unpublished_at"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the user"
          },
          "uid": {
            "type": "string",
            "description": "The uid for multipass"
          },
          "full_name": {
            "type": "string",
            "description": "The full name of the user"
          },
          "avatar_url": {
            "type": "string",
            "description": "The URL for the avatar"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "site_count": {
            "type": "integer",
            "description": "The number of sites the user has"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the user was created"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "description": "Last time this user logged in"
          },
          "login_providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of login providers the user has"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the user"
          },
          "connected_accounts": {
            "type": "object",
            "properties": {
              "github": {
                "type": "string"
              },
              "gitlab": {
                "type": "string"
              },
              "bitbucket": {
                "type": "string"
              }
            },
            "description": "Information of the connected providers' slug if any"
          },
          "tracking_id": {
            "type": "string",
            "description": "The tracking ID of the user"
          },
          "mfa_enabled": {
            "type": "boolean",
            "description": "Whether the user has 2 Factor Auth enabled"
          },
          "saml_account_id": {
            "type": "string",
            "description": "The account_id that is used for SSO"
          },
          "saml_slug": {
            "type": "string",
            "description": "The account slug that is used for SSO"
          },
          "access_token": {
            "type": "string",
            "description": "Only provided in `/auth/login` response"
          },
          "refresh_token": {
            "type": "string",
            "description": "Issued during OAuth flows"
          },
          "preferred_account_id": {
            "type": "string",
            "description": "Id of account user wants UI to start on"
          },
          "command_bar_user_id": {
            "type": "string",
            "description": "HMAC-signed user ID to be shared with CommandBar for storing user preferences"
          },
          "favorite_sites": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Favorited sites UUIDs"
          }
        },
        "required": [
          "id",
          "uid",
          "full_name",
          "avatar_url",
          "email",
          "site_count",
          "created_at",
          "last_login",
          "login_providers",
          "slug",
          "connected_accounts",
          "tracking_id",
          "mfa_enabled",
          "saml_account_id",
          "saml_slug",
          "access_token",
          "refresh_token",
          "preferred_account_id",
          "command_bar_user_id",
          "favorite_sites"
        ],
        "description": "User model definition"
      },
      "MfaSetup": {
        "type": "object",
        "properties": {
          "seed": {
            "type": "string",
            "description": "OTP seed"
          },
          "qrcode": {
            "type": "string",
            "description": "Base-64 encoded QR Code png to setup 2FA"
          },
          "token": {
            "type": "string",
            "description": "To be returned on 2FA code confirmation"
          }
        }
      },
      "MfaConfirmation": {
        "type": "object",
        "properties": {
          "backup_codes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "MFA Backup codes"
          }
        }
      },
      "UserSignup": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address"
          },
          "password": {
            "type": "string",
            "description": "The password"
          },
          "full_name": {
            "type": "string",
            "description": "The full name"
          },
          "jobrole": {
            "type": "string",
            "description": "The job role (used for the user identify)"
          },
          "reviewer_signup": {
            "$ref": "#/components/schemas/ReviewerSignupInfo"
          }
        }
      },
      "ReviewerSignupInfo": {
        "type": "object",
        "properties": {
          "deploy_id": {
            "type": "string",
            "description": "The deploy ID that the user wants to join as a reviewer"
          },
          "path": {
            "type": "string",
            "description": "The path of Deploy Previews page that the reviewer was on during the signup"
          }
        }
      },
      "UserQuestionnaireParams": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "use_case_context": {
            "type": "string"
          },
          "teamName": {
            "type": "string"
          },
          "jobrole": {
            "type": "string"
          },
          "job_leadership_title": {
            "type": "string"
          },
          "company_size__c": {
            "type": "string"
          },
          "useCase": {
            "type": "string"
          },
          "useCaseSomethingElse": {
            "type": "string"
          }
        }
      },
      "Questionnaire": {
        "type": "object",
        "properties": {
          "company_size_c": {
            "type": "string"
          },
          "job_leadership_title": {
            "type": "string"
          },
          "job_role": {
            "type": "string"
          },
          "use_case": {
            "type": "string"
          },
          "use_case_context": {
            "type": "string"
          },
          "use_case_something_else": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "netlifyAuth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://app.netlify.com/authorize",
            "scopes": {
              "public": "default scope"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://app.netlify.com/authorize",
            "tokenUrl": "https://api.netlify.com/oauth/token",
            "scopes": {
              "public": "default scope"
            }
          }
        }
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "OAuth",
      "tags": [
        "Access tokens",
        "OAuth tickets"
      ]
    },
    {
      "name": "Builds",
      "tags": [
        "Builds"
      ]
    },
    {
      "name": "User Accounts",
      "tags": [
        "Members",
        "Accounts",
        "Payment Methods",
        "Users"
      ]
    },
    {
      "name": "Sites",
      "tags": [
        "Sites",
        "Analytics",
        "Files",
        "Metadata",
        "Snippets"
      ]
    },
    {
      "name": "Site Assets",
      "tags": [
        "Site assets"
      ]
    },
    {
      "name": "Webhooks and Notifications",
      "tags": [
        "Build Hooks",
        "Dev Server Hooks",
        "Hooks"
      ]
    },
    {
      "name": "Deploys",
      "tags": [
        "Deploy keys",
        "Deploys"
      ]
    },
    {
      "name": "Domain Names",
      "tags": [
        "DNS zones",
        "SNI certificates"
      ]
    },
    {
      "name": "Environment Variables",
      "tags": [
        "Environment variables"
      ]
    },
    {
      "name": "Forms",
      "tags": [
        "Forms",
        "Form submissions"
      ]
    },
    {
      "name": "Functions",
      "tags": [
        "Functions"
      ]
    },
    {
      "name": "Organizations",
      "tags": [
        "Organization receipts",
        "Organizations"
      ]
    },
    {
      "name": "Services",
      "tags": [
        "Service instances",
        "Services"
      ]
    },
    {
      "name": "Split Tests",
      "tags": [
        "Split tests"
      ]
    },
    {
      "name": "SCIM",
      "tags": [
        "WorkOSScim"
      ]
    }
  ]
}
