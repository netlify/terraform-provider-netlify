/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CDPDataBranch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDPDataBranch{}

// CDPDataBranch CDP::Data::Branch model definition
type CDPDataBranch struct {
	// The number of git additions in the PullRequest
	Additions int64 `json:"additions"`
	Author CDPTicketDataMember `json:"author"`
	// The base ref of the branch
	Base map[string]interface{} `json:"base"`
	// The body text for the commit
	Body string `json:"body"`
	// When the commit was pushed
	CreatedAt time.Time `json:"created_at"`
	// The number of git deletions in the PullRequest
	Deletions int64 `json:"deletions"`
	// The number of git files changed in the commit
	Files int64 `json:"files"`
	// The sha of the commit
	Id string `json:"id"`
	// The id of the vcs repository for associated with the commit
	RepoId int64 `json:"repo_id"`
	// The commit message of the commit
	Title string `json:"title"`
	// The web url of the commit
	Url string `json:"url"`
	// The git host of the commit (github, gitlab, bitbucket)
	Vcs string `json:"vcs"`
	AdditionalProperties map[string]interface{}
}

type _CDPDataBranch CDPDataBranch

// NewCDPDataBranch instantiates a new CDPDataBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDPDataBranch(additions int64, author CDPTicketDataMember, base map[string]interface{}, body string, createdAt time.Time, deletions int64, files int64, id string, repoId int64, title string, url string, vcs string) *CDPDataBranch {
	this := CDPDataBranch{}
	this.Additions = additions
	this.Author = author
	this.Base = base
	this.Body = body
	this.CreatedAt = createdAt
	this.Deletions = deletions
	this.Files = files
	this.Id = id
	this.RepoId = repoId
	this.Title = title
	this.Url = url
	this.Vcs = vcs
	return &this
}

// NewCDPDataBranchWithDefaults instantiates a new CDPDataBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDPDataBranchWithDefaults() *CDPDataBranch {
	this := CDPDataBranch{}
	return &this
}

// GetAdditions returns the Additions field value
func (o *CDPDataBranch) GetAdditions() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Additions
}

// GetAdditionsOk returns a tuple with the Additions field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetAdditionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Additions, true
}

// SetAdditions sets field value
func (o *CDPDataBranch) SetAdditions(v int64) {
	o.Additions = v
}

// GetAuthor returns the Author field value
func (o *CDPDataBranch) GetAuthor() CDPTicketDataMember {
	if o == nil {
		var ret CDPTicketDataMember
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetAuthorOk() (*CDPTicketDataMember, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *CDPDataBranch) SetAuthor(v CDPTicketDataMember) {
	o.Author = v
}

// GetBase returns the Base field value
func (o *CDPDataBranch) GetBase() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Base
}

// GetBaseOk returns a tuple with the Base field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetBaseOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Base, true
}

// SetBase sets field value
func (o *CDPDataBranch) SetBase(v map[string]interface{}) {
	o.Base = v
}

// GetBody returns the Body field value
func (o *CDPDataBranch) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *CDPDataBranch) SetBody(v string) {
	o.Body = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CDPDataBranch) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CDPDataBranch) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDeletions returns the Deletions field value
func (o *CDPDataBranch) GetDeletions() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetDeletionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deletions, true
}

// SetDeletions sets field value
func (o *CDPDataBranch) SetDeletions(v int64) {
	o.Deletions = v
}

// GetFiles returns the Files field value
func (o *CDPDataBranch) GetFiles() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetFilesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Files, true
}

// SetFiles sets field value
func (o *CDPDataBranch) SetFiles(v int64) {
	o.Files = v
}

// GetId returns the Id field value
func (o *CDPDataBranch) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CDPDataBranch) SetId(v string) {
	o.Id = v
}

// GetRepoId returns the RepoId field value
func (o *CDPDataBranch) GetRepoId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RepoId
}

// GetRepoIdOk returns a tuple with the RepoId field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetRepoIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepoId, true
}

// SetRepoId sets field value
func (o *CDPDataBranch) SetRepoId(v int64) {
	o.RepoId = v
}

// GetTitle returns the Title field value
func (o *CDPDataBranch) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CDPDataBranch) SetTitle(v string) {
	o.Title = v
}

// GetUrl returns the Url field value
func (o *CDPDataBranch) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CDPDataBranch) SetUrl(v string) {
	o.Url = v
}

// GetVcs returns the Vcs field value
func (o *CDPDataBranch) GetVcs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vcs
}

// GetVcsOk returns a tuple with the Vcs field value
// and a boolean to check if the value has been set.
func (o *CDPDataBranch) GetVcsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vcs, true
}

// SetVcs sets field value
func (o *CDPDataBranch) SetVcs(v string) {
	o.Vcs = v
}

func (o CDPDataBranch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDPDataBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["additions"] = o.Additions
	toSerialize["author"] = o.Author
	toSerialize["base"] = o.Base
	toSerialize["body"] = o.Body
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["deletions"] = o.Deletions
	toSerialize["files"] = o.Files
	toSerialize["id"] = o.Id
	toSerialize["repo_id"] = o.RepoId
	toSerialize["title"] = o.Title
	toSerialize["url"] = o.Url
	toSerialize["vcs"] = o.Vcs

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CDPDataBranch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"additions",
		"author",
		"base",
		"body",
		"created_at",
		"deletions",
		"files",
		"id",
		"repo_id",
		"title",
		"url",
		"vcs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDPDataBranch := _CDPDataBranch{}

	err = json.Unmarshal(data, &varCDPDataBranch)

	if err != nil {
		return err
	}

	*o = CDPDataBranch(varCDPDataBranch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "additions")
		delete(additionalProperties, "author")
		delete(additionalProperties, "base")
		delete(additionalProperties, "body")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "deletions")
		delete(additionalProperties, "files")
		delete(additionalProperties, "id")
		delete(additionalProperties, "repo_id")
		delete(additionalProperties, "title")
		delete(additionalProperties, "url")
		delete(additionalProperties, "vcs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCDPDataBranch struct {
	value *CDPDataBranch
	isSet bool
}

func (v NullableCDPDataBranch) Get() *CDPDataBranch {
	return v.value
}

func (v *NullableCDPDataBranch) Set(val *CDPDataBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableCDPDataBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableCDPDataBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDPDataBranch(val *CDPDataBranch) *NullableCDPDataBranch {
	return &NullableCDPDataBranch{value: val, isSet: true}
}

func (v NullableCDPDataBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDPDataBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


