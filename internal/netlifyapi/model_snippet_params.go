/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the SnippetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnippetParams{}

// SnippetParams struct for SnippetParams
type SnippetParams struct {
	// The type of the snippet
	Type *string `json:"type,omitempty"`
	// The title of the snippet
	Title *string `json:"title,omitempty"`
	// The general snippet content
	General *string `json:"general,omitempty"`
	// The position to inject the snippet. Uses footer if not specified
	GeneralPosition *string `json:"general_position,omitempty"`
	// The goal snippet content
	Goal *string `json:"goal,omitempty"`
	// The position to inject the snippet. Uses footer if not specified
	GoalPosition *string `json:"goal_position,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnippetParams SnippetParams

// NewSnippetParams instantiates a new SnippetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnippetParams() *SnippetParams {
	this := SnippetParams{}
	return &this
}

// NewSnippetParamsWithDefaults instantiates a new SnippetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnippetParamsWithDefaults() *SnippetParams {
	this := SnippetParams{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SnippetParams) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetParams) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SnippetParams) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SnippetParams) SetType(v string) {
	o.Type = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SnippetParams) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetParams) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SnippetParams) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SnippetParams) SetTitle(v string) {
	o.Title = &v
}

// GetGeneral returns the General field value if set, zero value otherwise.
func (o *SnippetParams) GetGeneral() string {
	if o == nil || IsNil(o.General) {
		var ret string
		return ret
	}
	return *o.General
}

// GetGeneralOk returns a tuple with the General field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetParams) GetGeneralOk() (*string, bool) {
	if o == nil || IsNil(o.General) {
		return nil, false
	}
	return o.General, true
}

// HasGeneral returns a boolean if a field has been set.
func (o *SnippetParams) HasGeneral() bool {
	if o != nil && !IsNil(o.General) {
		return true
	}

	return false
}

// SetGeneral gets a reference to the given string and assigns it to the General field.
func (o *SnippetParams) SetGeneral(v string) {
	o.General = &v
}

// GetGeneralPosition returns the GeneralPosition field value if set, zero value otherwise.
func (o *SnippetParams) GetGeneralPosition() string {
	if o == nil || IsNil(o.GeneralPosition) {
		var ret string
		return ret
	}
	return *o.GeneralPosition
}

// GetGeneralPositionOk returns a tuple with the GeneralPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetParams) GetGeneralPositionOk() (*string, bool) {
	if o == nil || IsNil(o.GeneralPosition) {
		return nil, false
	}
	return o.GeneralPosition, true
}

// HasGeneralPosition returns a boolean if a field has been set.
func (o *SnippetParams) HasGeneralPosition() bool {
	if o != nil && !IsNil(o.GeneralPosition) {
		return true
	}

	return false
}

// SetGeneralPosition gets a reference to the given string and assigns it to the GeneralPosition field.
func (o *SnippetParams) SetGeneralPosition(v string) {
	o.GeneralPosition = &v
}

// GetGoal returns the Goal field value if set, zero value otherwise.
func (o *SnippetParams) GetGoal() string {
	if o == nil || IsNil(o.Goal) {
		var ret string
		return ret
	}
	return *o.Goal
}

// GetGoalOk returns a tuple with the Goal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetParams) GetGoalOk() (*string, bool) {
	if o == nil || IsNil(o.Goal) {
		return nil, false
	}
	return o.Goal, true
}

// HasGoal returns a boolean if a field has been set.
func (o *SnippetParams) HasGoal() bool {
	if o != nil && !IsNil(o.Goal) {
		return true
	}

	return false
}

// SetGoal gets a reference to the given string and assigns it to the Goal field.
func (o *SnippetParams) SetGoal(v string) {
	o.Goal = &v
}

// GetGoalPosition returns the GoalPosition field value if set, zero value otherwise.
func (o *SnippetParams) GetGoalPosition() string {
	if o == nil || IsNil(o.GoalPosition) {
		var ret string
		return ret
	}
	return *o.GoalPosition
}

// GetGoalPositionOk returns a tuple with the GoalPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetParams) GetGoalPositionOk() (*string, bool) {
	if o == nil || IsNil(o.GoalPosition) {
		return nil, false
	}
	return o.GoalPosition, true
}

// HasGoalPosition returns a boolean if a field has been set.
func (o *SnippetParams) HasGoalPosition() bool {
	if o != nil && !IsNil(o.GoalPosition) {
		return true
	}

	return false
}

// SetGoalPosition gets a reference to the given string and assigns it to the GoalPosition field.
func (o *SnippetParams) SetGoalPosition(v string) {
	o.GoalPosition = &v
}

func (o SnippetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnippetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.General) {
		toSerialize["general"] = o.General
	}
	if !IsNil(o.GeneralPosition) {
		toSerialize["general_position"] = o.GeneralPosition
	}
	if !IsNil(o.Goal) {
		toSerialize["goal"] = o.Goal
	}
	if !IsNil(o.GoalPosition) {
		toSerialize["goal_position"] = o.GoalPosition
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnippetParams) UnmarshalJSON(data []byte) (err error) {
	varSnippetParams := _SnippetParams{}

	err = json.Unmarshal(data, &varSnippetParams)

	if err != nil {
		return err
	}

	*o = SnippetParams(varSnippetParams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "title")
		delete(additionalProperties, "general")
		delete(additionalProperties, "general_position")
		delete(additionalProperties, "goal")
		delete(additionalProperties, "goal_position")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnippetParams struct {
	value *SnippetParams
	isSet bool
}

func (v NullableSnippetParams) Get() *SnippetParams {
	return v.value
}

func (v *NullableSnippetParams) Set(val *SnippetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSnippetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSnippetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnippetParams(val *SnippetParams) *NullableSnippetParams {
	return &NullableSnippetParams{value: val, isSet: true}
}

func (v NullableSnippetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnippetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


