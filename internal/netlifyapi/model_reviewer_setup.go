/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the ReviewerSetup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewerSetup{}

// ReviewerSetup struct for ReviewerSetup
type ReviewerSetup struct {
	// The state of the reviewer
	State *string `json:"state,omitempty"`
	// The site access type of the reviewer. Currently, only **all** is supported
	SiteAccess *string `json:"site_access,omitempty"`
	// An array of site IDs the reviewer has access to. Only required when site_access is selected
	SiteIds []string `json:"site_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReviewerSetup ReviewerSetup

// NewReviewerSetup instantiates a new ReviewerSetup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewerSetup() *ReviewerSetup {
	this := ReviewerSetup{}
	return &this
}

// NewReviewerSetupWithDefaults instantiates a new ReviewerSetup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewerSetupWithDefaults() *ReviewerSetup {
	this := ReviewerSetup{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ReviewerSetup) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewerSetup) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ReviewerSetup) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ReviewerSetup) SetState(v string) {
	o.State = &v
}

// GetSiteAccess returns the SiteAccess field value if set, zero value otherwise.
func (o *ReviewerSetup) GetSiteAccess() string {
	if o == nil || IsNil(o.SiteAccess) {
		var ret string
		return ret
	}
	return *o.SiteAccess
}

// GetSiteAccessOk returns a tuple with the SiteAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewerSetup) GetSiteAccessOk() (*string, bool) {
	if o == nil || IsNil(o.SiteAccess) {
		return nil, false
	}
	return o.SiteAccess, true
}

// HasSiteAccess returns a boolean if a field has been set.
func (o *ReviewerSetup) HasSiteAccess() bool {
	if o != nil && !IsNil(o.SiteAccess) {
		return true
	}

	return false
}

// SetSiteAccess gets a reference to the given string and assigns it to the SiteAccess field.
func (o *ReviewerSetup) SetSiteAccess(v string) {
	o.SiteAccess = &v
}

// GetSiteIds returns the SiteIds field value if set, zero value otherwise.
func (o *ReviewerSetup) GetSiteIds() []string {
	if o == nil || IsNil(o.SiteIds) {
		var ret []string
		return ret
	}
	return o.SiteIds
}

// GetSiteIdsOk returns a tuple with the SiteIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewerSetup) GetSiteIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SiteIds) {
		return nil, false
	}
	return o.SiteIds, true
}

// HasSiteIds returns a boolean if a field has been set.
func (o *ReviewerSetup) HasSiteIds() bool {
	if o != nil && !IsNil(o.SiteIds) {
		return true
	}

	return false
}

// SetSiteIds gets a reference to the given []string and assigns it to the SiteIds field.
func (o *ReviewerSetup) SetSiteIds(v []string) {
	o.SiteIds = v
}

func (o ReviewerSetup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewerSetup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.SiteAccess) {
		toSerialize["site_access"] = o.SiteAccess
	}
	if !IsNil(o.SiteIds) {
		toSerialize["site_ids"] = o.SiteIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReviewerSetup) UnmarshalJSON(data []byte) (err error) {
	varReviewerSetup := _ReviewerSetup{}

	err = json.Unmarshal(data, &varReviewerSetup)

	if err != nil {
		return err
	}

	*o = ReviewerSetup(varReviewerSetup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "state")
		delete(additionalProperties, "site_access")
		delete(additionalProperties, "site_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReviewerSetup struct {
	value *ReviewerSetup
	isSet bool
}

func (v NullableReviewerSetup) Get() *ReviewerSetup {
	return v.value
}

func (v *NullableReviewerSetup) Set(val *ReviewerSetup) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewerSetup) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewerSetup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewerSetup(val *ReviewerSetup) *NullableReviewerSetup {
	return &NullableReviewerSetup{value: val, isSet: true}
}

func (v NullableReviewerSetup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewerSetup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


