/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the WafPolicyRuleOverride type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WafPolicyRuleOverride{}

// WafPolicyRuleOverride struct for WafPolicyRuleOverride
type WafPolicyRuleOverride struct {
	Action string `json:"action"`
	AdditionalProperties map[string]interface{}
}

type _WafPolicyRuleOverride WafPolicyRuleOverride

// NewWafPolicyRuleOverride instantiates a new WafPolicyRuleOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWafPolicyRuleOverride(action string) *WafPolicyRuleOverride {
	this := WafPolicyRuleOverride{}
	this.Action = action
	return &this
}

// NewWafPolicyRuleOverrideWithDefaults instantiates a new WafPolicyRuleOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWafPolicyRuleOverrideWithDefaults() *WafPolicyRuleOverride {
	this := WafPolicyRuleOverride{}
	return &this
}

// GetAction returns the Action field value
func (o *WafPolicyRuleOverride) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *WafPolicyRuleOverride) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *WafPolicyRuleOverride) SetAction(v string) {
	o.Action = v
}

func (o WafPolicyRuleOverride) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WafPolicyRuleOverride) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WafPolicyRuleOverride) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWafPolicyRuleOverride := _WafPolicyRuleOverride{}

	err = json.Unmarshal(data, &varWafPolicyRuleOverride)

	if err != nil {
		return err
	}

	*o = WafPolicyRuleOverride(varWafPolicyRuleOverride)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWafPolicyRuleOverride struct {
	value *WafPolicyRuleOverride
	isSet bool
}

func (v NullableWafPolicyRuleOverride) Get() *WafPolicyRuleOverride {
	return v.value
}

func (v *NullableWafPolicyRuleOverride) Set(val *WafPolicyRuleOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableWafPolicyRuleOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableWafPolicyRuleOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWafPolicyRuleOverride(val *WafPolicyRuleOverride) *NullableWafPolicyRuleOverride {
	return &NullableWafPolicyRuleOverride{value: val, isSet: true}
}

func (v NullableWafPolicyRuleOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWafPolicyRuleOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


