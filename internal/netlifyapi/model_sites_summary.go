/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SitesSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SitesSummary{}

// SitesSummary SitesSummary model definition
type SitesSummary struct {
	AccountId string `json:"account_id"`
	TotalSites int64 `json:"total_sites"`
	IncludedSites int64 `json:"included_sites"`
	SitesWithCustomDomainsCount int64 `json:"sites_with_custom_domains_count"`
	ConcurrentBuildsCount int64 `json:"concurrent_builds_count"`
	ExtraConcurrentBuilds int64 `json:"extra_concurrent_builds"`
	AdditionalProperties map[string]interface{}
}

type _SitesSummary SitesSummary

// NewSitesSummary instantiates a new SitesSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSitesSummary(accountId string, totalSites int64, includedSites int64, sitesWithCustomDomainsCount int64, concurrentBuildsCount int64, extraConcurrentBuilds int64) *SitesSummary {
	this := SitesSummary{}
	this.AccountId = accountId
	this.TotalSites = totalSites
	this.IncludedSites = includedSites
	this.SitesWithCustomDomainsCount = sitesWithCustomDomainsCount
	this.ConcurrentBuildsCount = concurrentBuildsCount
	this.ExtraConcurrentBuilds = extraConcurrentBuilds
	return &this
}

// NewSitesSummaryWithDefaults instantiates a new SitesSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSitesSummaryWithDefaults() *SitesSummary {
	this := SitesSummary{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *SitesSummary) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *SitesSummary) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *SitesSummary) SetAccountId(v string) {
	o.AccountId = v
}

// GetTotalSites returns the TotalSites field value
func (o *SitesSummary) GetTotalSites() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalSites
}

// GetTotalSitesOk returns a tuple with the TotalSites field value
// and a boolean to check if the value has been set.
func (o *SitesSummary) GetTotalSitesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSites, true
}

// SetTotalSites sets field value
func (o *SitesSummary) SetTotalSites(v int64) {
	o.TotalSites = v
}

// GetIncludedSites returns the IncludedSites field value
func (o *SitesSummary) GetIncludedSites() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IncludedSites
}

// GetIncludedSitesOk returns a tuple with the IncludedSites field value
// and a boolean to check if the value has been set.
func (o *SitesSummary) GetIncludedSitesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludedSites, true
}

// SetIncludedSites sets field value
func (o *SitesSummary) SetIncludedSites(v int64) {
	o.IncludedSites = v
}

// GetSitesWithCustomDomainsCount returns the SitesWithCustomDomainsCount field value
func (o *SitesSummary) GetSitesWithCustomDomainsCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SitesWithCustomDomainsCount
}

// GetSitesWithCustomDomainsCountOk returns a tuple with the SitesWithCustomDomainsCount field value
// and a boolean to check if the value has been set.
func (o *SitesSummary) GetSitesWithCustomDomainsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SitesWithCustomDomainsCount, true
}

// SetSitesWithCustomDomainsCount sets field value
func (o *SitesSummary) SetSitesWithCustomDomainsCount(v int64) {
	o.SitesWithCustomDomainsCount = v
}

// GetConcurrentBuildsCount returns the ConcurrentBuildsCount field value
func (o *SitesSummary) GetConcurrentBuildsCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ConcurrentBuildsCount
}

// GetConcurrentBuildsCountOk returns a tuple with the ConcurrentBuildsCount field value
// and a boolean to check if the value has been set.
func (o *SitesSummary) GetConcurrentBuildsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConcurrentBuildsCount, true
}

// SetConcurrentBuildsCount sets field value
func (o *SitesSummary) SetConcurrentBuildsCount(v int64) {
	o.ConcurrentBuildsCount = v
}

// GetExtraConcurrentBuilds returns the ExtraConcurrentBuilds field value
func (o *SitesSummary) GetExtraConcurrentBuilds() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ExtraConcurrentBuilds
}

// GetExtraConcurrentBuildsOk returns a tuple with the ExtraConcurrentBuilds field value
// and a boolean to check if the value has been set.
func (o *SitesSummary) GetExtraConcurrentBuildsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtraConcurrentBuilds, true
}

// SetExtraConcurrentBuilds sets field value
func (o *SitesSummary) SetExtraConcurrentBuilds(v int64) {
	o.ExtraConcurrentBuilds = v
}

func (o SitesSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SitesSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["total_sites"] = o.TotalSites
	toSerialize["included_sites"] = o.IncludedSites
	toSerialize["sites_with_custom_domains_count"] = o.SitesWithCustomDomainsCount
	toSerialize["concurrent_builds_count"] = o.ConcurrentBuildsCount
	toSerialize["extra_concurrent_builds"] = o.ExtraConcurrentBuilds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SitesSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"total_sites",
		"included_sites",
		"sites_with_custom_domains_count",
		"concurrent_builds_count",
		"extra_concurrent_builds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSitesSummary := _SitesSummary{}

	err = json.Unmarshal(data, &varSitesSummary)

	if err != nil {
		return err
	}

	*o = SitesSummary(varSitesSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "total_sites")
		delete(additionalProperties, "included_sites")
		delete(additionalProperties, "sites_with_custom_domains_count")
		delete(additionalProperties, "concurrent_builds_count")
		delete(additionalProperties, "extra_concurrent_builds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSitesSummary struct {
	value *SitesSummary
	isSet bool
}

func (v NullableSitesSummary) Get() *SitesSummary {
	return v.value
}

func (v *NullableSitesSummary) Set(val *SitesSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableSitesSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableSitesSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSitesSummary(val *SitesSummary) *NullableSitesSummary {
	return &NullableSitesSummary{value: val, isSet: true}
}

func (v NullableSitesSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSitesSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


