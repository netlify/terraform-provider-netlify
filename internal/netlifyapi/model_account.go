/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account Account model definition
type Account struct {
	BillingEmail string `json:"billing_email"`
	BillingName string `json:"billing_name"`
	BillingPeriod string `json:"billing_period"`
	Capabilities map[string]interface{} `json:"capabilities"`
	CreatedAt time.Time `json:"created_at"`
	Id string `json:"id"`
	MemberRoles []map[string]interface{} `json:"member_roles"`
	Name string `json:"name"`
	OwnerIds []string `json:"owner_ids"`
	PaymentMethodId string `json:"payment_method_id"`
	Role string `json:"role"`
	RolesAllowed []string `json:"roles_allowed"`
	Slug string `json:"slug"`
	TypeId string `json:"type_id"`
	TypeName string `json:"type_name"`
	TypeSlug string `json:"type_slug"`
	UpdatedAt time.Time `json:"updated_at"`
	Vat string `json:"vat"`
	SupportAdministrationEnabled bool `json:"support_administration_enabled"`
	DeployDiagnosticsSetting string `json:"deploy_diagnostics_setting"`
	AdditionalProperties map[string]interface{}
}

type _Account Account

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount(billingEmail string, billingName string, billingPeriod string, capabilities map[string]interface{}, createdAt time.Time, id string, memberRoles []map[string]interface{}, name string, ownerIds []string, paymentMethodId string, role string, rolesAllowed []string, slug string, typeId string, typeName string, typeSlug string, updatedAt time.Time, vat string, supportAdministrationEnabled bool, deployDiagnosticsSetting string) *Account {
	this := Account{}
	this.BillingEmail = billingEmail
	this.BillingName = billingName
	this.BillingPeriod = billingPeriod
	this.Capabilities = capabilities
	this.CreatedAt = createdAt
	this.Id = id
	this.MemberRoles = memberRoles
	this.Name = name
	this.OwnerIds = ownerIds
	this.PaymentMethodId = paymentMethodId
	this.Role = role
	this.RolesAllowed = rolesAllowed
	this.Slug = slug
	this.TypeId = typeId
	this.TypeName = typeName
	this.TypeSlug = typeSlug
	this.UpdatedAt = updatedAt
	this.Vat = vat
	this.SupportAdministrationEnabled = supportAdministrationEnabled
	this.DeployDiagnosticsSetting = deployDiagnosticsSetting
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetBillingEmail returns the BillingEmail field value
func (o *Account) GetBillingEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillingEmail
}

// GetBillingEmailOk returns a tuple with the BillingEmail field value
// and a boolean to check if the value has been set.
func (o *Account) GetBillingEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingEmail, true
}

// SetBillingEmail sets field value
func (o *Account) SetBillingEmail(v string) {
	o.BillingEmail = v
}

// GetBillingName returns the BillingName field value
func (o *Account) GetBillingName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillingName
}

// GetBillingNameOk returns a tuple with the BillingName field value
// and a boolean to check if the value has been set.
func (o *Account) GetBillingNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingName, true
}

// SetBillingName sets field value
func (o *Account) SetBillingName(v string) {
	o.BillingName = v
}

// GetBillingPeriod returns the BillingPeriod field value
func (o *Account) GetBillingPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillingPeriod
}

// GetBillingPeriodOk returns a tuple with the BillingPeriod field value
// and a boolean to check if the value has been set.
func (o *Account) GetBillingPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingPeriod, true
}

// SetBillingPeriod sets field value
func (o *Account) SetBillingPeriod(v string) {
	o.BillingPeriod = v
}

// GetCapabilities returns the Capabilities field value
func (o *Account) GetCapabilities() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value
// and a boolean to check if the value has been set.
func (o *Account) GetCapabilitiesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Capabilities, true
}

// SetCapabilities sets field value
func (o *Account) SetCapabilities(v map[string]interface{}) {
	o.Capabilities = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Account) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Account) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Account) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *Account) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Account) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Account) SetId(v string) {
	o.Id = v
}

// GetMemberRoles returns the MemberRoles field value
func (o *Account) GetMemberRoles() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.MemberRoles
}

// GetMemberRolesOk returns a tuple with the MemberRoles field value
// and a boolean to check if the value has been set.
func (o *Account) GetMemberRolesOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemberRoles, true
}

// SetMemberRoles sets field value
func (o *Account) SetMemberRoles(v []map[string]interface{}) {
	o.MemberRoles = v
}

// GetName returns the Name field value
func (o *Account) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Account) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Account) SetName(v string) {
	o.Name = v
}

// GetOwnerIds returns the OwnerIds field value
func (o *Account) GetOwnerIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OwnerIds
}

// GetOwnerIdsOk returns a tuple with the OwnerIds field value
// and a boolean to check if the value has been set.
func (o *Account) GetOwnerIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerIds, true
}

// SetOwnerIds sets field value
func (o *Account) SetOwnerIds(v []string) {
	o.OwnerIds = v
}

// GetPaymentMethodId returns the PaymentMethodId field value
func (o *Account) GetPaymentMethodId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentMethodId
}

// GetPaymentMethodIdOk returns a tuple with the PaymentMethodId field value
// and a boolean to check if the value has been set.
func (o *Account) GetPaymentMethodIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentMethodId, true
}

// SetPaymentMethodId sets field value
func (o *Account) SetPaymentMethodId(v string) {
	o.PaymentMethodId = v
}

// GetRole returns the Role field value
func (o *Account) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *Account) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *Account) SetRole(v string) {
	o.Role = v
}

// GetRolesAllowed returns the RolesAllowed field value
func (o *Account) GetRolesAllowed() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RolesAllowed
}

// GetRolesAllowedOk returns a tuple with the RolesAllowed field value
// and a boolean to check if the value has been set.
func (o *Account) GetRolesAllowedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RolesAllowed, true
}

// SetRolesAllowed sets field value
func (o *Account) SetRolesAllowed(v []string) {
	o.RolesAllowed = v
}

// GetSlug returns the Slug field value
func (o *Account) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *Account) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *Account) SetSlug(v string) {
	o.Slug = v
}

// GetTypeId returns the TypeId field value
func (o *Account) GetTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *Account) GetTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *Account) SetTypeId(v string) {
	o.TypeId = v
}

// GetTypeName returns the TypeName field value
func (o *Account) GetTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value
// and a boolean to check if the value has been set.
func (o *Account) GetTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeName, true
}

// SetTypeName sets field value
func (o *Account) SetTypeName(v string) {
	o.TypeName = v
}

// GetTypeSlug returns the TypeSlug field value
func (o *Account) GetTypeSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeSlug
}

// GetTypeSlugOk returns a tuple with the TypeSlug field value
// and a boolean to check if the value has been set.
func (o *Account) GetTypeSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeSlug, true
}

// SetTypeSlug sets field value
func (o *Account) SetTypeSlug(v string) {
	o.TypeSlug = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Account) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Account) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Account) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetVat returns the Vat field value
func (o *Account) GetVat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vat
}

// GetVatOk returns a tuple with the Vat field value
// and a boolean to check if the value has been set.
func (o *Account) GetVatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vat, true
}

// SetVat sets field value
func (o *Account) SetVat(v string) {
	o.Vat = v
}

// GetSupportAdministrationEnabled returns the SupportAdministrationEnabled field value
func (o *Account) GetSupportAdministrationEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportAdministrationEnabled
}

// GetSupportAdministrationEnabledOk returns a tuple with the SupportAdministrationEnabled field value
// and a boolean to check if the value has been set.
func (o *Account) GetSupportAdministrationEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportAdministrationEnabled, true
}

// SetSupportAdministrationEnabled sets field value
func (o *Account) SetSupportAdministrationEnabled(v bool) {
	o.SupportAdministrationEnabled = v
}

// GetDeployDiagnosticsSetting returns the DeployDiagnosticsSetting field value
func (o *Account) GetDeployDiagnosticsSetting() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployDiagnosticsSetting
}

// GetDeployDiagnosticsSettingOk returns a tuple with the DeployDiagnosticsSetting field value
// and a boolean to check if the value has been set.
func (o *Account) GetDeployDiagnosticsSettingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployDiagnosticsSetting, true
}

// SetDeployDiagnosticsSetting sets field value
func (o *Account) SetDeployDiagnosticsSetting(v string) {
	o.DeployDiagnosticsSetting = v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["billing_email"] = o.BillingEmail
	toSerialize["billing_name"] = o.BillingName
	toSerialize["billing_period"] = o.BillingPeriod
	toSerialize["capabilities"] = o.Capabilities
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["id"] = o.Id
	toSerialize["member_roles"] = o.MemberRoles
	toSerialize["name"] = o.Name
	toSerialize["owner_ids"] = o.OwnerIds
	toSerialize["payment_method_id"] = o.PaymentMethodId
	toSerialize["role"] = o.Role
	toSerialize["roles_allowed"] = o.RolesAllowed
	toSerialize["slug"] = o.Slug
	toSerialize["type_id"] = o.TypeId
	toSerialize["type_name"] = o.TypeName
	toSerialize["type_slug"] = o.TypeSlug
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["vat"] = o.Vat
	toSerialize["support_administration_enabled"] = o.SupportAdministrationEnabled
	toSerialize["deploy_diagnostics_setting"] = o.DeployDiagnosticsSetting

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Account) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"billing_email",
		"billing_name",
		"billing_period",
		"capabilities",
		"created_at",
		"id",
		"member_roles",
		"name",
		"owner_ids",
		"payment_method_id",
		"role",
		"roles_allowed",
		"slug",
		"type_id",
		"type_name",
		"type_slug",
		"updated_at",
		"vat",
		"support_administration_enabled",
		"deploy_diagnostics_setting",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccount := _Account{}

	err = json.Unmarshal(data, &varAccount)

	if err != nil {
		return err
	}

	*o = Account(varAccount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "billing_email")
		delete(additionalProperties, "billing_name")
		delete(additionalProperties, "billing_period")
		delete(additionalProperties, "capabilities")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "id")
		delete(additionalProperties, "member_roles")
		delete(additionalProperties, "name")
		delete(additionalProperties, "owner_ids")
		delete(additionalProperties, "payment_method_id")
		delete(additionalProperties, "role")
		delete(additionalProperties, "roles_allowed")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "type_id")
		delete(additionalProperties, "type_name")
		delete(additionalProperties, "type_slug")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "vat")
		delete(additionalProperties, "support_administration_enabled")
		delete(additionalProperties, "deploy_diagnostics_setting")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


