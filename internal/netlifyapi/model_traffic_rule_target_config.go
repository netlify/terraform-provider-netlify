/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// TrafficRuleTargetConfig - struct for TrafficRuleTargetConfig
type TrafficRuleTargetConfig struct {
	CompositeTargetConfig *CompositeTargetConfig
	GeoTargetConfig *GeoTargetConfig
	IPTargetConfig *IPTargetConfig
	KeyValueTargetConfig *KeyValueTargetConfig
	ValueTargetConfig *ValueTargetConfig
}

// CompositeTargetConfigAsTrafficRuleTargetConfig is a convenience function that returns CompositeTargetConfig wrapped in TrafficRuleTargetConfig
func CompositeTargetConfigAsTrafficRuleTargetConfig(v *CompositeTargetConfig) TrafficRuleTargetConfig {
	return TrafficRuleTargetConfig{
		CompositeTargetConfig: v,
	}
}

// GeoTargetConfigAsTrafficRuleTargetConfig is a convenience function that returns GeoTargetConfig wrapped in TrafficRuleTargetConfig
func GeoTargetConfigAsTrafficRuleTargetConfig(v *GeoTargetConfig) TrafficRuleTargetConfig {
	return TrafficRuleTargetConfig{
		GeoTargetConfig: v,
	}
}

// IPTargetConfigAsTrafficRuleTargetConfig is a convenience function that returns IPTargetConfig wrapped in TrafficRuleTargetConfig
func IPTargetConfigAsTrafficRuleTargetConfig(v *IPTargetConfig) TrafficRuleTargetConfig {
	return TrafficRuleTargetConfig{
		IPTargetConfig: v,
	}
}

// KeyValueTargetConfigAsTrafficRuleTargetConfig is a convenience function that returns KeyValueTargetConfig wrapped in TrafficRuleTargetConfig
func KeyValueTargetConfigAsTrafficRuleTargetConfig(v *KeyValueTargetConfig) TrafficRuleTargetConfig {
	return TrafficRuleTargetConfig{
		KeyValueTargetConfig: v,
	}
}

// ValueTargetConfigAsTrafficRuleTargetConfig is a convenience function that returns ValueTargetConfig wrapped in TrafficRuleTargetConfig
func ValueTargetConfigAsTrafficRuleTargetConfig(v *ValueTargetConfig) TrafficRuleTargetConfig {
	return TrafficRuleTargetConfig{
		ValueTargetConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TrafficRuleTargetConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CompositeTargetConfig
	err = newStrictDecoder(data).Decode(&dst.CompositeTargetConfig)
	if err == nil {
		jsonCompositeTargetConfig, _ := json.Marshal(dst.CompositeTargetConfig)
		if string(jsonCompositeTargetConfig) == "{}" { // empty struct
			dst.CompositeTargetConfig = nil
		} else {
			match++
		}
	} else {
		dst.CompositeTargetConfig = nil
	}

	// try to unmarshal data into GeoTargetConfig
	err = newStrictDecoder(data).Decode(&dst.GeoTargetConfig)
	if err == nil {
		jsonGeoTargetConfig, _ := json.Marshal(dst.GeoTargetConfig)
		if string(jsonGeoTargetConfig) == "{}" { // empty struct
			dst.GeoTargetConfig = nil
		} else {
			match++
		}
	} else {
		dst.GeoTargetConfig = nil
	}

	// try to unmarshal data into IPTargetConfig
	err = newStrictDecoder(data).Decode(&dst.IPTargetConfig)
	if err == nil {
		jsonIPTargetConfig, _ := json.Marshal(dst.IPTargetConfig)
		if string(jsonIPTargetConfig) == "{}" { // empty struct
			dst.IPTargetConfig = nil
		} else {
			match++
		}
	} else {
		dst.IPTargetConfig = nil
	}

	// try to unmarshal data into KeyValueTargetConfig
	err = newStrictDecoder(data).Decode(&dst.KeyValueTargetConfig)
	if err == nil {
		jsonKeyValueTargetConfig, _ := json.Marshal(dst.KeyValueTargetConfig)
		if string(jsonKeyValueTargetConfig) == "{}" { // empty struct
			dst.KeyValueTargetConfig = nil
		} else {
			match++
		}
	} else {
		dst.KeyValueTargetConfig = nil
	}

	// try to unmarshal data into ValueTargetConfig
	err = newStrictDecoder(data).Decode(&dst.ValueTargetConfig)
	if err == nil {
		jsonValueTargetConfig, _ := json.Marshal(dst.ValueTargetConfig)
		if string(jsonValueTargetConfig) == "{}" { // empty struct
			dst.ValueTargetConfig = nil
		} else {
			match++
		}
	} else {
		dst.ValueTargetConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CompositeTargetConfig = nil
		dst.GeoTargetConfig = nil
		dst.IPTargetConfig = nil
		dst.KeyValueTargetConfig = nil
		dst.ValueTargetConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TrafficRuleTargetConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TrafficRuleTargetConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TrafficRuleTargetConfig) MarshalJSON() ([]byte, error) {
	if src.CompositeTargetConfig != nil {
		return json.Marshal(&src.CompositeTargetConfig)
	}

	if src.GeoTargetConfig != nil {
		return json.Marshal(&src.GeoTargetConfig)
	}

	if src.IPTargetConfig != nil {
		return json.Marshal(&src.IPTargetConfig)
	}

	if src.KeyValueTargetConfig != nil {
		return json.Marshal(&src.KeyValueTargetConfig)
	}

	if src.ValueTargetConfig != nil {
		return json.Marshal(&src.ValueTargetConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TrafficRuleTargetConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CompositeTargetConfig != nil {
		return obj.CompositeTargetConfig
	}

	if obj.GeoTargetConfig != nil {
		return obj.GeoTargetConfig
	}

	if obj.IPTargetConfig != nil {
		return obj.IPTargetConfig
	}

	if obj.KeyValueTargetConfig != nil {
		return obj.KeyValueTargetConfig
	}

	if obj.ValueTargetConfig != nil {
		return obj.ValueTargetConfig
	}

	// all schemas are nil
	return nil
}

type NullableTrafficRuleTargetConfig struct {
	value *TrafficRuleTargetConfig
	isSet bool
}

func (v NullableTrafficRuleTargetConfig) Get() *TrafficRuleTargetConfig {
	return v.value
}

func (v *NullableTrafficRuleTargetConfig) Set(val *TrafficRuleTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTrafficRuleTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTrafficRuleTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrafficRuleTargetConfig(val *TrafficRuleTargetConfig) *NullableTrafficRuleTargetConfig {
	return &NullableTrafficRuleTargetConfig{value: val, isSet: true}
}

func (v NullableTrafficRuleTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrafficRuleTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


