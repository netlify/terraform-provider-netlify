/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CDPDataPullRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDPDataPullRequest{}

// CDPDataPullRequest CDP::Data::PullRequest model definition
type CDPDataPullRequest struct {
	// The number of git additions in the PullRequest
	Additions int64 `json:"additions"`
	// Information about the assignees for the PullRequest
	Assignees []CDPTicketDataMember `json:"assignees"`
	Author CDPTicketDataMember `json:"author"`
	// The base ref of the PullRequest
	Base map[string]interface{} `json:"base"`
	// The body text for the PullRequest
	Body string `json:"body"`
	// When the PullRequest was closed
	ClosedAt time.Time `json:"closed_at"`
	// Array of information about the comments for the PullRequest
	Comments []map[string]interface{} `json:"comments"`
	// Array of information about the commits for the PullRequest
	Commits []map[string]interface{} `json:"commits"`
	// The number of comments in the PullRequest
	CommentsCount int64 `json:"comments_count"`
	// The number of commits in the PullRequest
	CommitsCount int64 `json:"commits_count"`
	// Array of information about the contributors to the PullRequest
	Contributors []CDPTicketDataMember `json:"contributors"`
	// When the PullRequest was created
	CreatedAt time.Time `json:"created_at"`
	// The number of git deletions in the PullRequest
	Deletions int64 `json:"deletions"`
	// Whether the PullRequest is a draft
	Draft bool `json:"draft"`
	// The number of git files changed in the PullRequest
	Files int64 `json:"files"`
	// The head ref of the PullRequest
	Head map[string]interface{} `json:"head"`
	// The id of the PullRequest
	Id string `json:"id"`
	// Array of information about the labels for the PullRequest
	Labels []CDPTicketDataLabel `json:"labels"`
	// When the last commit was authored
	LastCommitAt time.Time `json:"last_commit_at"`
	// When the PullRequest was merged
	MergedAt time.Time `json:"merged_at"`
	Milestone CDPTicketDataEpic `json:"milestone"`
	// The review number of the PullRequest
	Number int64 `json:"number"`
	// Array of project_ids associated with the PullRequest
	Projects []string `json:"projects"`
	// The id of the vcs repository for associated with the PullRequest
	RepoId int64 `json:"repo_id"`
	// Array of information about the reviewers for the PullRequest
	Reviewers []CDPTicketDataMember `json:"reviewers"`
	// The state of the PullRequest (open, merged, closed)
	State string `json:"state"`
	// The title of the PullRequest
	Title string `json:"title"`
	// The web url of the PullRequest
	Url string `json:"url"`
	// The git host of the PullRequest (github, gitlab, bitbucket)
	Vcs string `json:"vcs"`
	AdditionalProperties map[string]interface{}
}

type _CDPDataPullRequest CDPDataPullRequest

// NewCDPDataPullRequest instantiates a new CDPDataPullRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDPDataPullRequest(additions int64, assignees []CDPTicketDataMember, author CDPTicketDataMember, base map[string]interface{}, body string, closedAt time.Time, comments []map[string]interface{}, commits []map[string]interface{}, commentsCount int64, commitsCount int64, contributors []CDPTicketDataMember, createdAt time.Time, deletions int64, draft bool, files int64, head map[string]interface{}, id string, labels []CDPTicketDataLabel, lastCommitAt time.Time, mergedAt time.Time, milestone CDPTicketDataEpic, number int64, projects []string, repoId int64, reviewers []CDPTicketDataMember, state string, title string, url string, vcs string) *CDPDataPullRequest {
	this := CDPDataPullRequest{}
	this.Additions = additions
	this.Assignees = assignees
	this.Author = author
	this.Base = base
	this.Body = body
	this.ClosedAt = closedAt
	this.Comments = comments
	this.Commits = commits
	this.CommentsCount = commentsCount
	this.CommitsCount = commitsCount
	this.Contributors = contributors
	this.CreatedAt = createdAt
	this.Deletions = deletions
	this.Draft = draft
	this.Files = files
	this.Head = head
	this.Id = id
	this.Labels = labels
	this.LastCommitAt = lastCommitAt
	this.MergedAt = mergedAt
	this.Milestone = milestone
	this.Number = number
	this.Projects = projects
	this.RepoId = repoId
	this.Reviewers = reviewers
	this.State = state
	this.Title = title
	this.Url = url
	this.Vcs = vcs
	return &this
}

// NewCDPDataPullRequestWithDefaults instantiates a new CDPDataPullRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDPDataPullRequestWithDefaults() *CDPDataPullRequest {
	this := CDPDataPullRequest{}
	return &this
}

// GetAdditions returns the Additions field value
func (o *CDPDataPullRequest) GetAdditions() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Additions
}

// GetAdditionsOk returns a tuple with the Additions field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetAdditionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Additions, true
}

// SetAdditions sets field value
func (o *CDPDataPullRequest) SetAdditions(v int64) {
	o.Additions = v
}

// GetAssignees returns the Assignees field value
func (o *CDPDataPullRequest) GetAssignees() []CDPTicketDataMember {
	if o == nil {
		var ret []CDPTicketDataMember
		return ret
	}

	return o.Assignees
}

// GetAssigneesOk returns a tuple with the Assignees field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetAssigneesOk() ([]CDPTicketDataMember, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assignees, true
}

// SetAssignees sets field value
func (o *CDPDataPullRequest) SetAssignees(v []CDPTicketDataMember) {
	o.Assignees = v
}

// GetAuthor returns the Author field value
func (o *CDPDataPullRequest) GetAuthor() CDPTicketDataMember {
	if o == nil {
		var ret CDPTicketDataMember
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetAuthorOk() (*CDPTicketDataMember, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *CDPDataPullRequest) SetAuthor(v CDPTicketDataMember) {
	o.Author = v
}

// GetBase returns the Base field value
func (o *CDPDataPullRequest) GetBase() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Base
}

// GetBaseOk returns a tuple with the Base field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetBaseOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Base, true
}

// SetBase sets field value
func (o *CDPDataPullRequest) SetBase(v map[string]interface{}) {
	o.Base = v
}

// GetBody returns the Body field value
func (o *CDPDataPullRequest) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *CDPDataPullRequest) SetBody(v string) {
	o.Body = v
}

// GetClosedAt returns the ClosedAt field value
func (o *CDPDataPullRequest) GetClosedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ClosedAt
}

// GetClosedAtOk returns a tuple with the ClosedAt field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetClosedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClosedAt, true
}

// SetClosedAt sets field value
func (o *CDPDataPullRequest) SetClosedAt(v time.Time) {
	o.ClosedAt = v
}

// GetComments returns the Comments field value
func (o *CDPDataPullRequest) GetComments() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetCommentsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comments, true
}

// SetComments sets field value
func (o *CDPDataPullRequest) SetComments(v []map[string]interface{}) {
	o.Comments = v
}

// GetCommits returns the Commits field value
func (o *CDPDataPullRequest) GetCommits() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Commits
}

// GetCommitsOk returns a tuple with the Commits field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetCommitsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Commits, true
}

// SetCommits sets field value
func (o *CDPDataPullRequest) SetCommits(v []map[string]interface{}) {
	o.Commits = v
}

// GetCommentsCount returns the CommentsCount field value
func (o *CDPDataPullRequest) GetCommentsCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CommentsCount
}

// GetCommentsCountOk returns a tuple with the CommentsCount field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetCommentsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentsCount, true
}

// SetCommentsCount sets field value
func (o *CDPDataPullRequest) SetCommentsCount(v int64) {
	o.CommentsCount = v
}

// GetCommitsCount returns the CommitsCount field value
func (o *CDPDataPullRequest) GetCommitsCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CommitsCount
}

// GetCommitsCountOk returns a tuple with the CommitsCount field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetCommitsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitsCount, true
}

// SetCommitsCount sets field value
func (o *CDPDataPullRequest) SetCommitsCount(v int64) {
	o.CommitsCount = v
}

// GetContributors returns the Contributors field value
func (o *CDPDataPullRequest) GetContributors() []CDPTicketDataMember {
	if o == nil {
		var ret []CDPTicketDataMember
		return ret
	}

	return o.Contributors
}

// GetContributorsOk returns a tuple with the Contributors field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetContributorsOk() ([]CDPTicketDataMember, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contributors, true
}

// SetContributors sets field value
func (o *CDPDataPullRequest) SetContributors(v []CDPTicketDataMember) {
	o.Contributors = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CDPDataPullRequest) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CDPDataPullRequest) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDeletions returns the Deletions field value
func (o *CDPDataPullRequest) GetDeletions() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetDeletionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deletions, true
}

// SetDeletions sets field value
func (o *CDPDataPullRequest) SetDeletions(v int64) {
	o.Deletions = v
}

// GetDraft returns the Draft field value
func (o *CDPDataPullRequest) GetDraft() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Draft
}

// GetDraftOk returns a tuple with the Draft field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetDraftOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Draft, true
}

// SetDraft sets field value
func (o *CDPDataPullRequest) SetDraft(v bool) {
	o.Draft = v
}

// GetFiles returns the Files field value
func (o *CDPDataPullRequest) GetFiles() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetFilesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Files, true
}

// SetFiles sets field value
func (o *CDPDataPullRequest) SetFiles(v int64) {
	o.Files = v
}

// GetHead returns the Head field value
func (o *CDPDataPullRequest) GetHead() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Head
}

// GetHeadOk returns a tuple with the Head field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetHeadOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Head, true
}

// SetHead sets field value
func (o *CDPDataPullRequest) SetHead(v map[string]interface{}) {
	o.Head = v
}

// GetId returns the Id field value
func (o *CDPDataPullRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CDPDataPullRequest) SetId(v string) {
	o.Id = v
}

// GetLabels returns the Labels field value
func (o *CDPDataPullRequest) GetLabels() []CDPTicketDataLabel {
	if o == nil {
		var ret []CDPTicketDataLabel
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetLabelsOk() ([]CDPTicketDataLabel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *CDPDataPullRequest) SetLabels(v []CDPTicketDataLabel) {
	o.Labels = v
}

// GetLastCommitAt returns the LastCommitAt field value
func (o *CDPDataPullRequest) GetLastCommitAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastCommitAt
}

// GetLastCommitAtOk returns a tuple with the LastCommitAt field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetLastCommitAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastCommitAt, true
}

// SetLastCommitAt sets field value
func (o *CDPDataPullRequest) SetLastCommitAt(v time.Time) {
	o.LastCommitAt = v
}

// GetMergedAt returns the MergedAt field value
func (o *CDPDataPullRequest) GetMergedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.MergedAt
}

// GetMergedAtOk returns a tuple with the MergedAt field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetMergedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MergedAt, true
}

// SetMergedAt sets field value
func (o *CDPDataPullRequest) SetMergedAt(v time.Time) {
	o.MergedAt = v
}

// GetMilestone returns the Milestone field value
func (o *CDPDataPullRequest) GetMilestone() CDPTicketDataEpic {
	if o == nil {
		var ret CDPTicketDataEpic
		return ret
	}

	return o.Milestone
}

// GetMilestoneOk returns a tuple with the Milestone field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetMilestoneOk() (*CDPTicketDataEpic, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Milestone, true
}

// SetMilestone sets field value
func (o *CDPDataPullRequest) SetMilestone(v CDPTicketDataEpic) {
	o.Milestone = v
}

// GetNumber returns the Number field value
func (o *CDPDataPullRequest) GetNumber() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *CDPDataPullRequest) SetNumber(v int64) {
	o.Number = v
}

// GetProjects returns the Projects field value
func (o *CDPDataPullRequest) GetProjects() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetProjectsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Projects, true
}

// SetProjects sets field value
func (o *CDPDataPullRequest) SetProjects(v []string) {
	o.Projects = v
}

// GetRepoId returns the RepoId field value
func (o *CDPDataPullRequest) GetRepoId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RepoId
}

// GetRepoIdOk returns a tuple with the RepoId field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetRepoIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepoId, true
}

// SetRepoId sets field value
func (o *CDPDataPullRequest) SetRepoId(v int64) {
	o.RepoId = v
}

// GetReviewers returns the Reviewers field value
func (o *CDPDataPullRequest) GetReviewers() []CDPTicketDataMember {
	if o == nil {
		var ret []CDPTicketDataMember
		return ret
	}

	return o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetReviewersOk() ([]CDPTicketDataMember, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reviewers, true
}

// SetReviewers sets field value
func (o *CDPDataPullRequest) SetReviewers(v []CDPTicketDataMember) {
	o.Reviewers = v
}

// GetState returns the State field value
func (o *CDPDataPullRequest) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CDPDataPullRequest) SetState(v string) {
	o.State = v
}

// GetTitle returns the Title field value
func (o *CDPDataPullRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CDPDataPullRequest) SetTitle(v string) {
	o.Title = v
}

// GetUrl returns the Url field value
func (o *CDPDataPullRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CDPDataPullRequest) SetUrl(v string) {
	o.Url = v
}

// GetVcs returns the Vcs field value
func (o *CDPDataPullRequest) GetVcs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vcs
}

// GetVcsOk returns a tuple with the Vcs field value
// and a boolean to check if the value has been set.
func (o *CDPDataPullRequest) GetVcsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vcs, true
}

// SetVcs sets field value
func (o *CDPDataPullRequest) SetVcs(v string) {
	o.Vcs = v
}

func (o CDPDataPullRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDPDataPullRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["additions"] = o.Additions
	toSerialize["assignees"] = o.Assignees
	toSerialize["author"] = o.Author
	toSerialize["base"] = o.Base
	toSerialize["body"] = o.Body
	toSerialize["closed_at"] = o.ClosedAt
	toSerialize["comments"] = o.Comments
	toSerialize["commits"] = o.Commits
	toSerialize["comments_count"] = o.CommentsCount
	toSerialize["commits_count"] = o.CommitsCount
	toSerialize["contributors"] = o.Contributors
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["deletions"] = o.Deletions
	toSerialize["draft"] = o.Draft
	toSerialize["files"] = o.Files
	toSerialize["head"] = o.Head
	toSerialize["id"] = o.Id
	toSerialize["labels"] = o.Labels
	toSerialize["last_commit_at"] = o.LastCommitAt
	toSerialize["merged_at"] = o.MergedAt
	toSerialize["milestone"] = o.Milestone
	toSerialize["number"] = o.Number
	toSerialize["projects"] = o.Projects
	toSerialize["repo_id"] = o.RepoId
	toSerialize["reviewers"] = o.Reviewers
	toSerialize["state"] = o.State
	toSerialize["title"] = o.Title
	toSerialize["url"] = o.Url
	toSerialize["vcs"] = o.Vcs

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CDPDataPullRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"additions",
		"assignees",
		"author",
		"base",
		"body",
		"closed_at",
		"comments",
		"commits",
		"comments_count",
		"commits_count",
		"contributors",
		"created_at",
		"deletions",
		"draft",
		"files",
		"head",
		"id",
		"labels",
		"last_commit_at",
		"merged_at",
		"milestone",
		"number",
		"projects",
		"repo_id",
		"reviewers",
		"state",
		"title",
		"url",
		"vcs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDPDataPullRequest := _CDPDataPullRequest{}

	err = json.Unmarshal(data, &varCDPDataPullRequest)

	if err != nil {
		return err
	}

	*o = CDPDataPullRequest(varCDPDataPullRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "additions")
		delete(additionalProperties, "assignees")
		delete(additionalProperties, "author")
		delete(additionalProperties, "base")
		delete(additionalProperties, "body")
		delete(additionalProperties, "closed_at")
		delete(additionalProperties, "comments")
		delete(additionalProperties, "commits")
		delete(additionalProperties, "comments_count")
		delete(additionalProperties, "commits_count")
		delete(additionalProperties, "contributors")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "deletions")
		delete(additionalProperties, "draft")
		delete(additionalProperties, "files")
		delete(additionalProperties, "head")
		delete(additionalProperties, "id")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "last_commit_at")
		delete(additionalProperties, "merged_at")
		delete(additionalProperties, "milestone")
		delete(additionalProperties, "number")
		delete(additionalProperties, "projects")
		delete(additionalProperties, "repo_id")
		delete(additionalProperties, "reviewers")
		delete(additionalProperties, "state")
		delete(additionalProperties, "title")
		delete(additionalProperties, "url")
		delete(additionalProperties, "vcs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCDPDataPullRequest struct {
	value *CDPDataPullRequest
	isSet bool
}

func (v NullableCDPDataPullRequest) Get() *CDPDataPullRequest {
	return v.value
}

func (v *NullableCDPDataPullRequest) Set(val *CDPDataPullRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCDPDataPullRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCDPDataPullRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDPDataPullRequest(val *CDPDataPullRequest) *NullableCDPDataPullRequest {
	return &NullableCDPDataPullRequest{value: val, isSet: true}
}

func (v NullableCDPDataPullRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDPDataPullRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


