/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the FunctionBundle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionBundle{}

// FunctionBundle FunctionBundle model definition
type FunctionBundle struct {
	// The function bundle ID
	Id string `json:"id"`
	// The provider of the function
	Provider string `json:"provider"`
	// When the function bundle was created
	CreatedAt time.Time `json:"created_at"`
	// An array of the functions of this function bundle
	Functions []Function `json:"functions"`
	// The function log type
	LogType string `json:"log_type"`
	// The branch of the deploy
	Branch *string `json:"branch,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FunctionBundle FunctionBundle

// NewFunctionBundle instantiates a new FunctionBundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionBundle(id string, provider string, createdAt time.Time, functions []Function, logType string) *FunctionBundle {
	this := FunctionBundle{}
	this.Id = id
	this.Provider = provider
	this.CreatedAt = createdAt
	this.Functions = functions
	this.LogType = logType
	return &this
}

// NewFunctionBundleWithDefaults instantiates a new FunctionBundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionBundleWithDefaults() *FunctionBundle {
	this := FunctionBundle{}
	return &this
}

// GetId returns the Id field value
func (o *FunctionBundle) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FunctionBundle) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FunctionBundle) SetId(v string) {
	o.Id = v
}

// GetProvider returns the Provider field value
func (o *FunctionBundle) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *FunctionBundle) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *FunctionBundle) SetProvider(v string) {
	o.Provider = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *FunctionBundle) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *FunctionBundle) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *FunctionBundle) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetFunctions returns the Functions field value
func (o *FunctionBundle) GetFunctions() []Function {
	if o == nil {
		var ret []Function
		return ret
	}

	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value
// and a boolean to check if the value has been set.
func (o *FunctionBundle) GetFunctionsOk() ([]Function, bool) {
	if o == nil {
		return nil, false
	}
	return o.Functions, true
}

// SetFunctions sets field value
func (o *FunctionBundle) SetFunctions(v []Function) {
	o.Functions = v
}

// GetLogType returns the LogType field value
func (o *FunctionBundle) GetLogType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogType
}

// GetLogTypeOk returns a tuple with the LogType field value
// and a boolean to check if the value has been set.
func (o *FunctionBundle) GetLogTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogType, true
}

// SetLogType sets field value
func (o *FunctionBundle) SetLogType(v string) {
	o.LogType = v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *FunctionBundle) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionBundle) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *FunctionBundle) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *FunctionBundle) SetBranch(v string) {
	o.Branch = &v
}

func (o FunctionBundle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionBundle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["provider"] = o.Provider
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["functions"] = o.Functions
	toSerialize["log_type"] = o.LogType
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FunctionBundle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"provider",
		"created_at",
		"functions",
		"log_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFunctionBundle := _FunctionBundle{}

	err = json.Unmarshal(data, &varFunctionBundle)

	if err != nil {
		return err
	}

	*o = FunctionBundle(varFunctionBundle)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "provider")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "functions")
		delete(additionalProperties, "log_type")
		delete(additionalProperties, "branch")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFunctionBundle struct {
	value *FunctionBundle
	isSet bool
}

func (v NullableFunctionBundle) Get() *FunctionBundle {
	return v.value
}

func (v *NullableFunctionBundle) Set(val *FunctionBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionBundle(val *FunctionBundle) *NullableFunctionBundle {
	return &NullableFunctionBundle{value: val, isSet: true}
}

func (v NullableFunctionBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


