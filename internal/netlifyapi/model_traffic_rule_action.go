/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TrafficRuleAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrafficRuleAction{}

// TrafficRuleAction struct for TrafficRuleAction
type TrafficRuleAction struct {
	Type string `json:"type"`
	Config TrafficRuleActionConfig `json:"config"`
	AdditionalProperties map[string]interface{}
}

type _TrafficRuleAction TrafficRuleAction

// NewTrafficRuleAction instantiates a new TrafficRuleAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrafficRuleAction(type_ string, config TrafficRuleActionConfig) *TrafficRuleAction {
	this := TrafficRuleAction{}
	this.Type = type_
	this.Config = config
	return &this
}

// NewTrafficRuleActionWithDefaults instantiates a new TrafficRuleAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrafficRuleActionWithDefaults() *TrafficRuleAction {
	this := TrafficRuleAction{}
	return &this
}

// GetType returns the Type field value
func (o *TrafficRuleAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TrafficRuleAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TrafficRuleAction) SetType(v string) {
	o.Type = v
}

// GetConfig returns the Config field value
func (o *TrafficRuleAction) GetConfig() TrafficRuleActionConfig {
	if o == nil {
		var ret TrafficRuleActionConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *TrafficRuleAction) GetConfigOk() (*TrafficRuleActionConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *TrafficRuleAction) SetConfig(v TrafficRuleActionConfig) {
	o.Config = v
}

func (o TrafficRuleAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrafficRuleAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["config"] = o.Config

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TrafficRuleAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrafficRuleAction := _TrafficRuleAction{}

	err = json.Unmarshal(data, &varTrafficRuleAction)

	if err != nil {
		return err
	}

	*o = TrafficRuleAction(varTrafficRuleAction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrafficRuleAction struct {
	value *TrafficRuleAction
	isSet bool
}

func (v NullableTrafficRuleAction) Get() *TrafficRuleAction {
	return v.value
}

func (v *NullableTrafficRuleAction) Set(val *TrafficRuleAction) {
	v.value = val
	v.isSet = true
}

func (v NullableTrafficRuleAction) IsSet() bool {
	return v.isSet
}

func (v *NullableTrafficRuleAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrafficRuleAction(val *TrafficRuleAction) *NullableTrafficRuleAction {
	return &NullableTrafficRuleAction{value: val, isSet: true}
}

func (v NullableTrafficRuleAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrafficRuleAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


