/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the PaymentMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentMethod{}

// PaymentMethod PaymentMethod model definition
type PaymentMethod struct {
	// The payment method ID
	Id string `json:"id"`
	// The name for the organization
	Type string `json:"type"`
	Data PaymentMethodData `json:"data"`
	// The state of the payment method
	State string `json:"state"`
	// When the payment method was created
	CreatedAt time.Time `json:"created_at"`
	// When the payment method was updated
	UpdatedAt time.Time `json:"updated_at"`
	// The ID of the account the payment method belongs to
	AccountId string `json:"account_id"`
	// The ID of the customer the payment method belongs to
	CustomerId string `json:"customer_id"`
	// The Zuora payment method ID
	ZuoraId string `json:"zuora_id"`
	// The ID of the organization the payment method belongs to
	OrganizationId string `json:"organization_id"`
	AdditionalProperties map[string]interface{}
}

type _PaymentMethod PaymentMethod

// NewPaymentMethod instantiates a new PaymentMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethod(id string, type_ string, data PaymentMethodData, state string, createdAt time.Time, updatedAt time.Time, accountId string, customerId string, zuoraId string, organizationId string) *PaymentMethod {
	this := PaymentMethod{}
	this.Id = id
	this.Type = type_
	this.Data = data
	this.State = state
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.AccountId = accountId
	this.CustomerId = customerId
	this.ZuoraId = zuoraId
	this.OrganizationId = organizationId
	return &this
}

// NewPaymentMethodWithDefaults instantiates a new PaymentMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodWithDefaults() *PaymentMethod {
	this := PaymentMethod{}
	return &this
}

// GetId returns the Id field value
func (o *PaymentMethod) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PaymentMethod) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *PaymentMethod) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PaymentMethod) SetType(v string) {
	o.Type = v
}

// GetData returns the Data field value
func (o *PaymentMethod) GetData() PaymentMethodData {
	if o == nil {
		var ret PaymentMethodData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetDataOk() (*PaymentMethodData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *PaymentMethod) SetData(v PaymentMethodData) {
	o.Data = v
}

// GetState returns the State field value
func (o *PaymentMethod) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *PaymentMethod) SetState(v string) {
	o.State = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PaymentMethod) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PaymentMethod) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PaymentMethod) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PaymentMethod) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetAccountId returns the AccountId field value
func (o *PaymentMethod) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *PaymentMethod) SetAccountId(v string) {
	o.AccountId = v
}

// GetCustomerId returns the CustomerId field value
func (o *PaymentMethod) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *PaymentMethod) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetZuoraId returns the ZuoraId field value
func (o *PaymentMethod) GetZuoraId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZuoraId
}

// GetZuoraIdOk returns a tuple with the ZuoraId field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetZuoraIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZuoraId, true
}

// SetZuoraId sets field value
func (o *PaymentMethod) SetZuoraId(v string) {
	o.ZuoraId = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *PaymentMethod) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *PaymentMethod) SetOrganizationId(v string) {
	o.OrganizationId = v
}

func (o PaymentMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["data"] = o.Data
	toSerialize["state"] = o.State
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["account_id"] = o.AccountId
	toSerialize["customer_id"] = o.CustomerId
	toSerialize["zuora_id"] = o.ZuoraId
	toSerialize["organization_id"] = o.OrganizationId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaymentMethod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"data",
		"state",
		"created_at",
		"updated_at",
		"account_id",
		"customer_id",
		"zuora_id",
		"organization_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentMethod := _PaymentMethod{}

	err = json.Unmarshal(data, &varPaymentMethod)

	if err != nil {
		return err
	}

	*o = PaymentMethod(varPaymentMethod)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "data")
		delete(additionalProperties, "state")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "customer_id")
		delete(additionalProperties, "zuora_id")
		delete(additionalProperties, "organization_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaymentMethod struct {
	value *PaymentMethod
	isSet bool
}

func (v NullablePaymentMethod) Get() *PaymentMethod {
	return v.value
}

func (v *NullablePaymentMethod) Set(val *PaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethod(val *PaymentMethod) *NullablePaymentMethod {
	return &NullablePaymentMethod{value: val, isSet: true}
}

func (v NullablePaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


