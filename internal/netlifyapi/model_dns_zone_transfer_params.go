/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the DnsZoneTransferParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsZoneTransferParams{}

// DnsZoneTransferParams struct for DnsZoneTransferParams
type DnsZoneTransferParams struct {
	// The current account ID of the DNS zone
	AccountId *string `json:"account_id,omitempty"`
	// The account ID to transfer the DNS zone to
	TransferAccountId *string `json:"transfer_account_id,omitempty"`
	// The userID to transfer the DNS zone to
	TransferUserId *string `json:"transfer_user_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DnsZoneTransferParams DnsZoneTransferParams

// NewDnsZoneTransferParams instantiates a new DnsZoneTransferParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsZoneTransferParams() *DnsZoneTransferParams {
	this := DnsZoneTransferParams{}
	return &this
}

// NewDnsZoneTransferParamsWithDefaults instantiates a new DnsZoneTransferParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsZoneTransferParamsWithDefaults() *DnsZoneTransferParams {
	this := DnsZoneTransferParams{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *DnsZoneTransferParams) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneTransferParams) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *DnsZoneTransferParams) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *DnsZoneTransferParams) SetAccountId(v string) {
	o.AccountId = &v
}

// GetTransferAccountId returns the TransferAccountId field value if set, zero value otherwise.
func (o *DnsZoneTransferParams) GetTransferAccountId() string {
	if o == nil || IsNil(o.TransferAccountId) {
		var ret string
		return ret
	}
	return *o.TransferAccountId
}

// GetTransferAccountIdOk returns a tuple with the TransferAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneTransferParams) GetTransferAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransferAccountId) {
		return nil, false
	}
	return o.TransferAccountId, true
}

// HasTransferAccountId returns a boolean if a field has been set.
func (o *DnsZoneTransferParams) HasTransferAccountId() bool {
	if o != nil && !IsNil(o.TransferAccountId) {
		return true
	}

	return false
}

// SetTransferAccountId gets a reference to the given string and assigns it to the TransferAccountId field.
func (o *DnsZoneTransferParams) SetTransferAccountId(v string) {
	o.TransferAccountId = &v
}

// GetTransferUserId returns the TransferUserId field value if set, zero value otherwise.
func (o *DnsZoneTransferParams) GetTransferUserId() string {
	if o == nil || IsNil(o.TransferUserId) {
		var ret string
		return ret
	}
	return *o.TransferUserId
}

// GetTransferUserIdOk returns a tuple with the TransferUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneTransferParams) GetTransferUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransferUserId) {
		return nil, false
	}
	return o.TransferUserId, true
}

// HasTransferUserId returns a boolean if a field has been set.
func (o *DnsZoneTransferParams) HasTransferUserId() bool {
	if o != nil && !IsNil(o.TransferUserId) {
		return true
	}

	return false
}

// SetTransferUserId gets a reference to the given string and assigns it to the TransferUserId field.
func (o *DnsZoneTransferParams) SetTransferUserId(v string) {
	o.TransferUserId = &v
}

func (o DnsZoneTransferParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsZoneTransferParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.TransferAccountId) {
		toSerialize["transfer_account_id"] = o.TransferAccountId
	}
	if !IsNil(o.TransferUserId) {
		toSerialize["transfer_user_id"] = o.TransferUserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DnsZoneTransferParams) UnmarshalJSON(data []byte) (err error) {
	varDnsZoneTransferParams := _DnsZoneTransferParams{}

	err = json.Unmarshal(data, &varDnsZoneTransferParams)

	if err != nil {
		return err
	}

	*o = DnsZoneTransferParams(varDnsZoneTransferParams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "transfer_account_id")
		delete(additionalProperties, "transfer_user_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDnsZoneTransferParams struct {
	value *DnsZoneTransferParams
	isSet bool
}

func (v NullableDnsZoneTransferParams) Get() *DnsZoneTransferParams {
	return v.value
}

func (v *NullableDnsZoneTransferParams) Set(val *DnsZoneTransferParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsZoneTransferParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsZoneTransferParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsZoneTransferParams(val *DnsZoneTransferParams) *NullableDnsZoneTransferParams {
	return &NullableDnsZoneTransferParams{value: val, isSet: true}
}

func (v NullableDnsZoneTransferParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsZoneTransferParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


