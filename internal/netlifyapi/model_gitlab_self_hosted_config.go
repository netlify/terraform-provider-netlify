/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the GitlabSelfHostedConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitlabSelfHostedConfig{}

// GitlabSelfHostedConfig struct for GitlabSelfHostedConfig
type GitlabSelfHostedConfig struct {
	// the url for the gitlab instance
	InstanceUrl string `json:"instance_url"`
	// the clone url for the gitlab instance
	CloneUrl string `json:"clone_url"`
	// the client id of the gitlab application
	ClientId string `json:"client_id"`
	// the client secret of the gitlab application
	ClientSecret string `json:"client_secret"`
	AdditionalProperties map[string]interface{}
}

type _GitlabSelfHostedConfig GitlabSelfHostedConfig

// NewGitlabSelfHostedConfig instantiates a new GitlabSelfHostedConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitlabSelfHostedConfig(instanceUrl string, cloneUrl string, clientId string, clientSecret string) *GitlabSelfHostedConfig {
	this := GitlabSelfHostedConfig{}
	this.InstanceUrl = instanceUrl
	this.CloneUrl = cloneUrl
	this.ClientId = clientId
	this.ClientSecret = clientSecret
	return &this
}

// NewGitlabSelfHostedConfigWithDefaults instantiates a new GitlabSelfHostedConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitlabSelfHostedConfigWithDefaults() *GitlabSelfHostedConfig {
	this := GitlabSelfHostedConfig{}
	return &this
}

// GetInstanceUrl returns the InstanceUrl field value
func (o *GitlabSelfHostedConfig) GetInstanceUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceUrl
}

// GetInstanceUrlOk returns a tuple with the InstanceUrl field value
// and a boolean to check if the value has been set.
func (o *GitlabSelfHostedConfig) GetInstanceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceUrl, true
}

// SetInstanceUrl sets field value
func (o *GitlabSelfHostedConfig) SetInstanceUrl(v string) {
	o.InstanceUrl = v
}

// GetCloneUrl returns the CloneUrl field value
func (o *GitlabSelfHostedConfig) GetCloneUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloneUrl
}

// GetCloneUrlOk returns a tuple with the CloneUrl field value
// and a boolean to check if the value has been set.
func (o *GitlabSelfHostedConfig) GetCloneUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloneUrl, true
}

// SetCloneUrl sets field value
func (o *GitlabSelfHostedConfig) SetCloneUrl(v string) {
	o.CloneUrl = v
}

// GetClientId returns the ClientId field value
func (o *GitlabSelfHostedConfig) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *GitlabSelfHostedConfig) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *GitlabSelfHostedConfig) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value
func (o *GitlabSelfHostedConfig) GetClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *GitlabSelfHostedConfig) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *GitlabSelfHostedConfig) SetClientSecret(v string) {
	o.ClientSecret = v
}

func (o GitlabSelfHostedConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitlabSelfHostedConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instance_url"] = o.InstanceUrl
	toSerialize["clone_url"] = o.CloneUrl
	toSerialize["client_id"] = o.ClientId
	toSerialize["client_secret"] = o.ClientSecret

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GitlabSelfHostedConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instance_url",
		"clone_url",
		"client_id",
		"client_secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitlabSelfHostedConfig := _GitlabSelfHostedConfig{}

	err = json.Unmarshal(data, &varGitlabSelfHostedConfig)

	if err != nil {
		return err
	}

	*o = GitlabSelfHostedConfig(varGitlabSelfHostedConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instance_url")
		delete(additionalProperties, "clone_url")
		delete(additionalProperties, "client_id")
		delete(additionalProperties, "client_secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGitlabSelfHostedConfig struct {
	value *GitlabSelfHostedConfig
	isSet bool
}

func (v NullableGitlabSelfHostedConfig) Get() *GitlabSelfHostedConfig {
	return v.value
}

func (v *NullableGitlabSelfHostedConfig) Set(val *GitlabSelfHostedConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGitlabSelfHostedConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGitlabSelfHostedConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitlabSelfHostedConfig(val *GitlabSelfHostedConfig) *NullableGitlabSelfHostedConfig {
	return &NullableGitlabSelfHostedConfig{value: val, isSet: true}
}

func (v NullableGitlabSelfHostedConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitlabSelfHostedConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


