/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponseConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseConfig{}

// ResponseConfig struct for ResponseConfig
type ResponseConfig struct {
	Aggregate RateLimitConfigAggregateConfig `json:"aggregate"`
	RateLimitConfig RateLimitConfig `json:"rate_limit_config"`
	// Response status code. Default: 429
	StatusCode *int64 `json:"status_code,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResponseConfig ResponseConfig

// NewResponseConfig instantiates a new ResponseConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseConfig(aggregate RateLimitConfigAggregateConfig, rateLimitConfig RateLimitConfig) *ResponseConfig {
	this := ResponseConfig{}
	this.Aggregate = aggregate
	this.RateLimitConfig = rateLimitConfig
	return &this
}

// NewResponseConfigWithDefaults instantiates a new ResponseConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseConfigWithDefaults() *ResponseConfig {
	this := ResponseConfig{}
	return &this
}

// GetAggregate returns the Aggregate field value
func (o *ResponseConfig) GetAggregate() RateLimitConfigAggregateConfig {
	if o == nil {
		var ret RateLimitConfigAggregateConfig
		return ret
	}

	return o.Aggregate
}

// GetAggregateOk returns a tuple with the Aggregate field value
// and a boolean to check if the value has been set.
func (o *ResponseConfig) GetAggregateOk() (*RateLimitConfigAggregateConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregate, true
}

// SetAggregate sets field value
func (o *ResponseConfig) SetAggregate(v RateLimitConfigAggregateConfig) {
	o.Aggregate = v
}

// GetRateLimitConfig returns the RateLimitConfig field value
func (o *ResponseConfig) GetRateLimitConfig() RateLimitConfig {
	if o == nil {
		var ret RateLimitConfig
		return ret
	}

	return o.RateLimitConfig
}

// GetRateLimitConfigOk returns a tuple with the RateLimitConfig field value
// and a boolean to check if the value has been set.
func (o *ResponseConfig) GetRateLimitConfigOk() (*RateLimitConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RateLimitConfig, true
}

// SetRateLimitConfig sets field value
func (o *ResponseConfig) SetRateLimitConfig(v RateLimitConfig) {
	o.RateLimitConfig = v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ResponseConfig) GetStatusCode() int64 {
	if o == nil || IsNil(o.StatusCode) {
		var ret int64
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseConfig) GetStatusCodeOk() (*int64, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ResponseConfig) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int64 and assigns it to the StatusCode field.
func (o *ResponseConfig) SetStatusCode(v int64) {
	o.StatusCode = &v
}

func (o ResponseConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregate"] = o.Aggregate
	toSerialize["rate_limit_config"] = o.RateLimitConfig
	if !IsNil(o.StatusCode) {
		toSerialize["status_code"] = o.StatusCode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregate",
		"rate_limit_config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseConfig := _ResponseConfig{}

	err = json.Unmarshal(data, &varResponseConfig)

	if err != nil {
		return err
	}

	*o = ResponseConfig(varResponseConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aggregate")
		delete(additionalProperties, "rate_limit_config")
		delete(additionalProperties, "status_code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseConfig struct {
	value *ResponseConfig
	isSet bool
}

func (v NullableResponseConfig) Get() *ResponseConfig {
	return v.value
}

func (v *NullableResponseConfig) Set(val *ResponseConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseConfig(val *ResponseConfig) *NullableResponseConfig {
	return &NullableResponseConfig{value: val, isSet: true}
}

func (v NullableResponseConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


