/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PluginRun type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginRun{}

// PluginRun PluginRun model definition
type PluginRun struct {
	// The ID of the deploy during which the plugin ran
	DeployId string `json:"deploy_id"`
	// The ID of the site for which the plugin ran
	SiteId string `json:"site_id"`
	// The name of the plugin npm package
	Package string `json:"package"`
	// The version of the plugin that ran during the deploy
	Version string `json:"version"`
	// The last build lifecycle event during which the plugin ran
	ReportingEvent string `json:"reporting_event"`
	// The resulting success, failure, or cancelation state
	State string `json:"state"`
	// The title reported by the plugin
	Title string `json:"title"`
	// The summary reported by the plugin
	Summary string `json:"summary"`
	// The full text result reported by the plugin
	Text string `json:"text"`
	AdditionalProperties map[string]interface{}
}

type _PluginRun PluginRun

// NewPluginRun instantiates a new PluginRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginRun(deployId string, siteId string, package_ string, version string, reportingEvent string, state string, title string, summary string, text string) *PluginRun {
	this := PluginRun{}
	this.DeployId = deployId
	this.SiteId = siteId
	this.Package = package_
	this.Version = version
	this.ReportingEvent = reportingEvent
	this.State = state
	this.Title = title
	this.Summary = summary
	this.Text = text
	return &this
}

// NewPluginRunWithDefaults instantiates a new PluginRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginRunWithDefaults() *PluginRun {
	this := PluginRun{}
	return &this
}

// GetDeployId returns the DeployId field value
func (o *PluginRun) GetDeployId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployId
}

// GetDeployIdOk returns a tuple with the DeployId field value
// and a boolean to check if the value has been set.
func (o *PluginRun) GetDeployIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployId, true
}

// SetDeployId sets field value
func (o *PluginRun) SetDeployId(v string) {
	o.DeployId = v
}

// GetSiteId returns the SiteId field value
func (o *PluginRun) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *PluginRun) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *PluginRun) SetSiteId(v string) {
	o.SiteId = v
}

// GetPackage returns the Package field value
func (o *PluginRun) GetPackage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Package
}

// GetPackageOk returns a tuple with the Package field value
// and a boolean to check if the value has been set.
func (o *PluginRun) GetPackageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Package, true
}

// SetPackage sets field value
func (o *PluginRun) SetPackage(v string) {
	o.Package = v
}

// GetVersion returns the Version field value
func (o *PluginRun) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *PluginRun) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *PluginRun) SetVersion(v string) {
	o.Version = v
}

// GetReportingEvent returns the ReportingEvent field value
func (o *PluginRun) GetReportingEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReportingEvent
}

// GetReportingEventOk returns a tuple with the ReportingEvent field value
// and a boolean to check if the value has been set.
func (o *PluginRun) GetReportingEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportingEvent, true
}

// SetReportingEvent sets field value
func (o *PluginRun) SetReportingEvent(v string) {
	o.ReportingEvent = v
}

// GetState returns the State field value
func (o *PluginRun) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *PluginRun) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *PluginRun) SetState(v string) {
	o.State = v
}

// GetTitle returns the Title field value
func (o *PluginRun) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *PluginRun) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *PluginRun) SetTitle(v string) {
	o.Title = v
}

// GetSummary returns the Summary field value
func (o *PluginRun) GetSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *PluginRun) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *PluginRun) SetSummary(v string) {
	o.Summary = v
}

// GetText returns the Text field value
func (o *PluginRun) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *PluginRun) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *PluginRun) SetText(v string) {
	o.Text = v
}

func (o PluginRun) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginRun) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deploy_id"] = o.DeployId
	toSerialize["site_id"] = o.SiteId
	toSerialize["package"] = o.Package
	toSerialize["version"] = o.Version
	toSerialize["reporting_event"] = o.ReportingEvent
	toSerialize["state"] = o.State
	toSerialize["title"] = o.Title
	toSerialize["summary"] = o.Summary
	toSerialize["text"] = o.Text

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PluginRun) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deploy_id",
		"site_id",
		"package",
		"version",
		"reporting_event",
		"state",
		"title",
		"summary",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPluginRun := _PluginRun{}

	err = json.Unmarshal(data, &varPluginRun)

	if err != nil {
		return err
	}

	*o = PluginRun(varPluginRun)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deploy_id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "package")
		delete(additionalProperties, "version")
		delete(additionalProperties, "reporting_event")
		delete(additionalProperties, "state")
		delete(additionalProperties, "title")
		delete(additionalProperties, "summary")
		delete(additionalProperties, "text")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePluginRun struct {
	value *PluginRun
	isSet bool
}

func (v NullablePluginRun) Get() *PluginRun {
	return v.value
}

func (v *NullablePluginRun) Set(val *PluginRun) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginRun) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginRun(val *PluginRun) *NullablePluginRun {
	return &NullablePluginRun{value: val, isSet: true}
}

func (v NullablePluginRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


