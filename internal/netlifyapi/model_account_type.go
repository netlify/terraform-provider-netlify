/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AccountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountType{}

// AccountType AccountType model definition
type AccountType struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
	Description string `json:"description"`
	Capabilities map[string]interface{} `json:"capabilities"`
	MonthlyDollarPrice string `json:"monthly_dollar_price"`
	YearlyDollarPrice string `json:"yearly_dollar_price"`
	MonthlySeatsAddonDollarPrice string `json:"monthly_seats_addon_dollar_price"`
	YearlySeatsAddonDollarPrice string `json:"yearly_seats_addon_dollar_price"`
	MonthlyConcurrentBuildsAddonDollarPrice string `json:"monthly_concurrent_builds_addon_dollar_price"`
	SkipPayment *bool `json:"skip_payment,omitempty"`
	// The Zuora products and their attributes given the Zuora environment
	ZuoraProducts map[string]interface{} `json:"zuora_products,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccountType AccountType

// NewAccountType instantiates a new AccountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountType(id string, name string, slug string, description string, capabilities map[string]interface{}, monthlyDollarPrice string, yearlyDollarPrice string, monthlySeatsAddonDollarPrice string, yearlySeatsAddonDollarPrice string, monthlyConcurrentBuildsAddonDollarPrice string) *AccountType {
	this := AccountType{}
	this.Id = id
	this.Name = name
	this.Slug = slug
	this.Description = description
	this.Capabilities = capabilities
	this.MonthlyDollarPrice = monthlyDollarPrice
	this.YearlyDollarPrice = yearlyDollarPrice
	this.MonthlySeatsAddonDollarPrice = monthlySeatsAddonDollarPrice
	this.YearlySeatsAddonDollarPrice = yearlySeatsAddonDollarPrice
	this.MonthlyConcurrentBuildsAddonDollarPrice = monthlyConcurrentBuildsAddonDollarPrice
	return &this
}

// NewAccountTypeWithDefaults instantiates a new AccountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountTypeWithDefaults() *AccountType {
	this := AccountType{}
	return &this
}

// GetId returns the Id field value
func (o *AccountType) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccountType) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccountType) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *AccountType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AccountType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AccountType) SetName(v string) {
	o.Name = v
}

// GetSlug returns the Slug field value
func (o *AccountType) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *AccountType) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *AccountType) SetSlug(v string) {
	o.Slug = v
}

// GetDescription returns the Description field value
func (o *AccountType) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *AccountType) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *AccountType) SetDescription(v string) {
	o.Description = v
}

// GetCapabilities returns the Capabilities field value
func (o *AccountType) GetCapabilities() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value
// and a boolean to check if the value has been set.
func (o *AccountType) GetCapabilitiesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Capabilities, true
}

// SetCapabilities sets field value
func (o *AccountType) SetCapabilities(v map[string]interface{}) {
	o.Capabilities = v
}

// GetMonthlyDollarPrice returns the MonthlyDollarPrice field value
func (o *AccountType) GetMonthlyDollarPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MonthlyDollarPrice
}

// GetMonthlyDollarPriceOk returns a tuple with the MonthlyDollarPrice field value
// and a boolean to check if the value has been set.
func (o *AccountType) GetMonthlyDollarPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonthlyDollarPrice, true
}

// SetMonthlyDollarPrice sets field value
func (o *AccountType) SetMonthlyDollarPrice(v string) {
	o.MonthlyDollarPrice = v
}

// GetYearlyDollarPrice returns the YearlyDollarPrice field value
func (o *AccountType) GetYearlyDollarPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.YearlyDollarPrice
}

// GetYearlyDollarPriceOk returns a tuple with the YearlyDollarPrice field value
// and a boolean to check if the value has been set.
func (o *AccountType) GetYearlyDollarPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.YearlyDollarPrice, true
}

// SetYearlyDollarPrice sets field value
func (o *AccountType) SetYearlyDollarPrice(v string) {
	o.YearlyDollarPrice = v
}

// GetMonthlySeatsAddonDollarPrice returns the MonthlySeatsAddonDollarPrice field value
func (o *AccountType) GetMonthlySeatsAddonDollarPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MonthlySeatsAddonDollarPrice
}

// GetMonthlySeatsAddonDollarPriceOk returns a tuple with the MonthlySeatsAddonDollarPrice field value
// and a boolean to check if the value has been set.
func (o *AccountType) GetMonthlySeatsAddonDollarPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonthlySeatsAddonDollarPrice, true
}

// SetMonthlySeatsAddonDollarPrice sets field value
func (o *AccountType) SetMonthlySeatsAddonDollarPrice(v string) {
	o.MonthlySeatsAddonDollarPrice = v
}

// GetYearlySeatsAddonDollarPrice returns the YearlySeatsAddonDollarPrice field value
func (o *AccountType) GetYearlySeatsAddonDollarPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.YearlySeatsAddonDollarPrice
}

// GetYearlySeatsAddonDollarPriceOk returns a tuple with the YearlySeatsAddonDollarPrice field value
// and a boolean to check if the value has been set.
func (o *AccountType) GetYearlySeatsAddonDollarPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.YearlySeatsAddonDollarPrice, true
}

// SetYearlySeatsAddonDollarPrice sets field value
func (o *AccountType) SetYearlySeatsAddonDollarPrice(v string) {
	o.YearlySeatsAddonDollarPrice = v
}

// GetMonthlyConcurrentBuildsAddonDollarPrice returns the MonthlyConcurrentBuildsAddonDollarPrice field value
func (o *AccountType) GetMonthlyConcurrentBuildsAddonDollarPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MonthlyConcurrentBuildsAddonDollarPrice
}

// GetMonthlyConcurrentBuildsAddonDollarPriceOk returns a tuple with the MonthlyConcurrentBuildsAddonDollarPrice field value
// and a boolean to check if the value has been set.
func (o *AccountType) GetMonthlyConcurrentBuildsAddonDollarPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonthlyConcurrentBuildsAddonDollarPrice, true
}

// SetMonthlyConcurrentBuildsAddonDollarPrice sets field value
func (o *AccountType) SetMonthlyConcurrentBuildsAddonDollarPrice(v string) {
	o.MonthlyConcurrentBuildsAddonDollarPrice = v
}

// GetSkipPayment returns the SkipPayment field value if set, zero value otherwise.
func (o *AccountType) GetSkipPayment() bool {
	if o == nil || IsNil(o.SkipPayment) {
		var ret bool
		return ret
	}
	return *o.SkipPayment
}

// GetSkipPaymentOk returns a tuple with the SkipPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountType) GetSkipPaymentOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipPayment) {
		return nil, false
	}
	return o.SkipPayment, true
}

// HasSkipPayment returns a boolean if a field has been set.
func (o *AccountType) HasSkipPayment() bool {
	if o != nil && !IsNil(o.SkipPayment) {
		return true
	}

	return false
}

// SetSkipPayment gets a reference to the given bool and assigns it to the SkipPayment field.
func (o *AccountType) SetSkipPayment(v bool) {
	o.SkipPayment = &v
}

// GetZuoraProducts returns the ZuoraProducts field value if set, zero value otherwise.
func (o *AccountType) GetZuoraProducts() map[string]interface{} {
	if o == nil || IsNil(o.ZuoraProducts) {
		var ret map[string]interface{}
		return ret
	}
	return o.ZuoraProducts
}

// GetZuoraProductsOk returns a tuple with the ZuoraProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountType) GetZuoraProductsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ZuoraProducts) {
		return map[string]interface{}{}, false
	}
	return o.ZuoraProducts, true
}

// HasZuoraProducts returns a boolean if a field has been set.
func (o *AccountType) HasZuoraProducts() bool {
	if o != nil && !IsNil(o.ZuoraProducts) {
		return true
	}

	return false
}

// SetZuoraProducts gets a reference to the given map[string]interface{} and assigns it to the ZuoraProducts field.
func (o *AccountType) SetZuoraProducts(v map[string]interface{}) {
	o.ZuoraProducts = v
}

func (o AccountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["slug"] = o.Slug
	toSerialize["description"] = o.Description
	toSerialize["capabilities"] = o.Capabilities
	toSerialize["monthly_dollar_price"] = o.MonthlyDollarPrice
	toSerialize["yearly_dollar_price"] = o.YearlyDollarPrice
	toSerialize["monthly_seats_addon_dollar_price"] = o.MonthlySeatsAddonDollarPrice
	toSerialize["yearly_seats_addon_dollar_price"] = o.YearlySeatsAddonDollarPrice
	toSerialize["monthly_concurrent_builds_addon_dollar_price"] = o.MonthlyConcurrentBuildsAddonDollarPrice
	if !IsNil(o.SkipPayment) {
		toSerialize["skip_payment"] = o.SkipPayment
	}
	if !IsNil(o.ZuoraProducts) {
		toSerialize["zuora_products"] = o.ZuoraProducts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"slug",
		"description",
		"capabilities",
		"monthly_dollar_price",
		"yearly_dollar_price",
		"monthly_seats_addon_dollar_price",
		"yearly_seats_addon_dollar_price",
		"monthly_concurrent_builds_addon_dollar_price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountType := _AccountType{}

	err = json.Unmarshal(data, &varAccountType)

	if err != nil {
		return err
	}

	*o = AccountType(varAccountType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "description")
		delete(additionalProperties, "capabilities")
		delete(additionalProperties, "monthly_dollar_price")
		delete(additionalProperties, "yearly_dollar_price")
		delete(additionalProperties, "monthly_seats_addon_dollar_price")
		delete(additionalProperties, "yearly_seats_addon_dollar_price")
		delete(additionalProperties, "monthly_concurrent_builds_addon_dollar_price")
		delete(additionalProperties, "skip_payment")
		delete(additionalProperties, "zuora_products")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountType struct {
	value *AccountType
	isSet bool
}

func (v NullableAccountType) Get() *AccountType {
	return v.value
}

func (v *NullableAccountType) Set(val *AccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountType(val *AccountType) *NullableAccountType {
	return &NullableAccountType{value: val, isSet: true}
}

func (v NullableAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


