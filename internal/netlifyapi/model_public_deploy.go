/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the PublicDeploy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicDeploy{}

// PublicDeploy PublicDeploy model definition
type PublicDeploy struct {
	// The deploy ID
	Id string `json:"id"`
	// The site ID
	SiteId string `json:"site_id"`
	// The build ID
	BuildId string `json:"build_id"`
	// The state of the deploy
	State string `json:"state"`
	// The site name
	Name string `json:"name"`
	// The HTTP URL of the production deploy
	Url string `json:"url"`
	// The HTTPS URL of the production deploy
	SslUrl string `json:"ssl_url"`
	// The URL of the deploy in the Netlify UI
	AdminUrl string `json:"admin_url"`
	// The HTTP URL of the Deploy Preview
	DeployUrl string `json:"deploy_url"`
	// The HTTPS URL of the Deploy Preview
	DeploySslUrl string `json:"deploy_ssl_url"`
	// When the deploy was created
	CreatedAt time.Time `json:"created_at"`
	// When the deploy was updated
	UpdatedAt time.Time `json:"updated_at"`
	// The git commit SHA
	CommitRef string `json:"commit_ref"`
	// The pull request or merge request number
	ReviewId int64 `json:"review_id"`
	// Whether the deploy has been skipped
	Skipped bool `json:"skipped"`
	// Whether the deploy has been locked
	Locked bool `json:"locked"`
	// The git branch name of the deploy
	Branch string `json:"branch"`
	// The URL for the commit of the deploy
	CommitUrl string `json:"commit_url"`
	// The title of the pull request or merge request
	Title string `json:"title"`
	// The URL of the pull request or merge request
	ReviewUrl string `json:"review_url"`
	// When the deploy was published to production
	PublishedAt time.Time `json:"published_at"`
	// The deploy context
	Context string `json:"context"`
	// The total time, in seconds, it took to deploy
	DeployTime int64 `json:"deploy_time"`
	Summary DeploySummary `json:"summary"`
	// The state of the deploy's plugins
	PluginState string `json:"plugin_state"`
	// Whether the deploy is public
	Public bool `json:"public"`
	AdditionalProperties map[string]interface{}
}

type _PublicDeploy PublicDeploy

// NewPublicDeploy instantiates a new PublicDeploy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicDeploy(id string, siteId string, buildId string, state string, name string, url string, sslUrl string, adminUrl string, deployUrl string, deploySslUrl string, createdAt time.Time, updatedAt time.Time, commitRef string, reviewId int64, skipped bool, locked bool, branch string, commitUrl string, title string, reviewUrl string, publishedAt time.Time, context string, deployTime int64, summary DeploySummary, pluginState string, public bool) *PublicDeploy {
	this := PublicDeploy{}
	this.Id = id
	this.SiteId = siteId
	this.BuildId = buildId
	this.State = state
	this.Name = name
	this.Url = url
	this.SslUrl = sslUrl
	this.AdminUrl = adminUrl
	this.DeployUrl = deployUrl
	this.DeploySslUrl = deploySslUrl
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.CommitRef = commitRef
	this.ReviewId = reviewId
	this.Skipped = skipped
	this.Locked = locked
	this.Branch = branch
	this.CommitUrl = commitUrl
	this.Title = title
	this.ReviewUrl = reviewUrl
	this.PublishedAt = publishedAt
	this.Context = context
	this.DeployTime = deployTime
	this.Summary = summary
	this.PluginState = pluginState
	this.Public = public
	return &this
}

// NewPublicDeployWithDefaults instantiates a new PublicDeploy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicDeployWithDefaults() *PublicDeploy {
	this := PublicDeploy{}
	return &this
}

// GetId returns the Id field value
func (o *PublicDeploy) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicDeploy) SetId(v string) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *PublicDeploy) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *PublicDeploy) SetSiteId(v string) {
	o.SiteId = v
}

// GetBuildId returns the BuildId field value
func (o *PublicDeploy) GetBuildId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildId
}

// GetBuildIdOk returns a tuple with the BuildId field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetBuildIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildId, true
}

// SetBuildId sets field value
func (o *PublicDeploy) SetBuildId(v string) {
	o.BuildId = v
}

// GetState returns the State field value
func (o *PublicDeploy) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *PublicDeploy) SetState(v string) {
	o.State = v
}

// GetName returns the Name field value
func (o *PublicDeploy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublicDeploy) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *PublicDeploy) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *PublicDeploy) SetUrl(v string) {
	o.Url = v
}

// GetSslUrl returns the SslUrl field value
func (o *PublicDeploy) GetSslUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SslUrl
}

// GetSslUrlOk returns a tuple with the SslUrl field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetSslUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SslUrl, true
}

// SetSslUrl sets field value
func (o *PublicDeploy) SetSslUrl(v string) {
	o.SslUrl = v
}

// GetAdminUrl returns the AdminUrl field value
func (o *PublicDeploy) GetAdminUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminUrl
}

// GetAdminUrlOk returns a tuple with the AdminUrl field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetAdminUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminUrl, true
}

// SetAdminUrl sets field value
func (o *PublicDeploy) SetAdminUrl(v string) {
	o.AdminUrl = v
}

// GetDeployUrl returns the DeployUrl field value
func (o *PublicDeploy) GetDeployUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployUrl
}

// GetDeployUrlOk returns a tuple with the DeployUrl field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetDeployUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployUrl, true
}

// SetDeployUrl sets field value
func (o *PublicDeploy) SetDeployUrl(v string) {
	o.DeployUrl = v
}

// GetDeploySslUrl returns the DeploySslUrl field value
func (o *PublicDeploy) GetDeploySslUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploySslUrl
}

// GetDeploySslUrlOk returns a tuple with the DeploySslUrl field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetDeploySslUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploySslUrl, true
}

// SetDeploySslUrl sets field value
func (o *PublicDeploy) SetDeploySslUrl(v string) {
	o.DeploySslUrl = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PublicDeploy) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PublicDeploy) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PublicDeploy) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PublicDeploy) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCommitRef returns the CommitRef field value
func (o *PublicDeploy) GetCommitRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitRef
}

// GetCommitRefOk returns a tuple with the CommitRef field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetCommitRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitRef, true
}

// SetCommitRef sets field value
func (o *PublicDeploy) SetCommitRef(v string) {
	o.CommitRef = v
}

// GetReviewId returns the ReviewId field value
func (o *PublicDeploy) GetReviewId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ReviewId
}

// GetReviewIdOk returns a tuple with the ReviewId field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetReviewIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReviewId, true
}

// SetReviewId sets field value
func (o *PublicDeploy) SetReviewId(v int64) {
	o.ReviewId = v
}

// GetSkipped returns the Skipped field value
func (o *PublicDeploy) GetSkipped() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Skipped
}

// GetSkippedOk returns a tuple with the Skipped field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetSkippedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Skipped, true
}

// SetSkipped sets field value
func (o *PublicDeploy) SetSkipped(v bool) {
	o.Skipped = v
}

// GetLocked returns the Locked field value
func (o *PublicDeploy) GetLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Locked
}

// GetLockedOk returns a tuple with the Locked field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locked, true
}

// SetLocked sets field value
func (o *PublicDeploy) SetLocked(v bool) {
	o.Locked = v
}

// GetBranch returns the Branch field value
func (o *PublicDeploy) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *PublicDeploy) SetBranch(v string) {
	o.Branch = v
}

// GetCommitUrl returns the CommitUrl field value
func (o *PublicDeploy) GetCommitUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitUrl
}

// GetCommitUrlOk returns a tuple with the CommitUrl field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetCommitUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitUrl, true
}

// SetCommitUrl sets field value
func (o *PublicDeploy) SetCommitUrl(v string) {
	o.CommitUrl = v
}

// GetTitle returns the Title field value
func (o *PublicDeploy) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *PublicDeploy) SetTitle(v string) {
	o.Title = v
}

// GetReviewUrl returns the ReviewUrl field value
func (o *PublicDeploy) GetReviewUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReviewUrl
}

// GetReviewUrlOk returns a tuple with the ReviewUrl field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetReviewUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReviewUrl, true
}

// SetReviewUrl sets field value
func (o *PublicDeploy) SetReviewUrl(v string) {
	o.ReviewUrl = v
}

// GetPublishedAt returns the PublishedAt field value
func (o *PublicDeploy) GetPublishedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PublishedAt
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetPublishedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublishedAt, true
}

// SetPublishedAt sets field value
func (o *PublicDeploy) SetPublishedAt(v time.Time) {
	o.PublishedAt = v
}

// GetContext returns the Context field value
func (o *PublicDeploy) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *PublicDeploy) SetContext(v string) {
	o.Context = v
}

// GetDeployTime returns the DeployTime field value
func (o *PublicDeploy) GetDeployTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DeployTime
}

// GetDeployTimeOk returns a tuple with the DeployTime field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetDeployTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployTime, true
}

// SetDeployTime sets field value
func (o *PublicDeploy) SetDeployTime(v int64) {
	o.DeployTime = v
}

// GetSummary returns the Summary field value
func (o *PublicDeploy) GetSummary() DeploySummary {
	if o == nil {
		var ret DeploySummary
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetSummaryOk() (*DeploySummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *PublicDeploy) SetSummary(v DeploySummary) {
	o.Summary = v
}

// GetPluginState returns the PluginState field value
func (o *PublicDeploy) GetPluginState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PluginState
}

// GetPluginStateOk returns a tuple with the PluginState field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetPluginStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PluginState, true
}

// SetPluginState sets field value
func (o *PublicDeploy) SetPluginState(v string) {
	o.PluginState = v
}

// GetPublic returns the Public field value
func (o *PublicDeploy) GetPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Public
}

// GetPublicOk returns a tuple with the Public field value
// and a boolean to check if the value has been set.
func (o *PublicDeploy) GetPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Public, true
}

// SetPublic sets field value
func (o *PublicDeploy) SetPublic(v bool) {
	o.Public = v
}

func (o PublicDeploy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicDeploy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["site_id"] = o.SiteId
	toSerialize["build_id"] = o.BuildId
	toSerialize["state"] = o.State
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	toSerialize["ssl_url"] = o.SslUrl
	toSerialize["admin_url"] = o.AdminUrl
	toSerialize["deploy_url"] = o.DeployUrl
	toSerialize["deploy_ssl_url"] = o.DeploySslUrl
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["commit_ref"] = o.CommitRef
	toSerialize["review_id"] = o.ReviewId
	toSerialize["skipped"] = o.Skipped
	toSerialize["locked"] = o.Locked
	toSerialize["branch"] = o.Branch
	toSerialize["commit_url"] = o.CommitUrl
	toSerialize["title"] = o.Title
	toSerialize["review_url"] = o.ReviewUrl
	toSerialize["published_at"] = o.PublishedAt
	toSerialize["context"] = o.Context
	toSerialize["deploy_time"] = o.DeployTime
	toSerialize["summary"] = o.Summary
	toSerialize["plugin_state"] = o.PluginState
	toSerialize["public"] = o.Public

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PublicDeploy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"site_id",
		"build_id",
		"state",
		"name",
		"url",
		"ssl_url",
		"admin_url",
		"deploy_url",
		"deploy_ssl_url",
		"created_at",
		"updated_at",
		"commit_ref",
		"review_id",
		"skipped",
		"locked",
		"branch",
		"commit_url",
		"title",
		"review_url",
		"published_at",
		"context",
		"deploy_time",
		"summary",
		"plugin_state",
		"public",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicDeploy := _PublicDeploy{}

	err = json.Unmarshal(data, &varPublicDeploy)

	if err != nil {
		return err
	}

	*o = PublicDeploy(varPublicDeploy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "build_id")
		delete(additionalProperties, "state")
		delete(additionalProperties, "name")
		delete(additionalProperties, "url")
		delete(additionalProperties, "ssl_url")
		delete(additionalProperties, "admin_url")
		delete(additionalProperties, "deploy_url")
		delete(additionalProperties, "deploy_ssl_url")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "commit_ref")
		delete(additionalProperties, "review_id")
		delete(additionalProperties, "skipped")
		delete(additionalProperties, "locked")
		delete(additionalProperties, "branch")
		delete(additionalProperties, "commit_url")
		delete(additionalProperties, "title")
		delete(additionalProperties, "review_url")
		delete(additionalProperties, "published_at")
		delete(additionalProperties, "context")
		delete(additionalProperties, "deploy_time")
		delete(additionalProperties, "summary")
		delete(additionalProperties, "plugin_state")
		delete(additionalProperties, "public")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePublicDeploy struct {
	value *PublicDeploy
	isSet bool
}

func (v NullablePublicDeploy) Get() *PublicDeploy {
	return v.value
}

func (v *NullablePublicDeploy) Set(val *PublicDeploy) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicDeploy) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicDeploy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicDeploy(val *PublicDeploy) *NullablePublicDeploy {
	return &NullablePublicDeploy{value: val, isSet: true}
}

func (v NullablePublicDeploy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicDeploy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


