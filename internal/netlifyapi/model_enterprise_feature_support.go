/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the EnterpriseFeatureSupport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnterpriseFeatureSupport{}

// EnterpriseFeatureSupport EnterpriseFeatureSupport model definition.
type EnterpriseFeatureSupport struct {
	// The custom price for support in the contract
	Price *string `json:"price,omitempty"`
	// The support level, either **0**, **1** or **2**
	Level *int64 `json:"level,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnterpriseFeatureSupport EnterpriseFeatureSupport

// NewEnterpriseFeatureSupport instantiates a new EnterpriseFeatureSupport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnterpriseFeatureSupport() *EnterpriseFeatureSupport {
	this := EnterpriseFeatureSupport{}
	return &this
}

// NewEnterpriseFeatureSupportWithDefaults instantiates a new EnterpriseFeatureSupport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnterpriseFeatureSupportWithDefaults() *EnterpriseFeatureSupport {
	this := EnterpriseFeatureSupport{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *EnterpriseFeatureSupport) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnterpriseFeatureSupport) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *EnterpriseFeatureSupport) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *EnterpriseFeatureSupport) SetPrice(v string) {
	o.Price = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *EnterpriseFeatureSupport) GetLevel() int64 {
	if o == nil || IsNil(o.Level) {
		var ret int64
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnterpriseFeatureSupport) GetLevelOk() (*int64, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *EnterpriseFeatureSupport) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int64 and assigns it to the Level field.
func (o *EnterpriseFeatureSupport) SetLevel(v int64) {
	o.Level = &v
}

func (o EnterpriseFeatureSupport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnterpriseFeatureSupport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnterpriseFeatureSupport) UnmarshalJSON(data []byte) (err error) {
	varEnterpriseFeatureSupport := _EnterpriseFeatureSupport{}

	err = json.Unmarshal(data, &varEnterpriseFeatureSupport)

	if err != nil {
		return err
	}

	*o = EnterpriseFeatureSupport(varEnterpriseFeatureSupport)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "price")
		delete(additionalProperties, "level")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnterpriseFeatureSupport struct {
	value *EnterpriseFeatureSupport
	isSet bool
}

func (v NullableEnterpriseFeatureSupport) Get() *EnterpriseFeatureSupport {
	return v.value
}

func (v *NullableEnterpriseFeatureSupport) Set(val *EnterpriseFeatureSupport) {
	v.value = val
	v.isSet = true
}

func (v NullableEnterpriseFeatureSupport) IsSet() bool {
	return v.isSet
}

func (v *NullableEnterpriseFeatureSupport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnterpriseFeatureSupport(val *EnterpriseFeatureSupport) *NullableEnterpriseFeatureSupport {
	return &NullableEnterpriseFeatureSupport{value: val, isSet: true}
}

func (v NullableEnterpriseFeatureSupport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnterpriseFeatureSupport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


