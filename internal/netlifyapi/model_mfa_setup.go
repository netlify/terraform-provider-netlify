/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the MfaSetup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MfaSetup{}

// MfaSetup struct for MfaSetup
type MfaSetup struct {
	// OTP seed
	Seed *string `json:"seed,omitempty"`
	// Base-64 encoded QR Code png to setup 2FA
	Qrcode *string `json:"qrcode,omitempty"`
	// To be returned on 2FA code confirmation
	Token *string `json:"token,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MfaSetup MfaSetup

// NewMfaSetup instantiates a new MfaSetup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMfaSetup() *MfaSetup {
	this := MfaSetup{}
	return &this
}

// NewMfaSetupWithDefaults instantiates a new MfaSetup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMfaSetupWithDefaults() *MfaSetup {
	this := MfaSetup{}
	return &this
}

// GetSeed returns the Seed field value if set, zero value otherwise.
func (o *MfaSetup) GetSeed() string {
	if o == nil || IsNil(o.Seed) {
		var ret string
		return ret
	}
	return *o.Seed
}

// GetSeedOk returns a tuple with the Seed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaSetup) GetSeedOk() (*string, bool) {
	if o == nil || IsNil(o.Seed) {
		return nil, false
	}
	return o.Seed, true
}

// HasSeed returns a boolean if a field has been set.
func (o *MfaSetup) HasSeed() bool {
	if o != nil && !IsNil(o.Seed) {
		return true
	}

	return false
}

// SetSeed gets a reference to the given string and assigns it to the Seed field.
func (o *MfaSetup) SetSeed(v string) {
	o.Seed = &v
}

// GetQrcode returns the Qrcode field value if set, zero value otherwise.
func (o *MfaSetup) GetQrcode() string {
	if o == nil || IsNil(o.Qrcode) {
		var ret string
		return ret
	}
	return *o.Qrcode
}

// GetQrcodeOk returns a tuple with the Qrcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaSetup) GetQrcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Qrcode) {
		return nil, false
	}
	return o.Qrcode, true
}

// HasQrcode returns a boolean if a field has been set.
func (o *MfaSetup) HasQrcode() bool {
	if o != nil && !IsNil(o.Qrcode) {
		return true
	}

	return false
}

// SetQrcode gets a reference to the given string and assigns it to the Qrcode field.
func (o *MfaSetup) SetQrcode(v string) {
	o.Qrcode = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *MfaSetup) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaSetup) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *MfaSetup) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *MfaSetup) SetToken(v string) {
	o.Token = &v
}

func (o MfaSetup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MfaSetup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Seed) {
		toSerialize["seed"] = o.Seed
	}
	if !IsNil(o.Qrcode) {
		toSerialize["qrcode"] = o.Qrcode
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MfaSetup) UnmarshalJSON(data []byte) (err error) {
	varMfaSetup := _MfaSetup{}

	err = json.Unmarshal(data, &varMfaSetup)

	if err != nil {
		return err
	}

	*o = MfaSetup(varMfaSetup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "seed")
		delete(additionalProperties, "qrcode")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMfaSetup struct {
	value *MfaSetup
	isSet bool
}

func (v NullableMfaSetup) Get() *MfaSetup {
	return v.value
}

func (v *NullableMfaSetup) Set(val *MfaSetup) {
	v.value = val
	v.isSet = true
}

func (v NullableMfaSetup) IsSet() bool {
	return v.isSet
}

func (v *NullableMfaSetup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMfaSetup(val *MfaSetup) *NullableMfaSetup {
	return &NullableMfaSetup{value: val, isSet: true}
}

func (v NullableMfaSetup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMfaSetup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


