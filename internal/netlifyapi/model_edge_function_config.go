/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the EdgeFunctionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EdgeFunctionConfig{}

// EdgeFunctionConfig struct for EdgeFunctionConfig
type EdgeFunctionConfig struct {
	Function string `json:"function"`
	Generator *string `json:"generator,omitempty"`
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
	Pattern *string `json:"pattern,omitempty"`
	ExcludedPatterns []string `json:"excluded_patterns,omitempty"`
	Cache *bool `json:"cache,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EdgeFunctionConfig EdgeFunctionConfig

// NewEdgeFunctionConfig instantiates a new EdgeFunctionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdgeFunctionConfig(function string) *EdgeFunctionConfig {
	this := EdgeFunctionConfig{}
	this.Function = function
	return &this
}

// NewEdgeFunctionConfigWithDefaults instantiates a new EdgeFunctionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdgeFunctionConfigWithDefaults() *EdgeFunctionConfig {
	this := EdgeFunctionConfig{}
	return &this
}

// GetFunction returns the Function field value
func (o *EdgeFunctionConfig) GetFunction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Function
}

// GetFunctionOk returns a tuple with the Function field value
// and a boolean to check if the value has been set.
func (o *EdgeFunctionConfig) GetFunctionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Function, true
}

// SetFunction sets field value
func (o *EdgeFunctionConfig) SetFunction(v string) {
	o.Function = v
}

// GetGenerator returns the Generator field value if set, zero value otherwise.
func (o *EdgeFunctionConfig) GetGenerator() string {
	if o == nil || IsNil(o.Generator) {
		var ret string
		return ret
	}
	return *o.Generator
}

// GetGeneratorOk returns a tuple with the Generator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeFunctionConfig) GetGeneratorOk() (*string, bool) {
	if o == nil || IsNil(o.Generator) {
		return nil, false
	}
	return o.Generator, true
}

// HasGenerator returns a boolean if a field has been set.
func (o *EdgeFunctionConfig) HasGenerator() bool {
	if o != nil && !IsNil(o.Generator) {
		return true
	}

	return false
}

// SetGenerator gets a reference to the given string and assigns it to the Generator field.
func (o *EdgeFunctionConfig) SetGenerator(v string) {
	o.Generator = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EdgeFunctionConfig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeFunctionConfig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EdgeFunctionConfig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EdgeFunctionConfig) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *EdgeFunctionConfig) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeFunctionConfig) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *EdgeFunctionConfig) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *EdgeFunctionConfig) SetPath(v string) {
	o.Path = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *EdgeFunctionConfig) GetPattern() string {
	if o == nil || IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeFunctionConfig) GetPatternOk() (*string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *EdgeFunctionConfig) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *EdgeFunctionConfig) SetPattern(v string) {
	o.Pattern = &v
}

// GetExcludedPatterns returns the ExcludedPatterns field value if set, zero value otherwise.
func (o *EdgeFunctionConfig) GetExcludedPatterns() []string {
	if o == nil || IsNil(o.ExcludedPatterns) {
		var ret []string
		return ret
	}
	return o.ExcludedPatterns
}

// GetExcludedPatternsOk returns a tuple with the ExcludedPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeFunctionConfig) GetExcludedPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedPatterns) {
		return nil, false
	}
	return o.ExcludedPatterns, true
}

// HasExcludedPatterns returns a boolean if a field has been set.
func (o *EdgeFunctionConfig) HasExcludedPatterns() bool {
	if o != nil && !IsNil(o.ExcludedPatterns) {
		return true
	}

	return false
}

// SetExcludedPatterns gets a reference to the given []string and assigns it to the ExcludedPatterns field.
func (o *EdgeFunctionConfig) SetExcludedPatterns(v []string) {
	o.ExcludedPatterns = v
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *EdgeFunctionConfig) GetCache() bool {
	if o == nil || IsNil(o.Cache) {
		var ret bool
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeFunctionConfig) GetCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *EdgeFunctionConfig) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given bool and assigns it to the Cache field.
func (o *EdgeFunctionConfig) SetCache(v bool) {
	o.Cache = &v
}

func (o EdgeFunctionConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EdgeFunctionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["function"] = o.Function
	if !IsNil(o.Generator) {
		toSerialize["generator"] = o.Generator
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !IsNil(o.ExcludedPatterns) {
		toSerialize["excluded_patterns"] = o.ExcludedPatterns
	}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EdgeFunctionConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"function",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEdgeFunctionConfig := _EdgeFunctionConfig{}

	err = json.Unmarshal(data, &varEdgeFunctionConfig)

	if err != nil {
		return err
	}

	*o = EdgeFunctionConfig(varEdgeFunctionConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "function")
		delete(additionalProperties, "generator")
		delete(additionalProperties, "name")
		delete(additionalProperties, "path")
		delete(additionalProperties, "pattern")
		delete(additionalProperties, "excluded_patterns")
		delete(additionalProperties, "cache")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEdgeFunctionConfig struct {
	value *EdgeFunctionConfig
	isSet bool
}

func (v NullableEdgeFunctionConfig) Get() *EdgeFunctionConfig {
	return v.value
}

func (v *NullableEdgeFunctionConfig) Set(val *EdgeFunctionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeFunctionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeFunctionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeFunctionConfig(val *EdgeFunctionConfig) *NullableEdgeFunctionConfig {
	return &NullableEdgeFunctionConfig{value: val, isSet: true}
}

func (v NullableEdgeFunctionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeFunctionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


