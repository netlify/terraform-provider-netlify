/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CertOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertOrder{}

// CertOrder CertOrder model definition
type CertOrder struct {
	// The ID of the certificate order
	Id string `json:"id"`
	// The URL of the certificate order
	Url string `json:"url"`
	// The state of the certificate order
	State string `json:"state"`
	// The state of the certificate order managed by AASM gem
	AasmState string `json:"aasm_state"`
	// The exception class and message putting the order into an error state
	ErrorReason string `json:"error_reason"`
	// When the certificate order was created
	CreatedAt time.Time `json:"created_at"`
	// When the certificate order was updated
	UpdatedAt time.Time `json:"updated_at"`
	AdditionalProperties map[string]interface{}
}

type _CertOrder CertOrder

// NewCertOrder instantiates a new CertOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertOrder(id string, url string, state string, aasmState string, errorReason string, createdAt time.Time, updatedAt time.Time) *CertOrder {
	this := CertOrder{}
	this.Id = id
	this.Url = url
	this.State = state
	this.AasmState = aasmState
	this.ErrorReason = errorReason
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewCertOrderWithDefaults instantiates a new CertOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertOrderWithDefaults() *CertOrder {
	this := CertOrder{}
	return &this
}

// GetId returns the Id field value
func (o *CertOrder) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CertOrder) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CertOrder) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *CertOrder) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CertOrder) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CertOrder) SetUrl(v string) {
	o.Url = v
}

// GetState returns the State field value
func (o *CertOrder) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CertOrder) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CertOrder) SetState(v string) {
	o.State = v
}

// GetAasmState returns the AasmState field value
func (o *CertOrder) GetAasmState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AasmState
}

// GetAasmStateOk returns a tuple with the AasmState field value
// and a boolean to check if the value has been set.
func (o *CertOrder) GetAasmStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AasmState, true
}

// SetAasmState sets field value
func (o *CertOrder) SetAasmState(v string) {
	o.AasmState = v
}

// GetErrorReason returns the ErrorReason field value
func (o *CertOrder) GetErrorReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorReason
}

// GetErrorReasonOk returns a tuple with the ErrorReason field value
// and a boolean to check if the value has been set.
func (o *CertOrder) GetErrorReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorReason, true
}

// SetErrorReason sets field value
func (o *CertOrder) SetErrorReason(v string) {
	o.ErrorReason = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CertOrder) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CertOrder) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CertOrder) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CertOrder) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CertOrder) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CertOrder) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o CertOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["state"] = o.State
	toSerialize["aasm_state"] = o.AasmState
	toSerialize["error_reason"] = o.ErrorReason
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"state",
		"aasm_state",
		"error_reason",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertOrder := _CertOrder{}

	err = json.Unmarshal(data, &varCertOrder)

	if err != nil {
		return err
	}

	*o = CertOrder(varCertOrder)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "state")
		delete(additionalProperties, "aasm_state")
		delete(additionalProperties, "error_reason")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertOrder struct {
	value *CertOrder
	isSet bool
}

func (v NullableCertOrder) Get() *CertOrder {
	return v.value
}

func (v *NullableCertOrder) Set(val *CertOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableCertOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableCertOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertOrder(val *CertOrder) *NullableCertOrder {
	return &NullableCertOrder{value: val, isSet: true}
}

func (v NullableCertOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


