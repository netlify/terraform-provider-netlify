/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the TransferDnsZone200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferDnsZone200Response{}

// TransferDnsZone200Response struct for TransferDnsZone200Response
type TransferDnsZone200Response struct {
	Success *bool `json:"success,omitempty"`
	Error *string `json:"error,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TransferDnsZone200Response TransferDnsZone200Response

// NewTransferDnsZone200Response instantiates a new TransferDnsZone200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferDnsZone200Response() *TransferDnsZone200Response {
	this := TransferDnsZone200Response{}
	return &this
}

// NewTransferDnsZone200ResponseWithDefaults instantiates a new TransferDnsZone200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferDnsZone200ResponseWithDefaults() *TransferDnsZone200Response {
	this := TransferDnsZone200Response{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *TransferDnsZone200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferDnsZone200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *TransferDnsZone200Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *TransferDnsZone200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *TransferDnsZone200Response) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferDnsZone200Response) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *TransferDnsZone200Response) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *TransferDnsZone200Response) SetError(v string) {
	o.Error = &v
}

func (o TransferDnsZone200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferDnsZone200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TransferDnsZone200Response) UnmarshalJSON(data []byte) (err error) {
	varTransferDnsZone200Response := _TransferDnsZone200Response{}

	err = json.Unmarshal(data, &varTransferDnsZone200Response)

	if err != nil {
		return err
	}

	*o = TransferDnsZone200Response(varTransferDnsZone200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		delete(additionalProperties, "error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransferDnsZone200Response struct {
	value *TransferDnsZone200Response
	isSet bool
}

func (v NullableTransferDnsZone200Response) Get() *TransferDnsZone200Response {
	return v.value
}

func (v *NullableTransferDnsZone200Response) Set(val *TransferDnsZone200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferDnsZone200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferDnsZone200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferDnsZone200Response(val *TransferDnsZone200Response) *NullableTransferDnsZone200Response {
	return &NullableTransferDnsZone200Response{value: val, isSet: true}
}

func (v NullableTransferDnsZone200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferDnsZone200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


