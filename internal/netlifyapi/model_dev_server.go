/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the DevServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevServer{}

// DevServer struct for DevServer
type DevServer struct {
	// The id of the dev server
	Id *string `json:"id,omitempty"`
	// The id of the site
	SiteId *string `json:"site_id,omitempty"`
	// The state of the dev server
	State *string `json:"state,omitempty"`
	// The time the dev server was enqueued
	EnqueuedAt *string `json:"enqueued_at,omitempty"`
	// The time the dev server was created
	CreatedAt *string `json:"created_at,omitempty"`
	// The time the dev server was updated
	UpdatedAt *string `json:"updated_at,omitempty"`
	// The url of the dev server
	Url *string `json:"url,omitempty"`
	// The time the dev server started
	StartingAt *string `json:"starting_at,omitempty"`
	// The time the dev server errored
	ErrorAt *string `json:"error_at,omitempty"`
	// The time the dev server went live
	LiveAt *string `json:"live_at,omitempty"`
	// The time the dev server was done
	DoneAt *string `json:"done_at,omitempty"`
	// The branch of the dev server
	Branch *string `json:"branch,omitempty"`
	// The title of the dev server
	Title *string `json:"title,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DevServer DevServer

// NewDevServer instantiates a new DevServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevServer() *DevServer {
	this := DevServer{}
	return &this
}

// NewDevServerWithDefaults instantiates a new DevServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevServerWithDefaults() *DevServer {
	this := DevServer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DevServer) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DevServer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DevServer) SetId(v string) {
	o.Id = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *DevServer) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *DevServer) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *DevServer) SetSiteId(v string) {
	o.SiteId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DevServer) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DevServer) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DevServer) SetState(v string) {
	o.State = &v
}

// GetEnqueuedAt returns the EnqueuedAt field value if set, zero value otherwise.
func (o *DevServer) GetEnqueuedAt() string {
	if o == nil || IsNil(o.EnqueuedAt) {
		var ret string
		return ret
	}
	return *o.EnqueuedAt
}

// GetEnqueuedAtOk returns a tuple with the EnqueuedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetEnqueuedAtOk() (*string, bool) {
	if o == nil || IsNil(o.EnqueuedAt) {
		return nil, false
	}
	return o.EnqueuedAt, true
}

// HasEnqueuedAt returns a boolean if a field has been set.
func (o *DevServer) HasEnqueuedAt() bool {
	if o != nil && !IsNil(o.EnqueuedAt) {
		return true
	}

	return false
}

// SetEnqueuedAt gets a reference to the given string and assigns it to the EnqueuedAt field.
func (o *DevServer) SetEnqueuedAt(v string) {
	o.EnqueuedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DevServer) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DevServer) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *DevServer) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DevServer) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DevServer) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *DevServer) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DevServer) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DevServer) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DevServer) SetUrl(v string) {
	o.Url = &v
}

// GetStartingAt returns the StartingAt field value if set, zero value otherwise.
func (o *DevServer) GetStartingAt() string {
	if o == nil || IsNil(o.StartingAt) {
		var ret string
		return ret
	}
	return *o.StartingAt
}

// GetStartingAtOk returns a tuple with the StartingAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetStartingAtOk() (*string, bool) {
	if o == nil || IsNil(o.StartingAt) {
		return nil, false
	}
	return o.StartingAt, true
}

// HasStartingAt returns a boolean if a field has been set.
func (o *DevServer) HasStartingAt() bool {
	if o != nil && !IsNil(o.StartingAt) {
		return true
	}

	return false
}

// SetStartingAt gets a reference to the given string and assigns it to the StartingAt field.
func (o *DevServer) SetStartingAt(v string) {
	o.StartingAt = &v
}

// GetErrorAt returns the ErrorAt field value if set, zero value otherwise.
func (o *DevServer) GetErrorAt() string {
	if o == nil || IsNil(o.ErrorAt) {
		var ret string
		return ret
	}
	return *o.ErrorAt
}

// GetErrorAtOk returns a tuple with the ErrorAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetErrorAtOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorAt) {
		return nil, false
	}
	return o.ErrorAt, true
}

// HasErrorAt returns a boolean if a field has been set.
func (o *DevServer) HasErrorAt() bool {
	if o != nil && !IsNil(o.ErrorAt) {
		return true
	}

	return false
}

// SetErrorAt gets a reference to the given string and assigns it to the ErrorAt field.
func (o *DevServer) SetErrorAt(v string) {
	o.ErrorAt = &v
}

// GetLiveAt returns the LiveAt field value if set, zero value otherwise.
func (o *DevServer) GetLiveAt() string {
	if o == nil || IsNil(o.LiveAt) {
		var ret string
		return ret
	}
	return *o.LiveAt
}

// GetLiveAtOk returns a tuple with the LiveAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetLiveAtOk() (*string, bool) {
	if o == nil || IsNil(o.LiveAt) {
		return nil, false
	}
	return o.LiveAt, true
}

// HasLiveAt returns a boolean if a field has been set.
func (o *DevServer) HasLiveAt() bool {
	if o != nil && !IsNil(o.LiveAt) {
		return true
	}

	return false
}

// SetLiveAt gets a reference to the given string and assigns it to the LiveAt field.
func (o *DevServer) SetLiveAt(v string) {
	o.LiveAt = &v
}

// GetDoneAt returns the DoneAt field value if set, zero value otherwise.
func (o *DevServer) GetDoneAt() string {
	if o == nil || IsNil(o.DoneAt) {
		var ret string
		return ret
	}
	return *o.DoneAt
}

// GetDoneAtOk returns a tuple with the DoneAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetDoneAtOk() (*string, bool) {
	if o == nil || IsNil(o.DoneAt) {
		return nil, false
	}
	return o.DoneAt, true
}

// HasDoneAt returns a boolean if a field has been set.
func (o *DevServer) HasDoneAt() bool {
	if o != nil && !IsNil(o.DoneAt) {
		return true
	}

	return false
}

// SetDoneAt gets a reference to the given string and assigns it to the DoneAt field.
func (o *DevServer) SetDoneAt(v string) {
	o.DoneAt = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *DevServer) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *DevServer) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *DevServer) SetBranch(v string) {
	o.Branch = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *DevServer) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServer) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *DevServer) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *DevServer) SetTitle(v string) {
	o.Title = &v
}

func (o DevServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.EnqueuedAt) {
		toSerialize["enqueued_at"] = o.EnqueuedAt
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.StartingAt) {
		toSerialize["starting_at"] = o.StartingAt
	}
	if !IsNil(o.ErrorAt) {
		toSerialize["error_at"] = o.ErrorAt
	}
	if !IsNil(o.LiveAt) {
		toSerialize["live_at"] = o.LiveAt
	}
	if !IsNil(o.DoneAt) {
		toSerialize["done_at"] = o.DoneAt
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DevServer) UnmarshalJSON(data []byte) (err error) {
	varDevServer := _DevServer{}

	err = json.Unmarshal(data, &varDevServer)

	if err != nil {
		return err
	}

	*o = DevServer(varDevServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "state")
		delete(additionalProperties, "enqueued_at")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "url")
		delete(additionalProperties, "starting_at")
		delete(additionalProperties, "error_at")
		delete(additionalProperties, "live_at")
		delete(additionalProperties, "done_at")
		delete(additionalProperties, "branch")
		delete(additionalProperties, "title")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDevServer struct {
	value *DevServer
	isSet bool
}

func (v NullableDevServer) Get() *DevServer {
	return v.value
}

func (v *NullableDevServer) Set(val *DevServer) {
	v.value = val
	v.isSet = true
}

func (v NullableDevServer) IsSet() bool {
	return v.isSet
}

func (v *NullableDevServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevServer(val *DevServer) *NullableDevServer {
	return &NullableDevServer{value: val, isSet: true}
}

func (v NullableDevServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


