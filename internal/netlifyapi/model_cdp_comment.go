/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CDPComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDPComment{}

// CDPComment struct for CDPComment
type CDPComment struct {
	// The ID of the Event
	Id string `json:"id"`
	User CDPUser `json:"user"`
	// The type of event (ticket, comment, view etc.)
	Type string `json:"type"`
	// When the Event ticket was created
	CreatedAt time.Time `json:"created_at"`
	// When the Event ticket was created
	UpdatedAt time.Time `json:"updated_at"`
	// Information about the metadata for the Event
	Metadata map[string]interface{} `json:"metadata"`
	// The body of the comment
	Body string `json:"body"`
	// Whether the comment has been resolved
	Resolved bool `json:"resolved"`
	ResolvedBy CDPUser `json:"resolved_by"`
	// The service the comment belongs to (github etc)
	Service string `json:"service"`
	// The service id of the comment
	ServiceCommentId string `json:"service_comment_id"`
	// The review state of the comment (approved, denied)
	Review string `json:"review"`
	// Whether the comment is automated
	Automated bool `json:"automated"`
	// Whether the comment is pending
	Pending bool `json:"pending"`
	// The ID of the user who created the comment
	ReviewerId string `json:"reviewer_id"`
	AdditionalProperties map[string]interface{}
}

type _CDPComment CDPComment

// NewCDPComment instantiates a new CDPComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDPComment(id string, user CDPUser, type_ string, createdAt time.Time, updatedAt time.Time, metadata map[string]interface{}, body string, resolved bool, resolvedBy CDPUser, service string, serviceCommentId string, review string, automated bool, pending bool, reviewerId string) *CDPComment {
	this := CDPComment{}
	this.Id = id
	this.User = user
	this.Type = type_
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Metadata = metadata
	this.Body = body
	this.Resolved = resolved
	this.ResolvedBy = resolvedBy
	this.Service = service
	this.ServiceCommentId = serviceCommentId
	this.Review = review
	this.Automated = automated
	this.Pending = pending
	this.ReviewerId = reviewerId
	return &this
}

// NewCDPCommentWithDefaults instantiates a new CDPComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDPCommentWithDefaults() *CDPComment {
	this := CDPComment{}
	return &this
}

// GetId returns the Id field value
func (o *CDPComment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CDPComment) SetId(v string) {
	o.Id = v
}

// GetUser returns the User field value
func (o *CDPComment) GetUser() CDPUser {
	if o == nil {
		var ret CDPUser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetUserOk() (*CDPUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *CDPComment) SetUser(v CDPUser) {
	o.User = v
}

// GetType returns the Type field value
func (o *CDPComment) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CDPComment) SetType(v string) {
	o.Type = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CDPComment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CDPComment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CDPComment) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CDPComment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetMetadata returns the Metadata field value
func (o *CDPComment) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *CDPComment) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetBody returns the Body field value
func (o *CDPComment) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *CDPComment) SetBody(v string) {
	o.Body = v
}

// GetResolved returns the Resolved field value
func (o *CDPComment) GetResolved() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Resolved
}

// GetResolvedOk returns a tuple with the Resolved field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetResolvedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resolved, true
}

// SetResolved sets field value
func (o *CDPComment) SetResolved(v bool) {
	o.Resolved = v
}

// GetResolvedBy returns the ResolvedBy field value
func (o *CDPComment) GetResolvedBy() CDPUser {
	if o == nil {
		var ret CDPUser
		return ret
	}

	return o.ResolvedBy
}

// GetResolvedByOk returns a tuple with the ResolvedBy field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetResolvedByOk() (*CDPUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResolvedBy, true
}

// SetResolvedBy sets field value
func (o *CDPComment) SetResolvedBy(v CDPUser) {
	o.ResolvedBy = v
}

// GetService returns the Service field value
func (o *CDPComment) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *CDPComment) SetService(v string) {
	o.Service = v
}

// GetServiceCommentId returns the ServiceCommentId field value
func (o *CDPComment) GetServiceCommentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceCommentId
}

// GetServiceCommentIdOk returns a tuple with the ServiceCommentId field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetServiceCommentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceCommentId, true
}

// SetServiceCommentId sets field value
func (o *CDPComment) SetServiceCommentId(v string) {
	o.ServiceCommentId = v
}

// GetReview returns the Review field value
func (o *CDPComment) GetReview() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Review
}

// GetReviewOk returns a tuple with the Review field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetReviewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Review, true
}

// SetReview sets field value
func (o *CDPComment) SetReview(v string) {
	o.Review = v
}

// GetAutomated returns the Automated field value
func (o *CDPComment) GetAutomated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Automated
}

// GetAutomatedOk returns a tuple with the Automated field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetAutomatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Automated, true
}

// SetAutomated sets field value
func (o *CDPComment) SetAutomated(v bool) {
	o.Automated = v
}

// GetPending returns the Pending field value
func (o *CDPComment) GetPending() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pending
}

// GetPendingOk returns a tuple with the Pending field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetPendingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pending, true
}

// SetPending sets field value
func (o *CDPComment) SetPending(v bool) {
	o.Pending = v
}

// GetReviewerId returns the ReviewerId field value
func (o *CDPComment) GetReviewerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReviewerId
}

// GetReviewerIdOk returns a tuple with the ReviewerId field value
// and a boolean to check if the value has been set.
func (o *CDPComment) GetReviewerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReviewerId, true
}

// SetReviewerId sets field value
func (o *CDPComment) SetReviewerId(v string) {
	o.ReviewerId = v
}

func (o CDPComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDPComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["user"] = o.User
	toSerialize["type"] = o.Type
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["metadata"] = o.Metadata
	toSerialize["body"] = o.Body
	toSerialize["resolved"] = o.Resolved
	toSerialize["resolved_by"] = o.ResolvedBy
	toSerialize["service"] = o.Service
	toSerialize["service_comment_id"] = o.ServiceCommentId
	toSerialize["review"] = o.Review
	toSerialize["automated"] = o.Automated
	toSerialize["pending"] = o.Pending
	toSerialize["reviewer_id"] = o.ReviewerId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CDPComment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"user",
		"type",
		"created_at",
		"updated_at",
		"metadata",
		"body",
		"resolved",
		"resolved_by",
		"service",
		"service_comment_id",
		"review",
		"automated",
		"pending",
		"reviewer_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDPComment := _CDPComment{}

	err = json.Unmarshal(data, &varCDPComment)

	if err != nil {
		return err
	}

	*o = CDPComment(varCDPComment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "user")
		delete(additionalProperties, "type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "body")
		delete(additionalProperties, "resolved")
		delete(additionalProperties, "resolved_by")
		delete(additionalProperties, "service")
		delete(additionalProperties, "service_comment_id")
		delete(additionalProperties, "review")
		delete(additionalProperties, "automated")
		delete(additionalProperties, "pending")
		delete(additionalProperties, "reviewer_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCDPComment struct {
	value *CDPComment
	isSet bool
}

func (v NullableCDPComment) Get() *CDPComment {
	return v.value
}

func (v *NullableCDPComment) Set(val *CDPComment) {
	v.value = val
	v.isSet = true
}

func (v NullableCDPComment) IsSet() bool {
	return v.isSet
}

func (v *NullableCDPComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDPComment(val *CDPComment) *NullableCDPComment {
	return &NullableCDPComment{value: val, isSet: true}
}

func (v NullableCDPComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDPComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


