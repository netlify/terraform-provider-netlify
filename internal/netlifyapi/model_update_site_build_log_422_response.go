/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the UpdateSiteBuildLog422Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSiteBuildLog422Response{}

// UpdateSiteBuildLog422Response struct for UpdateSiteBuildLog422Response
type UpdateSiteBuildLog422Response struct {
	Code *int64 `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateSiteBuildLog422Response UpdateSiteBuildLog422Response

// NewUpdateSiteBuildLog422Response instantiates a new UpdateSiteBuildLog422Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSiteBuildLog422Response() *UpdateSiteBuildLog422Response {
	this := UpdateSiteBuildLog422Response{}
	return &this
}

// NewUpdateSiteBuildLog422ResponseWithDefaults instantiates a new UpdateSiteBuildLog422Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSiteBuildLog422ResponseWithDefaults() *UpdateSiteBuildLog422Response {
	this := UpdateSiteBuildLog422Response{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UpdateSiteBuildLog422Response) GetCode() int64 {
	if o == nil || IsNil(o.Code) {
		var ret int64
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSiteBuildLog422Response) GetCodeOk() (*int64, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UpdateSiteBuildLog422Response) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int64 and assigns it to the Code field.
func (o *UpdateSiteBuildLog422Response) SetCode(v int64) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *UpdateSiteBuildLog422Response) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSiteBuildLog422Response) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *UpdateSiteBuildLog422Response) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *UpdateSiteBuildLog422Response) SetMessage(v string) {
	o.Message = &v
}

func (o UpdateSiteBuildLog422Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSiteBuildLog422Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateSiteBuildLog422Response) UnmarshalJSON(data []byte) (err error) {
	varUpdateSiteBuildLog422Response := _UpdateSiteBuildLog422Response{}

	err = json.Unmarshal(data, &varUpdateSiteBuildLog422Response)

	if err != nil {
		return err
	}

	*o = UpdateSiteBuildLog422Response(varUpdateSiteBuildLog422Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateSiteBuildLog422Response struct {
	value *UpdateSiteBuildLog422Response
	isSet bool
}

func (v NullableUpdateSiteBuildLog422Response) Get() *UpdateSiteBuildLog422Response {
	return v.value
}

func (v *NullableUpdateSiteBuildLog422Response) Set(val *UpdateSiteBuildLog422Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSiteBuildLog422Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSiteBuildLog422Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSiteBuildLog422Response(val *UpdateSiteBuildLog422Response) *NullableUpdateSiteBuildLog422Response {
	return &NullableUpdateSiteBuildLog422Response{value: val, isSet: true}
}

func (v NullableUpdateSiteBuildLog422Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSiteBuildLog422Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


