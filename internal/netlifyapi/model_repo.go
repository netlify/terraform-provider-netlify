/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
)

// checks if the Repo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Repo{}

// Repo Repo model definition
type Repo struct {
	AllowedBranches []string `json:"allowed_branches,omitempty"`
	Base *string `json:"base,omitempty"`
	BaseRelDir *bool `json:"base_rel_dir,omitempty"`
	ConfigurationFilePath *string `json:"configuration_file_path,omitempty"`
	Cmd *string `json:"cmd,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	DeployKeyId *string `json:"deploy_key_id,omitempty"`
	Dir *string `json:"dir,omitempty"`
	Env map[string]interface{} `json:"env,omitempty"`
	FunctionsDir *string `json:"functions_dir,omitempty"`
	InstallationId *int64 `json:"installation_id,omitempty"`
	PackagePath *string `json:"package_path,omitempty"`
	PrivateLogs *bool `json:"private_logs,omitempty"`
	Provider *string `json:"provider,omitempty"`
	PublicRepo *bool `json:"public_repo,omitempty"`
	Branch *string `json:"branch,omitempty"`
	RepoBranch *string `json:"repo_branch,omitempty"`
	RepoOwnerType *string `json:"repo_owner_type,omitempty"`
	RepoPath *string `json:"repo_path,omitempty"`
	// Always \"git\"
	RepoType *string `json:"repo_type,omitempty"`
	RepoUrl *string `json:"repo_url,omitempty"`
	SkipAutomaticBuilds *bool `json:"skip_automatic_builds,omitempty"`
	SkipPrs *bool `json:"skip_prs,omitempty"`
	StopBuilds *bool `json:"stop_builds,omitempty"`
	UntrustedFlow *string `json:"untrusted_flow,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Repo Repo

// NewRepo instantiates a new Repo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepo() *Repo {
	this := Repo{}
	return &this
}

// NewRepoWithDefaults instantiates a new Repo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepoWithDefaults() *Repo {
	this := Repo{}
	return &this
}

// GetAllowedBranches returns the AllowedBranches field value if set, zero value otherwise.
func (o *Repo) GetAllowedBranches() []string {
	if o == nil || IsNil(o.AllowedBranches) {
		var ret []string
		return ret
	}
	return o.AllowedBranches
}

// GetAllowedBranchesOk returns a tuple with the AllowedBranches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetAllowedBranchesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedBranches) {
		return nil, false
	}
	return o.AllowedBranches, true
}

// HasAllowedBranches returns a boolean if a field has been set.
func (o *Repo) HasAllowedBranches() bool {
	if o != nil && !IsNil(o.AllowedBranches) {
		return true
	}

	return false
}

// SetAllowedBranches gets a reference to the given []string and assigns it to the AllowedBranches field.
func (o *Repo) SetAllowedBranches(v []string) {
	o.AllowedBranches = v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *Repo) GetBase() string {
	if o == nil || IsNil(o.Base) {
		var ret string
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetBaseOk() (*string, bool) {
	if o == nil || IsNil(o.Base) {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *Repo) HasBase() bool {
	if o != nil && !IsNil(o.Base) {
		return true
	}

	return false
}

// SetBase gets a reference to the given string and assigns it to the Base field.
func (o *Repo) SetBase(v string) {
	o.Base = &v
}

// GetBaseRelDir returns the BaseRelDir field value if set, zero value otherwise.
func (o *Repo) GetBaseRelDir() bool {
	if o == nil || IsNil(o.BaseRelDir) {
		var ret bool
		return ret
	}
	return *o.BaseRelDir
}

// GetBaseRelDirOk returns a tuple with the BaseRelDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetBaseRelDirOk() (*bool, bool) {
	if o == nil || IsNil(o.BaseRelDir) {
		return nil, false
	}
	return o.BaseRelDir, true
}

// HasBaseRelDir returns a boolean if a field has been set.
func (o *Repo) HasBaseRelDir() bool {
	if o != nil && !IsNil(o.BaseRelDir) {
		return true
	}

	return false
}

// SetBaseRelDir gets a reference to the given bool and assigns it to the BaseRelDir field.
func (o *Repo) SetBaseRelDir(v bool) {
	o.BaseRelDir = &v
}

// GetConfigurationFilePath returns the ConfigurationFilePath field value if set, zero value otherwise.
func (o *Repo) GetConfigurationFilePath() string {
	if o == nil || IsNil(o.ConfigurationFilePath) {
		var ret string
		return ret
	}
	return *o.ConfigurationFilePath
}

// GetConfigurationFilePathOk returns a tuple with the ConfigurationFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetConfigurationFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationFilePath) {
		return nil, false
	}
	return o.ConfigurationFilePath, true
}

// HasConfigurationFilePath returns a boolean if a field has been set.
func (o *Repo) HasConfigurationFilePath() bool {
	if o != nil && !IsNil(o.ConfigurationFilePath) {
		return true
	}

	return false
}

// SetConfigurationFilePath gets a reference to the given string and assigns it to the ConfigurationFilePath field.
func (o *Repo) SetConfigurationFilePath(v string) {
	o.ConfigurationFilePath = &v
}

// GetCmd returns the Cmd field value if set, zero value otherwise.
func (o *Repo) GetCmd() string {
	if o == nil || IsNil(o.Cmd) {
		var ret string
		return ret
	}
	return *o.Cmd
}

// GetCmdOk returns a tuple with the Cmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetCmdOk() (*string, bool) {
	if o == nil || IsNil(o.Cmd) {
		return nil, false
	}
	return o.Cmd, true
}

// HasCmd returns a boolean if a field has been set.
func (o *Repo) HasCmd() bool {
	if o != nil && !IsNil(o.Cmd) {
		return true
	}

	return false
}

// SetCmd gets a reference to the given string and assigns it to the Cmd field.
func (o *Repo) SetCmd(v string) {
	o.Cmd = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Repo) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Repo) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Repo) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeployKeyId returns the DeployKeyId field value if set, zero value otherwise.
func (o *Repo) GetDeployKeyId() string {
	if o == nil || IsNil(o.DeployKeyId) {
		var ret string
		return ret
	}
	return *o.DeployKeyId
}

// GetDeployKeyIdOk returns a tuple with the DeployKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetDeployKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeployKeyId) {
		return nil, false
	}
	return o.DeployKeyId, true
}

// HasDeployKeyId returns a boolean if a field has been set.
func (o *Repo) HasDeployKeyId() bool {
	if o != nil && !IsNil(o.DeployKeyId) {
		return true
	}

	return false
}

// SetDeployKeyId gets a reference to the given string and assigns it to the DeployKeyId field.
func (o *Repo) SetDeployKeyId(v string) {
	o.DeployKeyId = &v
}

// GetDir returns the Dir field value if set, zero value otherwise.
func (o *Repo) GetDir() string {
	if o == nil || IsNil(o.Dir) {
		var ret string
		return ret
	}
	return *o.Dir
}

// GetDirOk returns a tuple with the Dir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetDirOk() (*string, bool) {
	if o == nil || IsNil(o.Dir) {
		return nil, false
	}
	return o.Dir, true
}

// HasDir returns a boolean if a field has been set.
func (o *Repo) HasDir() bool {
	if o != nil && !IsNil(o.Dir) {
		return true
	}

	return false
}

// SetDir gets a reference to the given string and assigns it to the Dir field.
func (o *Repo) SetDir(v string) {
	o.Dir = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *Repo) GetEnv() map[string]interface{} {
	if o == nil || IsNil(o.Env) {
		var ret map[string]interface{}
		return ret
	}
	return o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetEnvOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Env) {
		return map[string]interface{}{}, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *Repo) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given map[string]interface{} and assigns it to the Env field.
func (o *Repo) SetEnv(v map[string]interface{}) {
	o.Env = v
}

// GetFunctionsDir returns the FunctionsDir field value if set, zero value otherwise.
func (o *Repo) GetFunctionsDir() string {
	if o == nil || IsNil(o.FunctionsDir) {
		var ret string
		return ret
	}
	return *o.FunctionsDir
}

// GetFunctionsDirOk returns a tuple with the FunctionsDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetFunctionsDirOk() (*string, bool) {
	if o == nil || IsNil(o.FunctionsDir) {
		return nil, false
	}
	return o.FunctionsDir, true
}

// HasFunctionsDir returns a boolean if a field has been set.
func (o *Repo) HasFunctionsDir() bool {
	if o != nil && !IsNil(o.FunctionsDir) {
		return true
	}

	return false
}

// SetFunctionsDir gets a reference to the given string and assigns it to the FunctionsDir field.
func (o *Repo) SetFunctionsDir(v string) {
	o.FunctionsDir = &v
}

// GetInstallationId returns the InstallationId field value if set, zero value otherwise.
func (o *Repo) GetInstallationId() int64 {
	if o == nil || IsNil(o.InstallationId) {
		var ret int64
		return ret
	}
	return *o.InstallationId
}

// GetInstallationIdOk returns a tuple with the InstallationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetInstallationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.InstallationId) {
		return nil, false
	}
	return o.InstallationId, true
}

// HasInstallationId returns a boolean if a field has been set.
func (o *Repo) HasInstallationId() bool {
	if o != nil && !IsNil(o.InstallationId) {
		return true
	}

	return false
}

// SetInstallationId gets a reference to the given int64 and assigns it to the InstallationId field.
func (o *Repo) SetInstallationId(v int64) {
	o.InstallationId = &v
}

// GetPackagePath returns the PackagePath field value if set, zero value otherwise.
func (o *Repo) GetPackagePath() string {
	if o == nil || IsNil(o.PackagePath) {
		var ret string
		return ret
	}
	return *o.PackagePath
}

// GetPackagePathOk returns a tuple with the PackagePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetPackagePathOk() (*string, bool) {
	if o == nil || IsNil(o.PackagePath) {
		return nil, false
	}
	return o.PackagePath, true
}

// HasPackagePath returns a boolean if a field has been set.
func (o *Repo) HasPackagePath() bool {
	if o != nil && !IsNil(o.PackagePath) {
		return true
	}

	return false
}

// SetPackagePath gets a reference to the given string and assigns it to the PackagePath field.
func (o *Repo) SetPackagePath(v string) {
	o.PackagePath = &v
}

// GetPrivateLogs returns the PrivateLogs field value if set, zero value otherwise.
func (o *Repo) GetPrivateLogs() bool {
	if o == nil || IsNil(o.PrivateLogs) {
		var ret bool
		return ret
	}
	return *o.PrivateLogs
}

// GetPrivateLogsOk returns a tuple with the PrivateLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetPrivateLogsOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivateLogs) {
		return nil, false
	}
	return o.PrivateLogs, true
}

// HasPrivateLogs returns a boolean if a field has been set.
func (o *Repo) HasPrivateLogs() bool {
	if o != nil && !IsNil(o.PrivateLogs) {
		return true
	}

	return false
}

// SetPrivateLogs gets a reference to the given bool and assigns it to the PrivateLogs field.
func (o *Repo) SetPrivateLogs(v bool) {
	o.PrivateLogs = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *Repo) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *Repo) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *Repo) SetProvider(v string) {
	o.Provider = &v
}

// GetPublicRepo returns the PublicRepo field value if set, zero value otherwise.
func (o *Repo) GetPublicRepo() bool {
	if o == nil || IsNil(o.PublicRepo) {
		var ret bool
		return ret
	}
	return *o.PublicRepo
}

// GetPublicRepoOk returns a tuple with the PublicRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetPublicRepoOk() (*bool, bool) {
	if o == nil || IsNil(o.PublicRepo) {
		return nil, false
	}
	return o.PublicRepo, true
}

// HasPublicRepo returns a boolean if a field has been set.
func (o *Repo) HasPublicRepo() bool {
	if o != nil && !IsNil(o.PublicRepo) {
		return true
	}

	return false
}

// SetPublicRepo gets a reference to the given bool and assigns it to the PublicRepo field.
func (o *Repo) SetPublicRepo(v bool) {
	o.PublicRepo = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *Repo) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *Repo) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *Repo) SetBranch(v string) {
	o.Branch = &v
}

// GetRepoBranch returns the RepoBranch field value if set, zero value otherwise.
func (o *Repo) GetRepoBranch() string {
	if o == nil || IsNil(o.RepoBranch) {
		var ret string
		return ret
	}
	return *o.RepoBranch
}

// GetRepoBranchOk returns a tuple with the RepoBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetRepoBranchOk() (*string, bool) {
	if o == nil || IsNil(o.RepoBranch) {
		return nil, false
	}
	return o.RepoBranch, true
}

// HasRepoBranch returns a boolean if a field has been set.
func (o *Repo) HasRepoBranch() bool {
	if o != nil && !IsNil(o.RepoBranch) {
		return true
	}

	return false
}

// SetRepoBranch gets a reference to the given string and assigns it to the RepoBranch field.
func (o *Repo) SetRepoBranch(v string) {
	o.RepoBranch = &v
}

// GetRepoOwnerType returns the RepoOwnerType field value if set, zero value otherwise.
func (o *Repo) GetRepoOwnerType() string {
	if o == nil || IsNil(o.RepoOwnerType) {
		var ret string
		return ret
	}
	return *o.RepoOwnerType
}

// GetRepoOwnerTypeOk returns a tuple with the RepoOwnerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetRepoOwnerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RepoOwnerType) {
		return nil, false
	}
	return o.RepoOwnerType, true
}

// HasRepoOwnerType returns a boolean if a field has been set.
func (o *Repo) HasRepoOwnerType() bool {
	if o != nil && !IsNil(o.RepoOwnerType) {
		return true
	}

	return false
}

// SetRepoOwnerType gets a reference to the given string and assigns it to the RepoOwnerType field.
func (o *Repo) SetRepoOwnerType(v string) {
	o.RepoOwnerType = &v
}

// GetRepoPath returns the RepoPath field value if set, zero value otherwise.
func (o *Repo) GetRepoPath() string {
	if o == nil || IsNil(o.RepoPath) {
		var ret string
		return ret
	}
	return *o.RepoPath
}

// GetRepoPathOk returns a tuple with the RepoPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetRepoPathOk() (*string, bool) {
	if o == nil || IsNil(o.RepoPath) {
		return nil, false
	}
	return o.RepoPath, true
}

// HasRepoPath returns a boolean if a field has been set.
func (o *Repo) HasRepoPath() bool {
	if o != nil && !IsNil(o.RepoPath) {
		return true
	}

	return false
}

// SetRepoPath gets a reference to the given string and assigns it to the RepoPath field.
func (o *Repo) SetRepoPath(v string) {
	o.RepoPath = &v
}

// GetRepoType returns the RepoType field value if set, zero value otherwise.
func (o *Repo) GetRepoType() string {
	if o == nil || IsNil(o.RepoType) {
		var ret string
		return ret
	}
	return *o.RepoType
}

// GetRepoTypeOk returns a tuple with the RepoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetRepoTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RepoType) {
		return nil, false
	}
	return o.RepoType, true
}

// HasRepoType returns a boolean if a field has been set.
func (o *Repo) HasRepoType() bool {
	if o != nil && !IsNil(o.RepoType) {
		return true
	}

	return false
}

// SetRepoType gets a reference to the given string and assigns it to the RepoType field.
func (o *Repo) SetRepoType(v string) {
	o.RepoType = &v
}

// GetRepoUrl returns the RepoUrl field value if set, zero value otherwise.
func (o *Repo) GetRepoUrl() string {
	if o == nil || IsNil(o.RepoUrl) {
		var ret string
		return ret
	}
	return *o.RepoUrl
}

// GetRepoUrlOk returns a tuple with the RepoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetRepoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RepoUrl) {
		return nil, false
	}
	return o.RepoUrl, true
}

// HasRepoUrl returns a boolean if a field has been set.
func (o *Repo) HasRepoUrl() bool {
	if o != nil && !IsNil(o.RepoUrl) {
		return true
	}

	return false
}

// SetRepoUrl gets a reference to the given string and assigns it to the RepoUrl field.
func (o *Repo) SetRepoUrl(v string) {
	o.RepoUrl = &v
}

// GetSkipAutomaticBuilds returns the SkipAutomaticBuilds field value if set, zero value otherwise.
func (o *Repo) GetSkipAutomaticBuilds() bool {
	if o == nil || IsNil(o.SkipAutomaticBuilds) {
		var ret bool
		return ret
	}
	return *o.SkipAutomaticBuilds
}

// GetSkipAutomaticBuildsOk returns a tuple with the SkipAutomaticBuilds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetSkipAutomaticBuildsOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipAutomaticBuilds) {
		return nil, false
	}
	return o.SkipAutomaticBuilds, true
}

// HasSkipAutomaticBuilds returns a boolean if a field has been set.
func (o *Repo) HasSkipAutomaticBuilds() bool {
	if o != nil && !IsNil(o.SkipAutomaticBuilds) {
		return true
	}

	return false
}

// SetSkipAutomaticBuilds gets a reference to the given bool and assigns it to the SkipAutomaticBuilds field.
func (o *Repo) SetSkipAutomaticBuilds(v bool) {
	o.SkipAutomaticBuilds = &v
}

// GetSkipPrs returns the SkipPrs field value if set, zero value otherwise.
func (o *Repo) GetSkipPrs() bool {
	if o == nil || IsNil(o.SkipPrs) {
		var ret bool
		return ret
	}
	return *o.SkipPrs
}

// GetSkipPrsOk returns a tuple with the SkipPrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetSkipPrsOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipPrs) {
		return nil, false
	}
	return o.SkipPrs, true
}

// HasSkipPrs returns a boolean if a field has been set.
func (o *Repo) HasSkipPrs() bool {
	if o != nil && !IsNil(o.SkipPrs) {
		return true
	}

	return false
}

// SetSkipPrs gets a reference to the given bool and assigns it to the SkipPrs field.
func (o *Repo) SetSkipPrs(v bool) {
	o.SkipPrs = &v
}

// GetStopBuilds returns the StopBuilds field value if set, zero value otherwise.
func (o *Repo) GetStopBuilds() bool {
	if o == nil || IsNil(o.StopBuilds) {
		var ret bool
		return ret
	}
	return *o.StopBuilds
}

// GetStopBuildsOk returns a tuple with the StopBuilds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetStopBuildsOk() (*bool, bool) {
	if o == nil || IsNil(o.StopBuilds) {
		return nil, false
	}
	return o.StopBuilds, true
}

// HasStopBuilds returns a boolean if a field has been set.
func (o *Repo) HasStopBuilds() bool {
	if o != nil && !IsNil(o.StopBuilds) {
		return true
	}

	return false
}

// SetStopBuilds gets a reference to the given bool and assigns it to the StopBuilds field.
func (o *Repo) SetStopBuilds(v bool) {
	o.StopBuilds = &v
}

// GetUntrustedFlow returns the UntrustedFlow field value if set, zero value otherwise.
func (o *Repo) GetUntrustedFlow() string {
	if o == nil || IsNil(o.UntrustedFlow) {
		var ret string
		return ret
	}
	return *o.UntrustedFlow
}

// GetUntrustedFlowOk returns a tuple with the UntrustedFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetUntrustedFlowOk() (*string, bool) {
	if o == nil || IsNil(o.UntrustedFlow) {
		return nil, false
	}
	return o.UntrustedFlow, true
}

// HasUntrustedFlow returns a boolean if a field has been set.
func (o *Repo) HasUntrustedFlow() bool {
	if o != nil && !IsNil(o.UntrustedFlow) {
		return true
	}

	return false
}

// SetUntrustedFlow gets a reference to the given string and assigns it to the UntrustedFlow field.
func (o *Repo) SetUntrustedFlow(v string) {
	o.UntrustedFlow = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Repo) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Repo) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Repo) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Repo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Repo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedBranches) {
		toSerialize["allowed_branches"] = o.AllowedBranches
	}
	if !IsNil(o.Base) {
		toSerialize["base"] = o.Base
	}
	if !IsNil(o.BaseRelDir) {
		toSerialize["base_rel_dir"] = o.BaseRelDir
	}
	if !IsNil(o.ConfigurationFilePath) {
		toSerialize["configuration_file_path"] = o.ConfigurationFilePath
	}
	if !IsNil(o.Cmd) {
		toSerialize["cmd"] = o.Cmd
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DeployKeyId) {
		toSerialize["deploy_key_id"] = o.DeployKeyId
	}
	if !IsNil(o.Dir) {
		toSerialize["dir"] = o.Dir
	}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.FunctionsDir) {
		toSerialize["functions_dir"] = o.FunctionsDir
	}
	if !IsNil(o.InstallationId) {
		toSerialize["installation_id"] = o.InstallationId
	}
	if !IsNil(o.PackagePath) {
		toSerialize["package_path"] = o.PackagePath
	}
	if !IsNil(o.PrivateLogs) {
		toSerialize["private_logs"] = o.PrivateLogs
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.PublicRepo) {
		toSerialize["public_repo"] = o.PublicRepo
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.RepoBranch) {
		toSerialize["repo_branch"] = o.RepoBranch
	}
	if !IsNil(o.RepoOwnerType) {
		toSerialize["repo_owner_type"] = o.RepoOwnerType
	}
	if !IsNil(o.RepoPath) {
		toSerialize["repo_path"] = o.RepoPath
	}
	if !IsNil(o.RepoType) {
		toSerialize["repo_type"] = o.RepoType
	}
	if !IsNil(o.RepoUrl) {
		toSerialize["repo_url"] = o.RepoUrl
	}
	if !IsNil(o.SkipAutomaticBuilds) {
		toSerialize["skip_automatic_builds"] = o.SkipAutomaticBuilds
	}
	if !IsNil(o.SkipPrs) {
		toSerialize["skip_prs"] = o.SkipPrs
	}
	if !IsNil(o.StopBuilds) {
		toSerialize["stop_builds"] = o.StopBuilds
	}
	if !IsNil(o.UntrustedFlow) {
		toSerialize["untrusted_flow"] = o.UntrustedFlow
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Repo) UnmarshalJSON(data []byte) (err error) {
	varRepo := _Repo{}

	err = json.Unmarshal(data, &varRepo)

	if err != nil {
		return err
	}

	*o = Repo(varRepo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowed_branches")
		delete(additionalProperties, "base")
		delete(additionalProperties, "base_rel_dir")
		delete(additionalProperties, "configuration_file_path")
		delete(additionalProperties, "cmd")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "deploy_key_id")
		delete(additionalProperties, "dir")
		delete(additionalProperties, "env")
		delete(additionalProperties, "functions_dir")
		delete(additionalProperties, "installation_id")
		delete(additionalProperties, "package_path")
		delete(additionalProperties, "private_logs")
		delete(additionalProperties, "provider")
		delete(additionalProperties, "public_repo")
		delete(additionalProperties, "branch")
		delete(additionalProperties, "repo_branch")
		delete(additionalProperties, "repo_owner_type")
		delete(additionalProperties, "repo_path")
		delete(additionalProperties, "repo_type")
		delete(additionalProperties, "repo_url")
		delete(additionalProperties, "skip_automatic_builds")
		delete(additionalProperties, "skip_prs")
		delete(additionalProperties, "stop_builds")
		delete(additionalProperties, "untrusted_flow")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepo struct {
	value *Repo
	isSet bool
}

func (v NullableRepo) Get() *Repo {
	return v.value
}

func (v *NullableRepo) Set(val *Repo) {
	v.value = val
	v.isSet = true
}

func (v NullableRepo) IsSet() bool {
	return v.isSet
}

func (v *NullableRepo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepo(val *Repo) *NullableRepo {
	return &NullableRepo{value: val, isSet: true}
}

func (v NullableRepo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


