/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SniCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SniCertificate{}

// SniCertificate @property(x-internal:true) other_sites [array<object>] A list of sites also using this certificate. Included only in `show` responses.
type SniCertificate struct {
	Id string `json:"id"`
	State string `json:"state"`
	Domains []string `json:"domains"`
	ExpiresAt time.Time `json:"expires_at"`
	Custom bool `json:"custom"`
	MigrateToLeRunning bool `json:"migrate_to_le_running"`
	RenewalErrorMessage string `json:"renewal_error_message"`
	Renewable bool `json:"renewable"`
	RenewRunning bool `json:"renew_running"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	AdditionalProperties map[string]interface{}
}

type _SniCertificate SniCertificate

// NewSniCertificate instantiates a new SniCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSniCertificate(id string, state string, domains []string, expiresAt time.Time, custom bool, migrateToLeRunning bool, renewalErrorMessage string, renewable bool, renewRunning bool, createdAt time.Time, updatedAt time.Time) *SniCertificate {
	this := SniCertificate{}
	this.Id = id
	this.State = state
	this.Domains = domains
	this.ExpiresAt = expiresAt
	this.Custom = custom
	this.MigrateToLeRunning = migrateToLeRunning
	this.RenewalErrorMessage = renewalErrorMessage
	this.Renewable = renewable
	this.RenewRunning = renewRunning
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewSniCertificateWithDefaults instantiates a new SniCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSniCertificateWithDefaults() *SniCertificate {
	this := SniCertificate{}
	return &this
}

// GetId returns the Id field value
func (o *SniCertificate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SniCertificate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SniCertificate) SetId(v string) {
	o.Id = v
}

// GetState returns the State field value
func (o *SniCertificate) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SniCertificate) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SniCertificate) SetState(v string) {
	o.State = v
}

// GetDomains returns the Domains field value
func (o *SniCertificate) GetDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value
// and a boolean to check if the value has been set.
func (o *SniCertificate) GetDomainsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domains, true
}

// SetDomains sets field value
func (o *SniCertificate) SetDomains(v []string) {
	o.Domains = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *SniCertificate) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *SniCertificate) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *SniCertificate) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetCustom returns the Custom field value
func (o *SniCertificate) GetCustom() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Custom
}

// GetCustomOk returns a tuple with the Custom field value
// and a boolean to check if the value has been set.
func (o *SniCertificate) GetCustomOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Custom, true
}

// SetCustom sets field value
func (o *SniCertificate) SetCustom(v bool) {
	o.Custom = v
}

// GetMigrateToLeRunning returns the MigrateToLeRunning field value
func (o *SniCertificate) GetMigrateToLeRunning() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MigrateToLeRunning
}

// GetMigrateToLeRunningOk returns a tuple with the MigrateToLeRunning field value
// and a boolean to check if the value has been set.
func (o *SniCertificate) GetMigrateToLeRunningOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MigrateToLeRunning, true
}

// SetMigrateToLeRunning sets field value
func (o *SniCertificate) SetMigrateToLeRunning(v bool) {
	o.MigrateToLeRunning = v
}

// GetRenewalErrorMessage returns the RenewalErrorMessage field value
func (o *SniCertificate) GetRenewalErrorMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RenewalErrorMessage
}

// GetRenewalErrorMessageOk returns a tuple with the RenewalErrorMessage field value
// and a boolean to check if the value has been set.
func (o *SniCertificate) GetRenewalErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RenewalErrorMessage, true
}

// SetRenewalErrorMessage sets field value
func (o *SniCertificate) SetRenewalErrorMessage(v string) {
	o.RenewalErrorMessage = v
}

// GetRenewable returns the Renewable field value
func (o *SniCertificate) GetRenewable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Renewable
}

// GetRenewableOk returns a tuple with the Renewable field value
// and a boolean to check if the value has been set.
func (o *SniCertificate) GetRenewableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Renewable, true
}

// SetRenewable sets field value
func (o *SniCertificate) SetRenewable(v bool) {
	o.Renewable = v
}

// GetRenewRunning returns the RenewRunning field value
func (o *SniCertificate) GetRenewRunning() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RenewRunning
}

// GetRenewRunningOk returns a tuple with the RenewRunning field value
// and a boolean to check if the value has been set.
func (o *SniCertificate) GetRenewRunningOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RenewRunning, true
}

// SetRenewRunning sets field value
func (o *SniCertificate) SetRenewRunning(v bool) {
	o.RenewRunning = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *SniCertificate) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SniCertificate) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SniCertificate) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *SniCertificate) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *SniCertificate) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *SniCertificate) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o SniCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SniCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["state"] = o.State
	toSerialize["domains"] = o.Domains
	toSerialize["expires_at"] = o.ExpiresAt
	toSerialize["custom"] = o.Custom
	toSerialize["migrate_to_le_running"] = o.MigrateToLeRunning
	toSerialize["renewal_error_message"] = o.RenewalErrorMessage
	toSerialize["renewable"] = o.Renewable
	toSerialize["renew_running"] = o.RenewRunning
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SniCertificate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"state",
		"domains",
		"expires_at",
		"custom",
		"migrate_to_le_running",
		"renewal_error_message",
		"renewable",
		"renew_running",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSniCertificate := _SniCertificate{}

	err = json.Unmarshal(data, &varSniCertificate)

	if err != nil {
		return err
	}

	*o = SniCertificate(varSniCertificate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "state")
		delete(additionalProperties, "domains")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "custom")
		delete(additionalProperties, "migrate_to_le_running")
		delete(additionalProperties, "renewal_error_message")
		delete(additionalProperties, "renewable")
		delete(additionalProperties, "renew_running")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSniCertificate struct {
	value *SniCertificate
	isSet bool
}

func (v NullableSniCertificate) Get() *SniCertificate {
	return v.value
}

func (v *NullableSniCertificate) Set(val *SniCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableSniCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableSniCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSniCertificate(val *SniCertificate) *NullableSniCertificate {
	return &NullableSniCertificate{value: val, isSet: true}
}

func (v NullableSniCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSniCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


