/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CDPTicketDataBoard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDPTicketDataBoard{}

// CDPTicketDataBoard struct for CDPTicketDataBoard
type CDPTicketDataBoard struct {
	CreatedAt time.Time `json:"created_at"`
	Description string `json:"description"`
	Id string `json:"id"`
	Name string `json:"name"`
	ProjectIds []string `json:"project_ids"`
	States []CDPTicketDataState `json:"states"`
	AdditionalProperties map[string]interface{}
}

type _CDPTicketDataBoard CDPTicketDataBoard

// NewCDPTicketDataBoard instantiates a new CDPTicketDataBoard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDPTicketDataBoard(createdAt time.Time, description string, id string, name string, projectIds []string, states []CDPTicketDataState) *CDPTicketDataBoard {
	this := CDPTicketDataBoard{}
	this.CreatedAt = createdAt
	this.Description = description
	this.Id = id
	this.Name = name
	this.ProjectIds = projectIds
	this.States = states
	return &this
}

// NewCDPTicketDataBoardWithDefaults instantiates a new CDPTicketDataBoard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDPTicketDataBoardWithDefaults() *CDPTicketDataBoard {
	this := CDPTicketDataBoard{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *CDPTicketDataBoard) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataBoard) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CDPTicketDataBoard) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value
func (o *CDPTicketDataBoard) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataBoard) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CDPTicketDataBoard) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *CDPTicketDataBoard) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataBoard) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CDPTicketDataBoard) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CDPTicketDataBoard) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataBoard) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CDPTicketDataBoard) SetName(v string) {
	o.Name = v
}

// GetProjectIds returns the ProjectIds field value
func (o *CDPTicketDataBoard) GetProjectIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ProjectIds
}

// GetProjectIdsOk returns a tuple with the ProjectIds field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataBoard) GetProjectIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectIds, true
}

// SetProjectIds sets field value
func (o *CDPTicketDataBoard) SetProjectIds(v []string) {
	o.ProjectIds = v
}

// GetStates returns the States field value
func (o *CDPTicketDataBoard) GetStates() []CDPTicketDataState {
	if o == nil {
		var ret []CDPTicketDataState
		return ret
	}

	return o.States
}

// GetStatesOk returns a tuple with the States field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataBoard) GetStatesOk() ([]CDPTicketDataState, bool) {
	if o == nil {
		return nil, false
	}
	return o.States, true
}

// SetStates sets field value
func (o *CDPTicketDataBoard) SetStates(v []CDPTicketDataState) {
	o.States = v
}

func (o CDPTicketDataBoard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDPTicketDataBoard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["project_ids"] = o.ProjectIds
	toSerialize["states"] = o.States

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CDPTicketDataBoard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"description",
		"id",
		"name",
		"project_ids",
		"states",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDPTicketDataBoard := _CDPTicketDataBoard{}

	err = json.Unmarshal(data, &varCDPTicketDataBoard)

	if err != nil {
		return err
	}

	*o = CDPTicketDataBoard(varCDPTicketDataBoard)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "project_ids")
		delete(additionalProperties, "states")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCDPTicketDataBoard struct {
	value *CDPTicketDataBoard
	isSet bool
}

func (v NullableCDPTicketDataBoard) Get() *CDPTicketDataBoard {
	return v.value
}

func (v *NullableCDPTicketDataBoard) Set(val *CDPTicketDataBoard) {
	v.value = val
	v.isSet = true
}

func (v NullableCDPTicketDataBoard) IsSet() bool {
	return v.isSet
}

func (v *NullableCDPTicketDataBoard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDPTicketDataBoard(val *CDPTicketDataBoard) *NullableCDPTicketDataBoard {
	return &NullableCDPTicketDataBoard{value: val, isSet: true}
}

func (v NullableCDPTicketDataBoard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDPTicketDataBoard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


