/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CompositeTargetConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompositeTargetConfig{}

// CompositeTargetConfig struct for CompositeTargetConfig
type CompositeTargetConfig struct {
	Conditions []TrafficRuleTarget `json:"conditions"`
	AdditionalProperties map[string]interface{}
}

type _CompositeTargetConfig CompositeTargetConfig

// NewCompositeTargetConfig instantiates a new CompositeTargetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompositeTargetConfig(conditions []TrafficRuleTarget) *CompositeTargetConfig {
	this := CompositeTargetConfig{}
	this.Conditions = conditions
	return &this
}

// NewCompositeTargetConfigWithDefaults instantiates a new CompositeTargetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompositeTargetConfigWithDefaults() *CompositeTargetConfig {
	this := CompositeTargetConfig{}
	return &this
}

// GetConditions returns the Conditions field value
func (o *CompositeTargetConfig) GetConditions() []TrafficRuleTarget {
	if o == nil {
		var ret []TrafficRuleTarget
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *CompositeTargetConfig) GetConditionsOk() ([]TrafficRuleTarget, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *CompositeTargetConfig) SetConditions(v []TrafficRuleTarget) {
	o.Conditions = v
}

func (o CompositeTargetConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompositeTargetConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conditions"] = o.Conditions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompositeTargetConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conditions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompositeTargetConfig := _CompositeTargetConfig{}

	err = json.Unmarshal(data, &varCompositeTargetConfig)

	if err != nil {
		return err
	}

	*o = CompositeTargetConfig(varCompositeTargetConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "conditions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompositeTargetConfig struct {
	value *CompositeTargetConfig
	isSet bool
}

func (v NullableCompositeTargetConfig) Get() *CompositeTargetConfig {
	return v.value
}

func (v *NullableCompositeTargetConfig) Set(val *CompositeTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCompositeTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCompositeTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompositeTargetConfig(val *CompositeTargetConfig) *NullableCompositeTargetConfig {
	return &NullableCompositeTargetConfig{value: val, isSet: true}
}

func (v NullableCompositeTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompositeTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


