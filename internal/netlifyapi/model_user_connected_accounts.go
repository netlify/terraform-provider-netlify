/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the UserConnectedAccounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserConnectedAccounts{}

// UserConnectedAccounts Information of the connected providers' slug if any
type UserConnectedAccounts struct {
	Github *string `json:"github,omitempty"`
	Gitlab *string `json:"gitlab,omitempty"`
	Bitbucket *string `json:"bitbucket,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserConnectedAccounts UserConnectedAccounts

// NewUserConnectedAccounts instantiates a new UserConnectedAccounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserConnectedAccounts() *UserConnectedAccounts {
	this := UserConnectedAccounts{}
	return &this
}

// NewUserConnectedAccountsWithDefaults instantiates a new UserConnectedAccounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserConnectedAccountsWithDefaults() *UserConnectedAccounts {
	this := UserConnectedAccounts{}
	return &this
}

// GetGithub returns the Github field value if set, zero value otherwise.
func (o *UserConnectedAccounts) GetGithub() string {
	if o == nil || IsNil(o.Github) {
		var ret string
		return ret
	}
	return *o.Github
}

// GetGithubOk returns a tuple with the Github field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConnectedAccounts) GetGithubOk() (*string, bool) {
	if o == nil || IsNil(o.Github) {
		return nil, false
	}
	return o.Github, true
}

// HasGithub returns a boolean if a field has been set.
func (o *UserConnectedAccounts) HasGithub() bool {
	if o != nil && !IsNil(o.Github) {
		return true
	}

	return false
}

// SetGithub gets a reference to the given string and assigns it to the Github field.
func (o *UserConnectedAccounts) SetGithub(v string) {
	o.Github = &v
}

// GetGitlab returns the Gitlab field value if set, zero value otherwise.
func (o *UserConnectedAccounts) GetGitlab() string {
	if o == nil || IsNil(o.Gitlab) {
		var ret string
		return ret
	}
	return *o.Gitlab
}

// GetGitlabOk returns a tuple with the Gitlab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConnectedAccounts) GetGitlabOk() (*string, bool) {
	if o == nil || IsNil(o.Gitlab) {
		return nil, false
	}
	return o.Gitlab, true
}

// HasGitlab returns a boolean if a field has been set.
func (o *UserConnectedAccounts) HasGitlab() bool {
	if o != nil && !IsNil(o.Gitlab) {
		return true
	}

	return false
}

// SetGitlab gets a reference to the given string and assigns it to the Gitlab field.
func (o *UserConnectedAccounts) SetGitlab(v string) {
	o.Gitlab = &v
}

// GetBitbucket returns the Bitbucket field value if set, zero value otherwise.
func (o *UserConnectedAccounts) GetBitbucket() string {
	if o == nil || IsNil(o.Bitbucket) {
		var ret string
		return ret
	}
	return *o.Bitbucket
}

// GetBitbucketOk returns a tuple with the Bitbucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConnectedAccounts) GetBitbucketOk() (*string, bool) {
	if o == nil || IsNil(o.Bitbucket) {
		return nil, false
	}
	return o.Bitbucket, true
}

// HasBitbucket returns a boolean if a field has been set.
func (o *UserConnectedAccounts) HasBitbucket() bool {
	if o != nil && !IsNil(o.Bitbucket) {
		return true
	}

	return false
}

// SetBitbucket gets a reference to the given string and assigns it to the Bitbucket field.
func (o *UserConnectedAccounts) SetBitbucket(v string) {
	o.Bitbucket = &v
}

func (o UserConnectedAccounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserConnectedAccounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Github) {
		toSerialize["github"] = o.Github
	}
	if !IsNil(o.Gitlab) {
		toSerialize["gitlab"] = o.Gitlab
	}
	if !IsNil(o.Bitbucket) {
		toSerialize["bitbucket"] = o.Bitbucket
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserConnectedAccounts) UnmarshalJSON(data []byte) (err error) {
	varUserConnectedAccounts := _UserConnectedAccounts{}

	err = json.Unmarshal(data, &varUserConnectedAccounts)

	if err != nil {
		return err
	}

	*o = UserConnectedAccounts(varUserConnectedAccounts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "github")
		delete(additionalProperties, "gitlab")
		delete(additionalProperties, "bitbucket")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserConnectedAccounts struct {
	value *UserConnectedAccounts
	isSet bool
}

func (v NullableUserConnectedAccounts) Get() *UserConnectedAccounts {
	return v.value
}

func (v *NullableUserConnectedAccounts) Set(val *UserConnectedAccounts) {
	v.value = val
	v.isSet = true
}

func (v NullableUserConnectedAccounts) IsSet() bool {
	return v.isSet
}

func (v *NullableUserConnectedAccounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserConnectedAccounts(val *UserConnectedAccounts) *NullableUserConnectedAccounts {
	return &NullableUserConnectedAccounts{value: val, isSet: true}
}

func (v NullableUserConnectedAccounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserConnectedAccounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


