/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
)

// checks if the BuildStatusMinutes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildStatusMinutes{}

// BuildStatusMinutes Build minutes information
type BuildStatusMinutes struct {
	Current *int64 `json:"current,omitempty"`
	Previous *int64 `json:"previous,omitempty"`
	PeriodStartDate *time.Time `json:"period_start_date,omitempty"`
	PeriodEndDate *time.Time `json:"period_end_date,omitempty"`
	LastUpdatedAt *time.Time `json:"last_updated_at,omitempty"`
	IncludedMinutes *int64 `json:"included_minutes,omitempty"`
	IncludedMinutesWithPacks *int64 `json:"included_minutes_with_packs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BuildStatusMinutes BuildStatusMinutes

// NewBuildStatusMinutes instantiates a new BuildStatusMinutes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildStatusMinutes() *BuildStatusMinutes {
	this := BuildStatusMinutes{}
	return &this
}

// NewBuildStatusMinutesWithDefaults instantiates a new BuildStatusMinutes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildStatusMinutesWithDefaults() *BuildStatusMinutes {
	this := BuildStatusMinutes{}
	return &this
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *BuildStatusMinutes) GetCurrent() int64 {
	if o == nil || IsNil(o.Current) {
		var ret int64
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildStatusMinutes) GetCurrentOk() (*int64, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *BuildStatusMinutes) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given int64 and assigns it to the Current field.
func (o *BuildStatusMinutes) SetCurrent(v int64) {
	o.Current = &v
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *BuildStatusMinutes) GetPrevious() int64 {
	if o == nil || IsNil(o.Previous) {
		var ret int64
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildStatusMinutes) GetPreviousOk() (*int64, bool) {
	if o == nil || IsNil(o.Previous) {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *BuildStatusMinutes) HasPrevious() bool {
	if o != nil && !IsNil(o.Previous) {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given int64 and assigns it to the Previous field.
func (o *BuildStatusMinutes) SetPrevious(v int64) {
	o.Previous = &v
}

// GetPeriodStartDate returns the PeriodStartDate field value if set, zero value otherwise.
func (o *BuildStatusMinutes) GetPeriodStartDate() time.Time {
	if o == nil || IsNil(o.PeriodStartDate) {
		var ret time.Time
		return ret
	}
	return *o.PeriodStartDate
}

// GetPeriodStartDateOk returns a tuple with the PeriodStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildStatusMinutes) GetPeriodStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PeriodStartDate) {
		return nil, false
	}
	return o.PeriodStartDate, true
}

// HasPeriodStartDate returns a boolean if a field has been set.
func (o *BuildStatusMinutes) HasPeriodStartDate() bool {
	if o != nil && !IsNil(o.PeriodStartDate) {
		return true
	}

	return false
}

// SetPeriodStartDate gets a reference to the given time.Time and assigns it to the PeriodStartDate field.
func (o *BuildStatusMinutes) SetPeriodStartDate(v time.Time) {
	o.PeriodStartDate = &v
}

// GetPeriodEndDate returns the PeriodEndDate field value if set, zero value otherwise.
func (o *BuildStatusMinutes) GetPeriodEndDate() time.Time {
	if o == nil || IsNil(o.PeriodEndDate) {
		var ret time.Time
		return ret
	}
	return *o.PeriodEndDate
}

// GetPeriodEndDateOk returns a tuple with the PeriodEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildStatusMinutes) GetPeriodEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PeriodEndDate) {
		return nil, false
	}
	return o.PeriodEndDate, true
}

// HasPeriodEndDate returns a boolean if a field has been set.
func (o *BuildStatusMinutes) HasPeriodEndDate() bool {
	if o != nil && !IsNil(o.PeriodEndDate) {
		return true
	}

	return false
}

// SetPeriodEndDate gets a reference to the given time.Time and assigns it to the PeriodEndDate field.
func (o *BuildStatusMinutes) SetPeriodEndDate(v time.Time) {
	o.PeriodEndDate = &v
}

// GetLastUpdatedAt returns the LastUpdatedAt field value if set, zero value otherwise.
func (o *BuildStatusMinutes) GetLastUpdatedAt() time.Time {
	if o == nil || IsNil(o.LastUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedAt
}

// GetLastUpdatedAtOk returns a tuple with the LastUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildStatusMinutes) GetLastUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdatedAt) {
		return nil, false
	}
	return o.LastUpdatedAt, true
}

// HasLastUpdatedAt returns a boolean if a field has been set.
func (o *BuildStatusMinutes) HasLastUpdatedAt() bool {
	if o != nil && !IsNil(o.LastUpdatedAt) {
		return true
	}

	return false
}

// SetLastUpdatedAt gets a reference to the given time.Time and assigns it to the LastUpdatedAt field.
func (o *BuildStatusMinutes) SetLastUpdatedAt(v time.Time) {
	o.LastUpdatedAt = &v
}

// GetIncludedMinutes returns the IncludedMinutes field value if set, zero value otherwise.
func (o *BuildStatusMinutes) GetIncludedMinutes() int64 {
	if o == nil || IsNil(o.IncludedMinutes) {
		var ret int64
		return ret
	}
	return *o.IncludedMinutes
}

// GetIncludedMinutesOk returns a tuple with the IncludedMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildStatusMinutes) GetIncludedMinutesOk() (*int64, bool) {
	if o == nil || IsNil(o.IncludedMinutes) {
		return nil, false
	}
	return o.IncludedMinutes, true
}

// HasIncludedMinutes returns a boolean if a field has been set.
func (o *BuildStatusMinutes) HasIncludedMinutes() bool {
	if o != nil && !IsNil(o.IncludedMinutes) {
		return true
	}

	return false
}

// SetIncludedMinutes gets a reference to the given int64 and assigns it to the IncludedMinutes field.
func (o *BuildStatusMinutes) SetIncludedMinutes(v int64) {
	o.IncludedMinutes = &v
}

// GetIncludedMinutesWithPacks returns the IncludedMinutesWithPacks field value if set, zero value otherwise.
func (o *BuildStatusMinutes) GetIncludedMinutesWithPacks() int64 {
	if o == nil || IsNil(o.IncludedMinutesWithPacks) {
		var ret int64
		return ret
	}
	return *o.IncludedMinutesWithPacks
}

// GetIncludedMinutesWithPacksOk returns a tuple with the IncludedMinutesWithPacks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildStatusMinutes) GetIncludedMinutesWithPacksOk() (*int64, bool) {
	if o == nil || IsNil(o.IncludedMinutesWithPacks) {
		return nil, false
	}
	return o.IncludedMinutesWithPacks, true
}

// HasIncludedMinutesWithPacks returns a boolean if a field has been set.
func (o *BuildStatusMinutes) HasIncludedMinutesWithPacks() bool {
	if o != nil && !IsNil(o.IncludedMinutesWithPacks) {
		return true
	}

	return false
}

// SetIncludedMinutesWithPacks gets a reference to the given int64 and assigns it to the IncludedMinutesWithPacks field.
func (o *BuildStatusMinutes) SetIncludedMinutesWithPacks(v int64) {
	o.IncludedMinutesWithPacks = &v
}

func (o BuildStatusMinutes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildStatusMinutes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	if !IsNil(o.Previous) {
		toSerialize["previous"] = o.Previous
	}
	if !IsNil(o.PeriodStartDate) {
		toSerialize["period_start_date"] = o.PeriodStartDate
	}
	if !IsNil(o.PeriodEndDate) {
		toSerialize["period_end_date"] = o.PeriodEndDate
	}
	if !IsNil(o.LastUpdatedAt) {
		toSerialize["last_updated_at"] = o.LastUpdatedAt
	}
	if !IsNil(o.IncludedMinutes) {
		toSerialize["included_minutes"] = o.IncludedMinutes
	}
	if !IsNil(o.IncludedMinutesWithPacks) {
		toSerialize["included_minutes_with_packs"] = o.IncludedMinutesWithPacks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BuildStatusMinutes) UnmarshalJSON(data []byte) (err error) {
	varBuildStatusMinutes := _BuildStatusMinutes{}

	err = json.Unmarshal(data, &varBuildStatusMinutes)

	if err != nil {
		return err
	}

	*o = BuildStatusMinutes(varBuildStatusMinutes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "current")
		delete(additionalProperties, "previous")
		delete(additionalProperties, "period_start_date")
		delete(additionalProperties, "period_end_date")
		delete(additionalProperties, "last_updated_at")
		delete(additionalProperties, "included_minutes")
		delete(additionalProperties, "included_minutes_with_packs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBuildStatusMinutes struct {
	value *BuildStatusMinutes
	isSet bool
}

func (v NullableBuildStatusMinutes) Get() *BuildStatusMinutes {
	return v.value
}

func (v *NullableBuildStatusMinutes) Set(val *BuildStatusMinutes) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildStatusMinutes) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildStatusMinutes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildStatusMinutes(val *BuildStatusMinutes) *NullableBuildStatusMinutes {
	return &NullableBuildStatusMinutes{value: val, isSet: true}
}

func (v NullableBuildStatusMinutes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildStatusMinutes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


