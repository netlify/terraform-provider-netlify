/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Deploy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Deploy{}

// Deploy Deploy model definition
type Deploy struct {
	// The deploy ID
	Id string `json:"id"`
	// The site ID
	SiteId string `json:"site_id"`
	// The build ID
	BuildId string `json:"build_id"`
	// The state of the deploy
	State string `json:"state"`
	// The site name
	Name string `json:"name"`
	// The HTTP URL of the production deploy
	Url string `json:"url"`
	// The HTTPS URL of the production deploy
	SslUrl string `json:"ssl_url"`
	// The URL of the deploy in the Netlify UI
	AdminUrl string `json:"admin_url"`
	// The HTTP URL of the Deploy Preview
	DeployUrl string `json:"deploy_url"`
	// The HTTPS URL of the Deploy Preview
	DeploySslUrl string `json:"deploy_ssl_url"`
	// When the deploy was created
	CreatedAt time.Time `json:"created_at"`
	// When the deploy was updated
	UpdatedAt time.Time `json:"updated_at"`
	// The user ID of the deploy's site owner
	UserId string `json:"user_id"`
	// The error message, if an error occurred during the deploy
	ErrorMessage string `json:"error_message"`
	// An array of required files that need to be uploaded to complete the deploy
	Required []string `json:"required"`
	// An array of required functions that need to be uploaded to complete the deploy
	RequiredFunctions []string `json:"required_functions"`
	// The git commit SHA
	CommitRef string `json:"commit_ref"`
	// The pull request or merge request number
	ReviewId int64 `json:"review_id"`
	// The git branch name of the deploy
	Branch string `json:"branch"`
	// The URL for the commit of the deploy
	CommitUrl string `json:"commit_url"`
	// Whether the deploy has been skipped
	Skipped bool `json:"skipped"`
	// Whether the deploy has been locked
	Locked bool `json:"locked"`
	// The title of the pull request or merge request
	Title string `json:"title"`
	// The latest commit message for the pull request or merge request
	CommitMessage string `json:"commit_message"`
	// The URL of the pull request or merge request
	ReviewUrl string `json:"review_url"`
	// When the deploy was published to production
	PublishedAt time.Time `json:"published_at"`
	// The deploy context
	Context string `json:"context"`
	// The total time, in seconds, it took to deploy
	DeployTime int64 `json:"deploy_time"`
	// An array of available functions
	AvailableFunctions []string `json:"available_functions"`
	// The URL of the screenshot of the deploy
	ScreenshotUrl string `json:"screenshot_url"`
	// The username of the committer on GitHub, GitLab, or BitBucket
	Committer string `json:"committer"`
	// Whether the build logs have been skipped
	SkippedLog bool `json:"skipped_log"`
	// Whether the deploy was deployed manually
	ManualDeploy bool `json:"manual_deploy"`
	// The state of the deploy's plugins
	PluginState string `json:"plugin_state"`
	// The frontend framework detected, if any
	Framework string `json:"framework"`
	// The initial route of the Deploy Preview
	EntryPath string `json:"entry_path"`
	Summary DeploySummary `json:"summary"`
	// The number of times the deploy has been viewed
	ViewsCount int64 `json:"views_count"`
	// An array of function schedules
	FunctionSchedules []CreateSiteDeployRequestFunctionSchedulesInner `json:"function_schedules"`
	// Whether the deploy includes at least one Edge Function
	EdgeFunctionsPresent *bool `json:"edge_functions_present,omitempty"`
	// The date at which the deploy will be soft-deleted
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Deploy Deploy

// NewDeploy instantiates a new Deploy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploy(id string, siteId string, buildId string, state string, name string, url string, sslUrl string, adminUrl string, deployUrl string, deploySslUrl string, createdAt time.Time, updatedAt time.Time, userId string, errorMessage string, required []string, requiredFunctions []string, commitRef string, reviewId int64, branch string, commitUrl string, skipped bool, locked bool, title string, commitMessage string, reviewUrl string, publishedAt time.Time, context string, deployTime int64, availableFunctions []string, screenshotUrl string, committer string, skippedLog bool, manualDeploy bool, pluginState string, framework string, entryPath string, summary DeploySummary, viewsCount int64, functionSchedules []CreateSiteDeployRequestFunctionSchedulesInner) *Deploy {
	this := Deploy{}
	this.Id = id
	this.SiteId = siteId
	this.BuildId = buildId
	this.State = state
	this.Name = name
	this.Url = url
	this.SslUrl = sslUrl
	this.AdminUrl = adminUrl
	this.DeployUrl = deployUrl
	this.DeploySslUrl = deploySslUrl
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.UserId = userId
	this.ErrorMessage = errorMessage
	this.Required = required
	this.RequiredFunctions = requiredFunctions
	this.CommitRef = commitRef
	this.ReviewId = reviewId
	this.Branch = branch
	this.CommitUrl = commitUrl
	this.Skipped = skipped
	this.Locked = locked
	this.Title = title
	this.CommitMessage = commitMessage
	this.ReviewUrl = reviewUrl
	this.PublishedAt = publishedAt
	this.Context = context
	this.DeployTime = deployTime
	this.AvailableFunctions = availableFunctions
	this.ScreenshotUrl = screenshotUrl
	this.Committer = committer
	this.SkippedLog = skippedLog
	this.ManualDeploy = manualDeploy
	this.PluginState = pluginState
	this.Framework = framework
	this.EntryPath = entryPath
	this.Summary = summary
	this.ViewsCount = viewsCount
	this.FunctionSchedules = functionSchedules
	return &this
}

// NewDeployWithDefaults instantiates a new Deploy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployWithDefaults() *Deploy {
	this := Deploy{}
	return &this
}

// GetId returns the Id field value
func (o *Deploy) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Deploy) SetId(v string) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *Deploy) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *Deploy) SetSiteId(v string) {
	o.SiteId = v
}

// GetBuildId returns the BuildId field value
func (o *Deploy) GetBuildId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildId
}

// GetBuildIdOk returns a tuple with the BuildId field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetBuildIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildId, true
}

// SetBuildId sets field value
func (o *Deploy) SetBuildId(v string) {
	o.BuildId = v
}

// GetState returns the State field value
func (o *Deploy) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Deploy) SetState(v string) {
	o.State = v
}

// GetName returns the Name field value
func (o *Deploy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Deploy) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *Deploy) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Deploy) SetUrl(v string) {
	o.Url = v
}

// GetSslUrl returns the SslUrl field value
func (o *Deploy) GetSslUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SslUrl
}

// GetSslUrlOk returns a tuple with the SslUrl field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetSslUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SslUrl, true
}

// SetSslUrl sets field value
func (o *Deploy) SetSslUrl(v string) {
	o.SslUrl = v
}

// GetAdminUrl returns the AdminUrl field value
func (o *Deploy) GetAdminUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminUrl
}

// GetAdminUrlOk returns a tuple with the AdminUrl field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetAdminUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminUrl, true
}

// SetAdminUrl sets field value
func (o *Deploy) SetAdminUrl(v string) {
	o.AdminUrl = v
}

// GetDeployUrl returns the DeployUrl field value
func (o *Deploy) GetDeployUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployUrl
}

// GetDeployUrlOk returns a tuple with the DeployUrl field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetDeployUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployUrl, true
}

// SetDeployUrl sets field value
func (o *Deploy) SetDeployUrl(v string) {
	o.DeployUrl = v
}

// GetDeploySslUrl returns the DeploySslUrl field value
func (o *Deploy) GetDeploySslUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploySslUrl
}

// GetDeploySslUrlOk returns a tuple with the DeploySslUrl field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetDeploySslUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploySslUrl, true
}

// SetDeploySslUrl sets field value
func (o *Deploy) SetDeploySslUrl(v string) {
	o.DeploySslUrl = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Deploy) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Deploy) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Deploy) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Deploy) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUserId returns the UserId field value
func (o *Deploy) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Deploy) SetUserId(v string) {
	o.UserId = v
}

// GetErrorMessage returns the ErrorMessage field value
func (o *Deploy) GetErrorMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorMessage, true
}

// SetErrorMessage sets field value
func (o *Deploy) SetErrorMessage(v string) {
	o.ErrorMessage = v
}

// GetRequired returns the Required field value
func (o *Deploy) GetRequired() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetRequiredOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Required, true
}

// SetRequired sets field value
func (o *Deploy) SetRequired(v []string) {
	o.Required = v
}

// GetRequiredFunctions returns the RequiredFunctions field value
func (o *Deploy) GetRequiredFunctions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RequiredFunctions
}

// GetRequiredFunctionsOk returns a tuple with the RequiredFunctions field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetRequiredFunctionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredFunctions, true
}

// SetRequiredFunctions sets field value
func (o *Deploy) SetRequiredFunctions(v []string) {
	o.RequiredFunctions = v
}

// GetCommitRef returns the CommitRef field value
func (o *Deploy) GetCommitRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitRef
}

// GetCommitRefOk returns a tuple with the CommitRef field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetCommitRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitRef, true
}

// SetCommitRef sets field value
func (o *Deploy) SetCommitRef(v string) {
	o.CommitRef = v
}

// GetReviewId returns the ReviewId field value
func (o *Deploy) GetReviewId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ReviewId
}

// GetReviewIdOk returns a tuple with the ReviewId field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetReviewIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReviewId, true
}

// SetReviewId sets field value
func (o *Deploy) SetReviewId(v int64) {
	o.ReviewId = v
}

// GetBranch returns the Branch field value
func (o *Deploy) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *Deploy) SetBranch(v string) {
	o.Branch = v
}

// GetCommitUrl returns the CommitUrl field value
func (o *Deploy) GetCommitUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitUrl
}

// GetCommitUrlOk returns a tuple with the CommitUrl field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetCommitUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitUrl, true
}

// SetCommitUrl sets field value
func (o *Deploy) SetCommitUrl(v string) {
	o.CommitUrl = v
}

// GetSkipped returns the Skipped field value
func (o *Deploy) GetSkipped() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Skipped
}

// GetSkippedOk returns a tuple with the Skipped field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetSkippedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Skipped, true
}

// SetSkipped sets field value
func (o *Deploy) SetSkipped(v bool) {
	o.Skipped = v
}

// GetLocked returns the Locked field value
func (o *Deploy) GetLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Locked
}

// GetLockedOk returns a tuple with the Locked field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locked, true
}

// SetLocked sets field value
func (o *Deploy) SetLocked(v bool) {
	o.Locked = v
}

// GetTitle returns the Title field value
func (o *Deploy) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Deploy) SetTitle(v string) {
	o.Title = v
}

// GetCommitMessage returns the CommitMessage field value
func (o *Deploy) GetCommitMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetCommitMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitMessage, true
}

// SetCommitMessage sets field value
func (o *Deploy) SetCommitMessage(v string) {
	o.CommitMessage = v
}

// GetReviewUrl returns the ReviewUrl field value
func (o *Deploy) GetReviewUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReviewUrl
}

// GetReviewUrlOk returns a tuple with the ReviewUrl field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetReviewUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReviewUrl, true
}

// SetReviewUrl sets field value
func (o *Deploy) SetReviewUrl(v string) {
	o.ReviewUrl = v
}

// GetPublishedAt returns the PublishedAt field value
func (o *Deploy) GetPublishedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PublishedAt
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetPublishedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublishedAt, true
}

// SetPublishedAt sets field value
func (o *Deploy) SetPublishedAt(v time.Time) {
	o.PublishedAt = v
}

// GetContext returns the Context field value
func (o *Deploy) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *Deploy) SetContext(v string) {
	o.Context = v
}

// GetDeployTime returns the DeployTime field value
func (o *Deploy) GetDeployTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DeployTime
}

// GetDeployTimeOk returns a tuple with the DeployTime field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetDeployTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployTime, true
}

// SetDeployTime sets field value
func (o *Deploy) SetDeployTime(v int64) {
	o.DeployTime = v
}

// GetAvailableFunctions returns the AvailableFunctions field value
func (o *Deploy) GetAvailableFunctions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AvailableFunctions
}

// GetAvailableFunctionsOk returns a tuple with the AvailableFunctions field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetAvailableFunctionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailableFunctions, true
}

// SetAvailableFunctions sets field value
func (o *Deploy) SetAvailableFunctions(v []string) {
	o.AvailableFunctions = v
}

// GetScreenshotUrl returns the ScreenshotUrl field value
func (o *Deploy) GetScreenshotUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScreenshotUrl
}

// GetScreenshotUrlOk returns a tuple with the ScreenshotUrl field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetScreenshotUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScreenshotUrl, true
}

// SetScreenshotUrl sets field value
func (o *Deploy) SetScreenshotUrl(v string) {
	o.ScreenshotUrl = v
}

// GetCommitter returns the Committer field value
func (o *Deploy) GetCommitter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetCommitterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Committer, true
}

// SetCommitter sets field value
func (o *Deploy) SetCommitter(v string) {
	o.Committer = v
}

// GetSkippedLog returns the SkippedLog field value
func (o *Deploy) GetSkippedLog() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SkippedLog
}

// GetSkippedLogOk returns a tuple with the SkippedLog field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetSkippedLogOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SkippedLog, true
}

// SetSkippedLog sets field value
func (o *Deploy) SetSkippedLog(v bool) {
	o.SkippedLog = v
}

// GetManualDeploy returns the ManualDeploy field value
func (o *Deploy) GetManualDeploy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ManualDeploy
}

// GetManualDeployOk returns a tuple with the ManualDeploy field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetManualDeployOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManualDeploy, true
}

// SetManualDeploy sets field value
func (o *Deploy) SetManualDeploy(v bool) {
	o.ManualDeploy = v
}

// GetPluginState returns the PluginState field value
func (o *Deploy) GetPluginState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PluginState
}

// GetPluginStateOk returns a tuple with the PluginState field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetPluginStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PluginState, true
}

// SetPluginState sets field value
func (o *Deploy) SetPluginState(v string) {
	o.PluginState = v
}

// GetFramework returns the Framework field value
func (o *Deploy) GetFramework() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Framework
}

// GetFrameworkOk returns a tuple with the Framework field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetFrameworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Framework, true
}

// SetFramework sets field value
func (o *Deploy) SetFramework(v string) {
	o.Framework = v
}

// GetEntryPath returns the EntryPath field value
func (o *Deploy) GetEntryPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntryPath
}

// GetEntryPathOk returns a tuple with the EntryPath field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetEntryPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntryPath, true
}

// SetEntryPath sets field value
func (o *Deploy) SetEntryPath(v string) {
	o.EntryPath = v
}

// GetSummary returns the Summary field value
func (o *Deploy) GetSummary() DeploySummary {
	if o == nil {
		var ret DeploySummary
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetSummaryOk() (*DeploySummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *Deploy) SetSummary(v DeploySummary) {
	o.Summary = v
}

// GetViewsCount returns the ViewsCount field value
func (o *Deploy) GetViewsCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ViewsCount
}

// GetViewsCountOk returns a tuple with the ViewsCount field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetViewsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewsCount, true
}

// SetViewsCount sets field value
func (o *Deploy) SetViewsCount(v int64) {
	o.ViewsCount = v
}

// GetFunctionSchedules returns the FunctionSchedules field value
func (o *Deploy) GetFunctionSchedules() []CreateSiteDeployRequestFunctionSchedulesInner {
	if o == nil {
		var ret []CreateSiteDeployRequestFunctionSchedulesInner
		return ret
	}

	return o.FunctionSchedules
}

// GetFunctionSchedulesOk returns a tuple with the FunctionSchedules field value
// and a boolean to check if the value has been set.
func (o *Deploy) GetFunctionSchedulesOk() ([]CreateSiteDeployRequestFunctionSchedulesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.FunctionSchedules, true
}

// SetFunctionSchedules sets field value
func (o *Deploy) SetFunctionSchedules(v []CreateSiteDeployRequestFunctionSchedulesInner) {
	o.FunctionSchedules = v
}

// GetEdgeFunctionsPresent returns the EdgeFunctionsPresent field value if set, zero value otherwise.
func (o *Deploy) GetEdgeFunctionsPresent() bool {
	if o == nil || IsNil(o.EdgeFunctionsPresent) {
		var ret bool
		return ret
	}
	return *o.EdgeFunctionsPresent
}

// GetEdgeFunctionsPresentOk returns a tuple with the EdgeFunctionsPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deploy) GetEdgeFunctionsPresentOk() (*bool, bool) {
	if o == nil || IsNil(o.EdgeFunctionsPresent) {
		return nil, false
	}
	return o.EdgeFunctionsPresent, true
}

// HasEdgeFunctionsPresent returns a boolean if a field has been set.
func (o *Deploy) HasEdgeFunctionsPresent() bool {
	if o != nil && !IsNil(o.EdgeFunctionsPresent) {
		return true
	}

	return false
}

// SetEdgeFunctionsPresent gets a reference to the given bool and assigns it to the EdgeFunctionsPresent field.
func (o *Deploy) SetEdgeFunctionsPresent(v bool) {
	o.EdgeFunctionsPresent = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *Deploy) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deploy) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *Deploy) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *Deploy) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

func (o Deploy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Deploy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["site_id"] = o.SiteId
	toSerialize["build_id"] = o.BuildId
	toSerialize["state"] = o.State
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	toSerialize["ssl_url"] = o.SslUrl
	toSerialize["admin_url"] = o.AdminUrl
	toSerialize["deploy_url"] = o.DeployUrl
	toSerialize["deploy_ssl_url"] = o.DeploySslUrl
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["user_id"] = o.UserId
	toSerialize["error_message"] = o.ErrorMessage
	toSerialize["required"] = o.Required
	toSerialize["required_functions"] = o.RequiredFunctions
	toSerialize["commit_ref"] = o.CommitRef
	toSerialize["review_id"] = o.ReviewId
	toSerialize["branch"] = o.Branch
	toSerialize["commit_url"] = o.CommitUrl
	toSerialize["skipped"] = o.Skipped
	toSerialize["locked"] = o.Locked
	toSerialize["title"] = o.Title
	toSerialize["commit_message"] = o.CommitMessage
	toSerialize["review_url"] = o.ReviewUrl
	toSerialize["published_at"] = o.PublishedAt
	toSerialize["context"] = o.Context
	toSerialize["deploy_time"] = o.DeployTime
	toSerialize["available_functions"] = o.AvailableFunctions
	toSerialize["screenshot_url"] = o.ScreenshotUrl
	toSerialize["committer"] = o.Committer
	toSerialize["skipped_log"] = o.SkippedLog
	toSerialize["manual_deploy"] = o.ManualDeploy
	toSerialize["plugin_state"] = o.PluginState
	toSerialize["framework"] = o.Framework
	toSerialize["entry_path"] = o.EntryPath
	toSerialize["summary"] = o.Summary
	toSerialize["views_count"] = o.ViewsCount
	toSerialize["function_schedules"] = o.FunctionSchedules
	if !IsNil(o.EdgeFunctionsPresent) {
		toSerialize["edge_functions_present"] = o.EdgeFunctionsPresent
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Deploy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"site_id",
		"build_id",
		"state",
		"name",
		"url",
		"ssl_url",
		"admin_url",
		"deploy_url",
		"deploy_ssl_url",
		"created_at",
		"updated_at",
		"user_id",
		"error_message",
		"required",
		"required_functions",
		"commit_ref",
		"review_id",
		"branch",
		"commit_url",
		"skipped",
		"locked",
		"title",
		"commit_message",
		"review_url",
		"published_at",
		"context",
		"deploy_time",
		"available_functions",
		"screenshot_url",
		"committer",
		"skipped_log",
		"manual_deploy",
		"plugin_state",
		"framework",
		"entry_path",
		"summary",
		"views_count",
		"function_schedules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploy := _Deploy{}

	err = json.Unmarshal(data, &varDeploy)

	if err != nil {
		return err
	}

	*o = Deploy(varDeploy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "build_id")
		delete(additionalProperties, "state")
		delete(additionalProperties, "name")
		delete(additionalProperties, "url")
		delete(additionalProperties, "ssl_url")
		delete(additionalProperties, "admin_url")
		delete(additionalProperties, "deploy_url")
		delete(additionalProperties, "deploy_ssl_url")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "error_message")
		delete(additionalProperties, "required")
		delete(additionalProperties, "required_functions")
		delete(additionalProperties, "commit_ref")
		delete(additionalProperties, "review_id")
		delete(additionalProperties, "branch")
		delete(additionalProperties, "commit_url")
		delete(additionalProperties, "skipped")
		delete(additionalProperties, "locked")
		delete(additionalProperties, "title")
		delete(additionalProperties, "commit_message")
		delete(additionalProperties, "review_url")
		delete(additionalProperties, "published_at")
		delete(additionalProperties, "context")
		delete(additionalProperties, "deploy_time")
		delete(additionalProperties, "available_functions")
		delete(additionalProperties, "screenshot_url")
		delete(additionalProperties, "committer")
		delete(additionalProperties, "skipped_log")
		delete(additionalProperties, "manual_deploy")
		delete(additionalProperties, "plugin_state")
		delete(additionalProperties, "framework")
		delete(additionalProperties, "entry_path")
		delete(additionalProperties, "summary")
		delete(additionalProperties, "views_count")
		delete(additionalProperties, "function_schedules")
		delete(additionalProperties, "edge_functions_present")
		delete(additionalProperties, "expires_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploy struct {
	value *Deploy
	isSet bool
}

func (v NullableDeploy) Get() *Deploy {
	return v.value
}

func (v *NullableDeploy) Set(val *Deploy) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploy) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploy(val *Deploy) *NullableDeploy {
	return &NullableDeploy{value: val, isSet: true}
}

func (v NullableDeploy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


