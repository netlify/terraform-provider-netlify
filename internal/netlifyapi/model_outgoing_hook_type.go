/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the OutgoingHookType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutgoingHookType{}

// OutgoingHookType struct for OutgoingHookType
type OutgoingHookType struct {
	// The name of the hook type
	Name *string `json:"name,omitempty"`
	// The list of available events for this type
	Events []string `json:"events,omitempty"`
	// The list of fields this hook type can take
	Fields []OutgoingHookTypeFieldsInner `json:"fields,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OutgoingHookType OutgoingHookType

// NewOutgoingHookType instantiates a new OutgoingHookType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutgoingHookType() *OutgoingHookType {
	this := OutgoingHookType{}
	return &this
}

// NewOutgoingHookTypeWithDefaults instantiates a new OutgoingHookType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutgoingHookTypeWithDefaults() *OutgoingHookType {
	this := OutgoingHookType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OutgoingHookType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingHookType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OutgoingHookType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OutgoingHookType) SetName(v string) {
	o.Name = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *OutgoingHookType) GetEvents() []string {
	if o == nil || IsNil(o.Events) {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingHookType) GetEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *OutgoingHookType) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *OutgoingHookType) SetEvents(v []string) {
	o.Events = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *OutgoingHookType) GetFields() []OutgoingHookTypeFieldsInner {
	if o == nil || IsNil(o.Fields) {
		var ret []OutgoingHookTypeFieldsInner
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutgoingHookType) GetFieldsOk() ([]OutgoingHookTypeFieldsInner, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *OutgoingHookType) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []OutgoingHookTypeFieldsInner and assigns it to the Fields field.
func (o *OutgoingHookType) SetFields(v []OutgoingHookTypeFieldsInner) {
	o.Fields = v
}

func (o OutgoingHookType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutgoingHookType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OutgoingHookType) UnmarshalJSON(data []byte) (err error) {
	varOutgoingHookType := _OutgoingHookType{}

	err = json.Unmarshal(data, &varOutgoingHookType)

	if err != nil {
		return err
	}

	*o = OutgoingHookType(varOutgoingHookType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "events")
		delete(additionalProperties, "fields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOutgoingHookType struct {
	value *OutgoingHookType
	isSet bool
}

func (v NullableOutgoingHookType) Get() *OutgoingHookType {
	return v.value
}

func (v *NullableOutgoingHookType) Set(val *OutgoingHookType) {
	v.value = val
	v.isSet = true
}

func (v NullableOutgoingHookType) IsSet() bool {
	return v.isSet
}

func (v *NullableOutgoingHookType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutgoingHookType(val *OutgoingHookType) *NullableOutgoingHookType {
	return &NullableOutgoingHookType{value: val, isSet: true}
}

func (v NullableOutgoingHookType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutgoingHookType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


