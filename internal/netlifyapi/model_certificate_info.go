/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the CertificateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateInfo{}

// CertificateInfo struct for CertificateInfo
type CertificateInfo struct {
	Certificate *string `json:"certificate,omitempty"`
	Key *string `json:"key,omitempty"`
	CaCertificates *string `json:"ca_certificates,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateInfo CertificateInfo

// NewCertificateInfo instantiates a new CertificateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateInfo() *CertificateInfo {
	this := CertificateInfo{}
	return &this
}

// NewCertificateInfoWithDefaults instantiates a new CertificateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateInfoWithDefaults() *CertificateInfo {
	this := CertificateInfo{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CertificateInfo) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CertificateInfo) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *CertificateInfo) SetCertificate(v string) {
	o.Certificate = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *CertificateInfo) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *CertificateInfo) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *CertificateInfo) SetKey(v string) {
	o.Key = &v
}

// GetCaCertificates returns the CaCertificates field value if set, zero value otherwise.
func (o *CertificateInfo) GetCaCertificates() string {
	if o == nil || IsNil(o.CaCertificates) {
		var ret string
		return ret
	}
	return *o.CaCertificates
}

// GetCaCertificatesOk returns a tuple with the CaCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetCaCertificatesOk() (*string, bool) {
	if o == nil || IsNil(o.CaCertificates) {
		return nil, false
	}
	return o.CaCertificates, true
}

// HasCaCertificates returns a boolean if a field has been set.
func (o *CertificateInfo) HasCaCertificates() bool {
	if o != nil && !IsNil(o.CaCertificates) {
		return true
	}

	return false
}

// SetCaCertificates gets a reference to the given string and assigns it to the CaCertificates field.
func (o *CertificateInfo) SetCaCertificates(v string) {
	o.CaCertificates = &v
}

func (o CertificateInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.CaCertificates) {
		toSerialize["ca_certificates"] = o.CaCertificates
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateInfo) UnmarshalJSON(data []byte) (err error) {
	varCertificateInfo := _CertificateInfo{}

	err = json.Unmarshal(data, &varCertificateInfo)

	if err != nil {
		return err
	}

	*o = CertificateInfo(varCertificateInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "key")
		delete(additionalProperties, "ca_certificates")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateInfo struct {
	value *CertificateInfo
	isSet bool
}

func (v NullableCertificateInfo) Get() *CertificateInfo {
	return v.value
}

func (v *NullableCertificateInfo) Set(val *CertificateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateInfo(val *CertificateInfo) *NullableCertificateInfo {
	return &NullableCertificateInfo{value: val, isSet: true}
}

func (v NullableCertificateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


