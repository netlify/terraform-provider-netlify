/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the HeroAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroAccount{}

// HeroAccount HeroAccount model definition, see AccountUserMembershipSerializer for other fields
type HeroAccount struct {
	AdminUrl string `json:"admin_url"`
	BuildNodePool string `json:"build_node_pool"`
	BuildPreProcessTimeout int64 `json:"build_pre_process_timeout"`
	BuildResources map[string]interface{} `json:"build_resources"`
	BuildTimelimit int64 `json:"build_timelimit"`
	DevServerResources map[string]interface{} `json:"dev_server_resources"`
	ConcurrentUploadLimit int64 `json:"concurrent_upload_limit"`
	FunctionsConfig map[string]interface{} `json:"functions_config"`
	ZuoraUrl string `json:"zuora_url"`
	SitesCount int64 `json:"sites_count"`
	Dunning bool `json:"dunning"`
	EnterpriseFeatures EnterpriseFeatures `json:"enterprise_features"`
	AdditionalProperties map[string]interface{}
}

type _HeroAccount HeroAccount

// NewHeroAccount instantiates a new HeroAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroAccount(adminUrl string, buildNodePool string, buildPreProcessTimeout int64, buildResources map[string]interface{}, buildTimelimit int64, devServerResources map[string]interface{}, concurrentUploadLimit int64, functionsConfig map[string]interface{}, zuoraUrl string, sitesCount int64, dunning bool, enterpriseFeatures EnterpriseFeatures) *HeroAccount {
	this := HeroAccount{}
	this.AdminUrl = adminUrl
	this.BuildNodePool = buildNodePool
	this.BuildPreProcessTimeout = buildPreProcessTimeout
	this.BuildResources = buildResources
	this.BuildTimelimit = buildTimelimit
	this.DevServerResources = devServerResources
	this.ConcurrentUploadLimit = concurrentUploadLimit
	this.FunctionsConfig = functionsConfig
	this.ZuoraUrl = zuoraUrl
	this.SitesCount = sitesCount
	this.Dunning = dunning
	this.EnterpriseFeatures = enterpriseFeatures
	return &this
}

// NewHeroAccountWithDefaults instantiates a new HeroAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroAccountWithDefaults() *HeroAccount {
	this := HeroAccount{}
	return &this
}

// GetAdminUrl returns the AdminUrl field value
func (o *HeroAccount) GetAdminUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminUrl
}

// GetAdminUrlOk returns a tuple with the AdminUrl field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetAdminUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminUrl, true
}

// SetAdminUrl sets field value
func (o *HeroAccount) SetAdminUrl(v string) {
	o.AdminUrl = v
}

// GetBuildNodePool returns the BuildNodePool field value
func (o *HeroAccount) GetBuildNodePool() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildNodePool
}

// GetBuildNodePoolOk returns a tuple with the BuildNodePool field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetBuildNodePoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildNodePool, true
}

// SetBuildNodePool sets field value
func (o *HeroAccount) SetBuildNodePool(v string) {
	o.BuildNodePool = v
}

// GetBuildPreProcessTimeout returns the BuildPreProcessTimeout field value
func (o *HeroAccount) GetBuildPreProcessTimeout() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BuildPreProcessTimeout
}

// GetBuildPreProcessTimeoutOk returns a tuple with the BuildPreProcessTimeout field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetBuildPreProcessTimeoutOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildPreProcessTimeout, true
}

// SetBuildPreProcessTimeout sets field value
func (o *HeroAccount) SetBuildPreProcessTimeout(v int64) {
	o.BuildPreProcessTimeout = v
}

// GetBuildResources returns the BuildResources field value
func (o *HeroAccount) GetBuildResources() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.BuildResources
}

// GetBuildResourcesOk returns a tuple with the BuildResources field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetBuildResourcesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.BuildResources, true
}

// SetBuildResources sets field value
func (o *HeroAccount) SetBuildResources(v map[string]interface{}) {
	o.BuildResources = v
}

// GetBuildTimelimit returns the BuildTimelimit field value
func (o *HeroAccount) GetBuildTimelimit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BuildTimelimit
}

// GetBuildTimelimitOk returns a tuple with the BuildTimelimit field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetBuildTimelimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildTimelimit, true
}

// SetBuildTimelimit sets field value
func (o *HeroAccount) SetBuildTimelimit(v int64) {
	o.BuildTimelimit = v
}

// GetDevServerResources returns the DevServerResources field value
func (o *HeroAccount) GetDevServerResources() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.DevServerResources
}

// GetDevServerResourcesOk returns a tuple with the DevServerResources field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetDevServerResourcesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.DevServerResources, true
}

// SetDevServerResources sets field value
func (o *HeroAccount) SetDevServerResources(v map[string]interface{}) {
	o.DevServerResources = v
}

// GetConcurrentUploadLimit returns the ConcurrentUploadLimit field value
func (o *HeroAccount) GetConcurrentUploadLimit() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ConcurrentUploadLimit
}

// GetConcurrentUploadLimitOk returns a tuple with the ConcurrentUploadLimit field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetConcurrentUploadLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConcurrentUploadLimit, true
}

// SetConcurrentUploadLimit sets field value
func (o *HeroAccount) SetConcurrentUploadLimit(v int64) {
	o.ConcurrentUploadLimit = v
}

// GetFunctionsConfig returns the FunctionsConfig field value
func (o *HeroAccount) GetFunctionsConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.FunctionsConfig
}

// GetFunctionsConfigOk returns a tuple with the FunctionsConfig field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetFunctionsConfigOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.FunctionsConfig, true
}

// SetFunctionsConfig sets field value
func (o *HeroAccount) SetFunctionsConfig(v map[string]interface{}) {
	o.FunctionsConfig = v
}

// GetZuoraUrl returns the ZuoraUrl field value
func (o *HeroAccount) GetZuoraUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZuoraUrl
}

// GetZuoraUrlOk returns a tuple with the ZuoraUrl field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetZuoraUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZuoraUrl, true
}

// SetZuoraUrl sets field value
func (o *HeroAccount) SetZuoraUrl(v string) {
	o.ZuoraUrl = v
}

// GetSitesCount returns the SitesCount field value
func (o *HeroAccount) GetSitesCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SitesCount
}

// GetSitesCountOk returns a tuple with the SitesCount field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetSitesCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SitesCount, true
}

// SetSitesCount sets field value
func (o *HeroAccount) SetSitesCount(v int64) {
	o.SitesCount = v
}

// GetDunning returns the Dunning field value
func (o *HeroAccount) GetDunning() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Dunning
}

// GetDunningOk returns a tuple with the Dunning field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetDunningOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dunning, true
}

// SetDunning sets field value
func (o *HeroAccount) SetDunning(v bool) {
	o.Dunning = v
}

// GetEnterpriseFeatures returns the EnterpriseFeatures field value
func (o *HeroAccount) GetEnterpriseFeatures() EnterpriseFeatures {
	if o == nil {
		var ret EnterpriseFeatures
		return ret
	}

	return o.EnterpriseFeatures
}

// GetEnterpriseFeaturesOk returns a tuple with the EnterpriseFeatures field value
// and a boolean to check if the value has been set.
func (o *HeroAccount) GetEnterpriseFeaturesOk() (*EnterpriseFeatures, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnterpriseFeatures, true
}

// SetEnterpriseFeatures sets field value
func (o *HeroAccount) SetEnterpriseFeatures(v EnterpriseFeatures) {
	o.EnterpriseFeatures = v
}

func (o HeroAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["admin_url"] = o.AdminUrl
	toSerialize["build_node_pool"] = o.BuildNodePool
	toSerialize["build_pre_process_timeout"] = o.BuildPreProcessTimeout
	toSerialize["build_resources"] = o.BuildResources
	toSerialize["build_timelimit"] = o.BuildTimelimit
	toSerialize["dev_server_resources"] = o.DevServerResources
	toSerialize["concurrent_upload_limit"] = o.ConcurrentUploadLimit
	toSerialize["functions_config"] = o.FunctionsConfig
	toSerialize["zuora_url"] = o.ZuoraUrl
	toSerialize["sites_count"] = o.SitesCount
	toSerialize["dunning"] = o.Dunning
	toSerialize["enterprise_features"] = o.EnterpriseFeatures

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HeroAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"admin_url",
		"build_node_pool",
		"build_pre_process_timeout",
		"build_resources",
		"build_timelimit",
		"dev_server_resources",
		"concurrent_upload_limit",
		"functions_config",
		"zuora_url",
		"sites_count",
		"dunning",
		"enterprise_features",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroAccount := _HeroAccount{}

	err = json.Unmarshal(data, &varHeroAccount)

	if err != nil {
		return err
	}

	*o = HeroAccount(varHeroAccount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "admin_url")
		delete(additionalProperties, "build_node_pool")
		delete(additionalProperties, "build_pre_process_timeout")
		delete(additionalProperties, "build_resources")
		delete(additionalProperties, "build_timelimit")
		delete(additionalProperties, "dev_server_resources")
		delete(additionalProperties, "concurrent_upload_limit")
		delete(additionalProperties, "functions_config")
		delete(additionalProperties, "zuora_url")
		delete(additionalProperties, "sites_count")
		delete(additionalProperties, "dunning")
		delete(additionalProperties, "enterprise_features")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHeroAccount struct {
	value *HeroAccount
	isSet bool
}

func (v NullableHeroAccount) Get() *HeroAccount {
	return v.value
}

func (v *NullableHeroAccount) Set(val *HeroAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroAccount(val *HeroAccount) *NullableHeroAccount {
	return &NullableHeroAccount{value: val, isSet: true}
}

func (v NullableHeroAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


