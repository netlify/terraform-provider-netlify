/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the DevServerEnvironment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevServerEnvironment{}

// DevServerEnvironment struct for DevServerEnvironment
type DevServerEnvironment struct {
	// The branch of the dev server environment
	Branch *string `json:"branch,omitempty"`
	Live *DevServer `json:"live,omitempty"`
	Latest *DevServer `json:"latest,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DevServerEnvironment DevServerEnvironment

// NewDevServerEnvironment instantiates a new DevServerEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevServerEnvironment() *DevServerEnvironment {
	this := DevServerEnvironment{}
	return &this
}

// NewDevServerEnvironmentWithDefaults instantiates a new DevServerEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevServerEnvironmentWithDefaults() *DevServerEnvironment {
	this := DevServerEnvironment{}
	return &this
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *DevServerEnvironment) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServerEnvironment) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *DevServerEnvironment) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *DevServerEnvironment) SetBranch(v string) {
	o.Branch = &v
}

// GetLive returns the Live field value if set, zero value otherwise.
func (o *DevServerEnvironment) GetLive() DevServer {
	if o == nil || IsNil(o.Live) {
		var ret DevServer
		return ret
	}
	return *o.Live
}

// GetLiveOk returns a tuple with the Live field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServerEnvironment) GetLiveOk() (*DevServer, bool) {
	if o == nil || IsNil(o.Live) {
		return nil, false
	}
	return o.Live, true
}

// HasLive returns a boolean if a field has been set.
func (o *DevServerEnvironment) HasLive() bool {
	if o != nil && !IsNil(o.Live) {
		return true
	}

	return false
}

// SetLive gets a reference to the given DevServer and assigns it to the Live field.
func (o *DevServerEnvironment) SetLive(v DevServer) {
	o.Live = &v
}

// GetLatest returns the Latest field value if set, zero value otherwise.
func (o *DevServerEnvironment) GetLatest() DevServer {
	if o == nil || IsNil(o.Latest) {
		var ret DevServer
		return ret
	}
	return *o.Latest
}

// GetLatestOk returns a tuple with the Latest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServerEnvironment) GetLatestOk() (*DevServer, bool) {
	if o == nil || IsNil(o.Latest) {
		return nil, false
	}
	return o.Latest, true
}

// HasLatest returns a boolean if a field has been set.
func (o *DevServerEnvironment) HasLatest() bool {
	if o != nil && !IsNil(o.Latest) {
		return true
	}

	return false
}

// SetLatest gets a reference to the given DevServer and assigns it to the Latest field.
func (o *DevServerEnvironment) SetLatest(v DevServer) {
	o.Latest = &v
}

func (o DevServerEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevServerEnvironment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.Live) {
		toSerialize["live"] = o.Live
	}
	if !IsNil(o.Latest) {
		toSerialize["latest"] = o.Latest
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DevServerEnvironment) UnmarshalJSON(data []byte) (err error) {
	varDevServerEnvironment := _DevServerEnvironment{}

	err = json.Unmarshal(data, &varDevServerEnvironment)

	if err != nil {
		return err
	}

	*o = DevServerEnvironment(varDevServerEnvironment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "branch")
		delete(additionalProperties, "live")
		delete(additionalProperties, "latest")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDevServerEnvironment struct {
	value *DevServerEnvironment
	isSet bool
}

func (v NullableDevServerEnvironment) Get() *DevServerEnvironment {
	return v.value
}

func (v *NullableDevServerEnvironment) Set(val *DevServerEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableDevServerEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableDevServerEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevServerEnvironment(val *DevServerEnvironment) *NullableDevServerEnvironment {
	return &NullableDevServerEnvironment{value: val, isSet: true}
}

func (v NullableDevServerEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevServerEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


