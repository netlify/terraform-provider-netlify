/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the UpdateBuildHook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateBuildHook{}

// UpdateBuildHook struct for UpdateBuildHook
type UpdateBuildHook struct {
	// The title of the build hook
	Title *string `json:"title,omitempty"`
	// The branch of the build hook
	Branch *string `json:"branch,omitempty"`
	// If this build hook should be used to create draft deploys
	Draft *bool `json:"draft,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateBuildHook UpdateBuildHook

// NewUpdateBuildHook instantiates a new UpdateBuildHook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateBuildHook() *UpdateBuildHook {
	this := UpdateBuildHook{}
	return &this
}

// NewUpdateBuildHookWithDefaults instantiates a new UpdateBuildHook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateBuildHookWithDefaults() *UpdateBuildHook {
	this := UpdateBuildHook{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *UpdateBuildHook) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBuildHook) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UpdateBuildHook) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *UpdateBuildHook) SetTitle(v string) {
	o.Title = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *UpdateBuildHook) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBuildHook) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *UpdateBuildHook) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *UpdateBuildHook) SetBranch(v string) {
	o.Branch = &v
}

// GetDraft returns the Draft field value if set, zero value otherwise.
func (o *UpdateBuildHook) GetDraft() bool {
	if o == nil || IsNil(o.Draft) {
		var ret bool
		return ret
	}
	return *o.Draft
}

// GetDraftOk returns a tuple with the Draft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBuildHook) GetDraftOk() (*bool, bool) {
	if o == nil || IsNil(o.Draft) {
		return nil, false
	}
	return o.Draft, true
}

// HasDraft returns a boolean if a field has been set.
func (o *UpdateBuildHook) HasDraft() bool {
	if o != nil && !IsNil(o.Draft) {
		return true
	}

	return false
}

// SetDraft gets a reference to the given bool and assigns it to the Draft field.
func (o *UpdateBuildHook) SetDraft(v bool) {
	o.Draft = &v
}

func (o UpdateBuildHook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateBuildHook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.Draft) {
		toSerialize["draft"] = o.Draft
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateBuildHook) UnmarshalJSON(data []byte) (err error) {
	varUpdateBuildHook := _UpdateBuildHook{}

	err = json.Unmarshal(data, &varUpdateBuildHook)

	if err != nil {
		return err
	}

	*o = UpdateBuildHook(varUpdateBuildHook)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "title")
		delete(additionalProperties, "branch")
		delete(additionalProperties, "draft")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateBuildHook struct {
	value *UpdateBuildHook
	isSet bool
}

func (v NullableUpdateBuildHook) Get() *UpdateBuildHook {
	return v.value
}

func (v *NullableUpdateBuildHook) Set(val *UpdateBuildHook) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateBuildHook) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateBuildHook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateBuildHook(val *UpdateBuildHook) *NullableUpdateBuildHook {
	return &NullableUpdateBuildHook{value: val, isSet: true}
}

func (v NullableUpdateBuildHook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateBuildHook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


