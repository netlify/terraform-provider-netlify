/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the PluginCreateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginCreateParams{}

// PluginCreateParams struct for PluginCreateParams
type PluginCreateParams struct {
	// The name of the plugin package
	Package *string `json:"package,omitempty"`
	// The pinned major version for the plugin
	PinnedVersion *string `json:"pinned_version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PluginCreateParams PluginCreateParams

// NewPluginCreateParams instantiates a new PluginCreateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginCreateParams() *PluginCreateParams {
	this := PluginCreateParams{}
	return &this
}

// NewPluginCreateParamsWithDefaults instantiates a new PluginCreateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginCreateParamsWithDefaults() *PluginCreateParams {
	this := PluginCreateParams{}
	return &this
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *PluginCreateParams) GetPackage() string {
	if o == nil || IsNil(o.Package) {
		var ret string
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginCreateParams) GetPackageOk() (*string, bool) {
	if o == nil || IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *PluginCreateParams) HasPackage() bool {
	if o != nil && !IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given string and assigns it to the Package field.
func (o *PluginCreateParams) SetPackage(v string) {
	o.Package = &v
}

// GetPinnedVersion returns the PinnedVersion field value if set, zero value otherwise.
func (o *PluginCreateParams) GetPinnedVersion() string {
	if o == nil || IsNil(o.PinnedVersion) {
		var ret string
		return ret
	}
	return *o.PinnedVersion
}

// GetPinnedVersionOk returns a tuple with the PinnedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginCreateParams) GetPinnedVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PinnedVersion) {
		return nil, false
	}
	return o.PinnedVersion, true
}

// HasPinnedVersion returns a boolean if a field has been set.
func (o *PluginCreateParams) HasPinnedVersion() bool {
	if o != nil && !IsNil(o.PinnedVersion) {
		return true
	}

	return false
}

// SetPinnedVersion gets a reference to the given string and assigns it to the PinnedVersion field.
func (o *PluginCreateParams) SetPinnedVersion(v string) {
	o.PinnedVersion = &v
}

func (o PluginCreateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginCreateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Package) {
		toSerialize["package"] = o.Package
	}
	if !IsNil(o.PinnedVersion) {
		toSerialize["pinned_version"] = o.PinnedVersion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PluginCreateParams) UnmarshalJSON(data []byte) (err error) {
	varPluginCreateParams := _PluginCreateParams{}

	err = json.Unmarshal(data, &varPluginCreateParams)

	if err != nil {
		return err
	}

	*o = PluginCreateParams(varPluginCreateParams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "package")
		delete(additionalProperties, "pinned_version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePluginCreateParams struct {
	value *PluginCreateParams
	isSet bool
}

func (v NullablePluginCreateParams) Get() *PluginCreateParams {
	return v.value
}

func (v *NullablePluginCreateParams) Set(val *PluginCreateParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginCreateParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginCreateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginCreateParams(val *PluginCreateParams) *NullablePluginCreateParams {
	return &NullablePluginCreateParams{value: val, isSet: true}
}

func (v NullablePluginCreateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginCreateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


