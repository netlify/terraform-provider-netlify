/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the AccountUpdateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountUpdateParams{}

// AccountUpdateParams struct for AccountUpdateParams
type AccountUpdateParams struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
	TypeId *string `json:"type_id,omitempty"`
	PaymentMethodId *string `json:"payment_method_id,omitempty"`
	Period *string `json:"period,omitempty"`
	BillingName *string `json:"billing_name,omitempty"`
	BillingEmail *string `json:"billing_email,omitempty"`
	BillingDetails *string `json:"billing_details,omitempty"`
	FreeTrial *bool `json:"free_trial,omitempty"`
	EnforceMfa *bool `json:"enforce_mfa,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccountUpdateParams AccountUpdateParams

// NewAccountUpdateParams instantiates a new AccountUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountUpdateParams() *AccountUpdateParams {
	this := AccountUpdateParams{}
	return &this
}

// NewAccountUpdateParamsWithDefaults instantiates a new AccountUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountUpdateParamsWithDefaults() *AccountUpdateParams {
	this := AccountUpdateParams{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccountUpdateParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUpdateParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccountUpdateParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccountUpdateParams) SetName(v string) {
	o.Name = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *AccountUpdateParams) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUpdateParams) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *AccountUpdateParams) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *AccountUpdateParams) SetSlug(v string) {
	o.Slug = &v
}

// GetTypeId returns the TypeId field value if set, zero value otherwise.
func (o *AccountUpdateParams) GetTypeId() string {
	if o == nil || IsNil(o.TypeId) {
		var ret string
		return ret
	}
	return *o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUpdateParams) GetTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.TypeId) {
		return nil, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *AccountUpdateParams) HasTypeId() bool {
	if o != nil && !IsNil(o.TypeId) {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given string and assigns it to the TypeId field.
func (o *AccountUpdateParams) SetTypeId(v string) {
	o.TypeId = &v
}

// GetPaymentMethodId returns the PaymentMethodId field value if set, zero value otherwise.
func (o *AccountUpdateParams) GetPaymentMethodId() string {
	if o == nil || IsNil(o.PaymentMethodId) {
		var ret string
		return ret
	}
	return *o.PaymentMethodId
}

// GetPaymentMethodIdOk returns a tuple with the PaymentMethodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUpdateParams) GetPaymentMethodIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethodId) {
		return nil, false
	}
	return o.PaymentMethodId, true
}

// HasPaymentMethodId returns a boolean if a field has been set.
func (o *AccountUpdateParams) HasPaymentMethodId() bool {
	if o != nil && !IsNil(o.PaymentMethodId) {
		return true
	}

	return false
}

// SetPaymentMethodId gets a reference to the given string and assigns it to the PaymentMethodId field.
func (o *AccountUpdateParams) SetPaymentMethodId(v string) {
	o.PaymentMethodId = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *AccountUpdateParams) GetPeriod() string {
	if o == nil || IsNil(o.Period) {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUpdateParams) GetPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *AccountUpdateParams) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *AccountUpdateParams) SetPeriod(v string) {
	o.Period = &v
}

// GetBillingName returns the BillingName field value if set, zero value otherwise.
func (o *AccountUpdateParams) GetBillingName() string {
	if o == nil || IsNil(o.BillingName) {
		var ret string
		return ret
	}
	return *o.BillingName
}

// GetBillingNameOk returns a tuple with the BillingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUpdateParams) GetBillingNameOk() (*string, bool) {
	if o == nil || IsNil(o.BillingName) {
		return nil, false
	}
	return o.BillingName, true
}

// HasBillingName returns a boolean if a field has been set.
func (o *AccountUpdateParams) HasBillingName() bool {
	if o != nil && !IsNil(o.BillingName) {
		return true
	}

	return false
}

// SetBillingName gets a reference to the given string and assigns it to the BillingName field.
func (o *AccountUpdateParams) SetBillingName(v string) {
	o.BillingName = &v
}

// GetBillingEmail returns the BillingEmail field value if set, zero value otherwise.
func (o *AccountUpdateParams) GetBillingEmail() string {
	if o == nil || IsNil(o.BillingEmail) {
		var ret string
		return ret
	}
	return *o.BillingEmail
}

// GetBillingEmailOk returns a tuple with the BillingEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUpdateParams) GetBillingEmailOk() (*string, bool) {
	if o == nil || IsNil(o.BillingEmail) {
		return nil, false
	}
	return o.BillingEmail, true
}

// HasBillingEmail returns a boolean if a field has been set.
func (o *AccountUpdateParams) HasBillingEmail() bool {
	if o != nil && !IsNil(o.BillingEmail) {
		return true
	}

	return false
}

// SetBillingEmail gets a reference to the given string and assigns it to the BillingEmail field.
func (o *AccountUpdateParams) SetBillingEmail(v string) {
	o.BillingEmail = &v
}

// GetBillingDetails returns the BillingDetails field value if set, zero value otherwise.
func (o *AccountUpdateParams) GetBillingDetails() string {
	if o == nil || IsNil(o.BillingDetails) {
		var ret string
		return ret
	}
	return *o.BillingDetails
}

// GetBillingDetailsOk returns a tuple with the BillingDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUpdateParams) GetBillingDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.BillingDetails) {
		return nil, false
	}
	return o.BillingDetails, true
}

// HasBillingDetails returns a boolean if a field has been set.
func (o *AccountUpdateParams) HasBillingDetails() bool {
	if o != nil && !IsNil(o.BillingDetails) {
		return true
	}

	return false
}

// SetBillingDetails gets a reference to the given string and assigns it to the BillingDetails field.
func (o *AccountUpdateParams) SetBillingDetails(v string) {
	o.BillingDetails = &v
}

// GetFreeTrial returns the FreeTrial field value if set, zero value otherwise.
func (o *AccountUpdateParams) GetFreeTrial() bool {
	if o == nil || IsNil(o.FreeTrial) {
		var ret bool
		return ret
	}
	return *o.FreeTrial
}

// GetFreeTrialOk returns a tuple with the FreeTrial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUpdateParams) GetFreeTrialOk() (*bool, bool) {
	if o == nil || IsNil(o.FreeTrial) {
		return nil, false
	}
	return o.FreeTrial, true
}

// HasFreeTrial returns a boolean if a field has been set.
func (o *AccountUpdateParams) HasFreeTrial() bool {
	if o != nil && !IsNil(o.FreeTrial) {
		return true
	}

	return false
}

// SetFreeTrial gets a reference to the given bool and assigns it to the FreeTrial field.
func (o *AccountUpdateParams) SetFreeTrial(v bool) {
	o.FreeTrial = &v
}

// GetEnforceMfa returns the EnforceMfa field value if set, zero value otherwise.
func (o *AccountUpdateParams) GetEnforceMfa() bool {
	if o == nil || IsNil(o.EnforceMfa) {
		var ret bool
		return ret
	}
	return *o.EnforceMfa
}

// GetEnforceMfaOk returns a tuple with the EnforceMfa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUpdateParams) GetEnforceMfaOk() (*bool, bool) {
	if o == nil || IsNil(o.EnforceMfa) {
		return nil, false
	}
	return o.EnforceMfa, true
}

// HasEnforceMfa returns a boolean if a field has been set.
func (o *AccountUpdateParams) HasEnforceMfa() bool {
	if o != nil && !IsNil(o.EnforceMfa) {
		return true
	}

	return false
}

// SetEnforceMfa gets a reference to the given bool and assigns it to the EnforceMfa field.
func (o *AccountUpdateParams) SetEnforceMfa(v bool) {
	o.EnforceMfa = &v
}

func (o AccountUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountUpdateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	if !IsNil(o.TypeId) {
		toSerialize["type_id"] = o.TypeId
	}
	if !IsNil(o.PaymentMethodId) {
		toSerialize["payment_method_id"] = o.PaymentMethodId
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.BillingName) {
		toSerialize["billing_name"] = o.BillingName
	}
	if !IsNil(o.BillingEmail) {
		toSerialize["billing_email"] = o.BillingEmail
	}
	if !IsNil(o.BillingDetails) {
		toSerialize["billing_details"] = o.BillingDetails
	}
	if !IsNil(o.FreeTrial) {
		toSerialize["free_trial"] = o.FreeTrial
	}
	if !IsNil(o.EnforceMfa) {
		toSerialize["enforce_mfa"] = o.EnforceMfa
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountUpdateParams) UnmarshalJSON(data []byte) (err error) {
	varAccountUpdateParams := _AccountUpdateParams{}

	err = json.Unmarshal(data, &varAccountUpdateParams)

	if err != nil {
		return err
	}

	*o = AccountUpdateParams(varAccountUpdateParams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "type_id")
		delete(additionalProperties, "payment_method_id")
		delete(additionalProperties, "period")
		delete(additionalProperties, "billing_name")
		delete(additionalProperties, "billing_email")
		delete(additionalProperties, "billing_details")
		delete(additionalProperties, "free_trial")
		delete(additionalProperties, "enforce_mfa")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountUpdateParams struct {
	value *AccountUpdateParams
	isSet bool
}

func (v NullableAccountUpdateParams) Get() *AccountUpdateParams {
	return v.value
}

func (v *NullableAccountUpdateParams) Set(val *AccountUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountUpdateParams(val *AccountUpdateParams) *NullableAccountUpdateParams {
	return &NullableAccountUpdateParams{value: val, isSet: true}
}

func (v NullableAccountUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


