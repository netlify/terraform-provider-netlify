/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the FunctionRoInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionRoInner{}

// FunctionRoInner struct for FunctionRoInner
type FunctionRoInner struct {
	P *string `json:"p,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FunctionRoInner FunctionRoInner

// NewFunctionRoInner instantiates a new FunctionRoInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionRoInner() *FunctionRoInner {
	this := FunctionRoInner{}
	return &this
}

// NewFunctionRoInnerWithDefaults instantiates a new FunctionRoInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionRoInnerWithDefaults() *FunctionRoInner {
	this := FunctionRoInner{}
	return &this
}

// GetP returns the P field value if set, zero value otherwise.
func (o *FunctionRoInner) GetP() string {
	if o == nil || IsNil(o.P) {
		var ret string
		return ret
	}
	return *o.P
}

// GetPOk returns a tuple with the P field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionRoInner) GetPOk() (*string, bool) {
	if o == nil || IsNil(o.P) {
		return nil, false
	}
	return o.P, true
}

// HasP returns a boolean if a field has been set.
func (o *FunctionRoInner) HasP() bool {
	if o != nil && !IsNil(o.P) {
		return true
	}

	return false
}

// SetP gets a reference to the given string and assigns it to the P field.
func (o *FunctionRoInner) SetP(v string) {
	o.P = &v
}

func (o FunctionRoInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionRoInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.P) {
		toSerialize["p"] = o.P
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FunctionRoInner) UnmarshalJSON(data []byte) (err error) {
	varFunctionRoInner := _FunctionRoInner{}

	err = json.Unmarshal(data, &varFunctionRoInner)

	if err != nil {
		return err
	}

	*o = FunctionRoInner(varFunctionRoInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "p")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFunctionRoInner struct {
	value *FunctionRoInner
	isSet bool
}

func (v NullableFunctionRoInner) Get() *FunctionRoInner {
	return v.value
}

func (v *NullableFunctionRoInner) Set(val *FunctionRoInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionRoInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionRoInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionRoInner(val *FunctionRoInner) *NullableFunctionRoInner {
	return &NullableFunctionRoInner{value: val, isSet: true}
}

func (v NullableFunctionRoInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionRoInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


