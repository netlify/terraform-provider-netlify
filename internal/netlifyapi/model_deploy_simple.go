/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the DeploySimple type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploySimple{}

// DeploySimple struct for DeploySimple
type DeploySimple struct {
	AdminUrl string `json:"admin_url"`
	CommitRef string `json:"commit_ref"`
	CommitUrl string `json:"commit_url"`
	Title string `json:"title"`
	PublishedAt time.Time `json:"published_at"`
	AdditionalProperties map[string]interface{}
}

type _DeploySimple DeploySimple

// NewDeploySimple instantiates a new DeploySimple object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploySimple(adminUrl string, commitRef string, commitUrl string, title string, publishedAt time.Time) *DeploySimple {
	this := DeploySimple{}
	this.AdminUrl = adminUrl
	this.CommitRef = commitRef
	this.CommitUrl = commitUrl
	this.Title = title
	this.PublishedAt = publishedAt
	return &this
}

// NewDeploySimpleWithDefaults instantiates a new DeploySimple object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploySimpleWithDefaults() *DeploySimple {
	this := DeploySimple{}
	return &this
}

// GetAdminUrl returns the AdminUrl field value
func (o *DeploySimple) GetAdminUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminUrl
}

// GetAdminUrlOk returns a tuple with the AdminUrl field value
// and a boolean to check if the value has been set.
func (o *DeploySimple) GetAdminUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminUrl, true
}

// SetAdminUrl sets field value
func (o *DeploySimple) SetAdminUrl(v string) {
	o.AdminUrl = v
}

// GetCommitRef returns the CommitRef field value
func (o *DeploySimple) GetCommitRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitRef
}

// GetCommitRefOk returns a tuple with the CommitRef field value
// and a boolean to check if the value has been set.
func (o *DeploySimple) GetCommitRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitRef, true
}

// SetCommitRef sets field value
func (o *DeploySimple) SetCommitRef(v string) {
	o.CommitRef = v
}

// GetCommitUrl returns the CommitUrl field value
func (o *DeploySimple) GetCommitUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitUrl
}

// GetCommitUrlOk returns a tuple with the CommitUrl field value
// and a boolean to check if the value has been set.
func (o *DeploySimple) GetCommitUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitUrl, true
}

// SetCommitUrl sets field value
func (o *DeploySimple) SetCommitUrl(v string) {
	o.CommitUrl = v
}

// GetTitle returns the Title field value
func (o *DeploySimple) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *DeploySimple) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *DeploySimple) SetTitle(v string) {
	o.Title = v
}

// GetPublishedAt returns the PublishedAt field value
func (o *DeploySimple) GetPublishedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PublishedAt
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value
// and a boolean to check if the value has been set.
func (o *DeploySimple) GetPublishedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublishedAt, true
}

// SetPublishedAt sets field value
func (o *DeploySimple) SetPublishedAt(v time.Time) {
	o.PublishedAt = v
}

func (o DeploySimple) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploySimple) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["admin_url"] = o.AdminUrl
	toSerialize["commit_ref"] = o.CommitRef
	toSerialize["commit_url"] = o.CommitUrl
	toSerialize["title"] = o.Title
	toSerialize["published_at"] = o.PublishedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploySimple) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"admin_url",
		"commit_ref",
		"commit_url",
		"title",
		"published_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploySimple := _DeploySimple{}

	err = json.Unmarshal(data, &varDeploySimple)

	if err != nil {
		return err
	}

	*o = DeploySimple(varDeploySimple)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "admin_url")
		delete(additionalProperties, "commit_ref")
		delete(additionalProperties, "commit_url")
		delete(additionalProperties, "title")
		delete(additionalProperties, "published_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploySimple struct {
	value *DeploySimple
	isSet bool
}

func (v NullableDeploySimple) Get() *DeploySimple {
	return v.value
}

func (v *NullableDeploySimple) Set(val *DeploySimple) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploySimple) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploySimple) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploySimple(val *DeploySimple) *NullableDeploySimple {
	return &NullableDeploySimple{value: val, isSet: true}
}

func (v NullableDeploySimple) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploySimple) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


