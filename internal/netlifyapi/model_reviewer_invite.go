/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the ReviewerInvite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewerInvite{}

// ReviewerInvite struct for ReviewerInvite
type ReviewerInvite struct {
	// The email address to send a reviewer invitation
	Email *string `json:"email,omitempty"`
	// The deploy ID of the deploy preview which will be used to create a deploy preview link as an invitation link
	DeployId *string `json:"deploy_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReviewerInvite ReviewerInvite

// NewReviewerInvite instantiates a new ReviewerInvite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewerInvite() *ReviewerInvite {
	this := ReviewerInvite{}
	return &this
}

// NewReviewerInviteWithDefaults instantiates a new ReviewerInvite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewerInviteWithDefaults() *ReviewerInvite {
	this := ReviewerInvite{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ReviewerInvite) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewerInvite) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ReviewerInvite) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ReviewerInvite) SetEmail(v string) {
	o.Email = &v
}

// GetDeployId returns the DeployId field value if set, zero value otherwise.
func (o *ReviewerInvite) GetDeployId() string {
	if o == nil || IsNil(o.DeployId) {
		var ret string
		return ret
	}
	return *o.DeployId
}

// GetDeployIdOk returns a tuple with the DeployId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewerInvite) GetDeployIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeployId) {
		return nil, false
	}
	return o.DeployId, true
}

// HasDeployId returns a boolean if a field has been set.
func (o *ReviewerInvite) HasDeployId() bool {
	if o != nil && !IsNil(o.DeployId) {
		return true
	}

	return false
}

// SetDeployId gets a reference to the given string and assigns it to the DeployId field.
func (o *ReviewerInvite) SetDeployId(v string) {
	o.DeployId = &v
}

func (o ReviewerInvite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewerInvite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.DeployId) {
		toSerialize["deploy_id"] = o.DeployId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReviewerInvite) UnmarshalJSON(data []byte) (err error) {
	varReviewerInvite := _ReviewerInvite{}

	err = json.Unmarshal(data, &varReviewerInvite)

	if err != nil {
		return err
	}

	*o = ReviewerInvite(varReviewerInvite)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "deploy_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReviewerInvite struct {
	value *ReviewerInvite
	isSet bool
}

func (v NullableReviewerInvite) Get() *ReviewerInvite {
	return v.value
}

func (v *NullableReviewerInvite) Set(val *ReviewerInvite) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewerInvite) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewerInvite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewerInvite(val *ReviewerInvite) *NullableReviewerInvite {
	return &NullableReviewerInvite{value: val, isSet: true}
}

func (v NullableReviewerInvite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewerInvite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


