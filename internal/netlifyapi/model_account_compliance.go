/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AccountCompliance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountCompliance{}

// AccountCompliance AccountCompliance definition
type AccountCompliance struct {
	PrivateCorpRepos AccountCompliancePrivateCorpRepos `json:"private_corp_repos"`
	MaxMembers AccountComplianceMaxMembers `json:"max_members"`
	AdditionalProperties map[string]interface{}
}

type _AccountCompliance AccountCompliance

// NewAccountCompliance instantiates a new AccountCompliance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountCompliance(privateCorpRepos AccountCompliancePrivateCorpRepos, maxMembers AccountComplianceMaxMembers) *AccountCompliance {
	this := AccountCompliance{}
	this.PrivateCorpRepos = privateCorpRepos
	this.MaxMembers = maxMembers
	return &this
}

// NewAccountComplianceWithDefaults instantiates a new AccountCompliance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountComplianceWithDefaults() *AccountCompliance {
	this := AccountCompliance{}
	return &this
}

// GetPrivateCorpRepos returns the PrivateCorpRepos field value
func (o *AccountCompliance) GetPrivateCorpRepos() AccountCompliancePrivateCorpRepos {
	if o == nil {
		var ret AccountCompliancePrivateCorpRepos
		return ret
	}

	return o.PrivateCorpRepos
}

// GetPrivateCorpReposOk returns a tuple with the PrivateCorpRepos field value
// and a boolean to check if the value has been set.
func (o *AccountCompliance) GetPrivateCorpReposOk() (*AccountCompliancePrivateCorpRepos, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateCorpRepos, true
}

// SetPrivateCorpRepos sets field value
func (o *AccountCompliance) SetPrivateCorpRepos(v AccountCompliancePrivateCorpRepos) {
	o.PrivateCorpRepos = v
}

// GetMaxMembers returns the MaxMembers field value
func (o *AccountCompliance) GetMaxMembers() AccountComplianceMaxMembers {
	if o == nil {
		var ret AccountComplianceMaxMembers
		return ret
	}

	return o.MaxMembers
}

// GetMaxMembersOk returns a tuple with the MaxMembers field value
// and a boolean to check if the value has been set.
func (o *AccountCompliance) GetMaxMembersOk() (*AccountComplianceMaxMembers, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxMembers, true
}

// SetMaxMembers sets field value
func (o *AccountCompliance) SetMaxMembers(v AccountComplianceMaxMembers) {
	o.MaxMembers = v
}

func (o AccountCompliance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountCompliance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["private_corp_repos"] = o.PrivateCorpRepos
	toSerialize["max_members"] = o.MaxMembers

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountCompliance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"private_corp_repos",
		"max_members",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountCompliance := _AccountCompliance{}

	err = json.Unmarshal(data, &varAccountCompliance)

	if err != nil {
		return err
	}

	*o = AccountCompliance(varAccountCompliance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "private_corp_repos")
		delete(additionalProperties, "max_members")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountCompliance struct {
	value *AccountCompliance
	isSet bool
}

func (v NullableAccountCompliance) Get() *AccountCompliance {
	return v.value
}

func (v *NullableAccountCompliance) Set(val *AccountCompliance) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountCompliance) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountCompliance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountCompliance(val *AccountCompliance) *NullableAccountCompliance {
	return &NullableAccountCompliance{value: val, isSet: true}
}

func (v NullableAccountCompliance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountCompliance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


