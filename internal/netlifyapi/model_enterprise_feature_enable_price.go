/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the EnterpriseFeatureEnablePrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnterpriseFeatureEnablePrice{}

// EnterpriseFeatureEnablePrice EnterpriseFeatureEnablePrice model definition.
type EnterpriseFeatureEnablePrice struct {
	// Whether the feature is enabled for the account
	Enabled *bool `json:"enabled,omitempty"`
	// The custom price for the feature in the contract
	Price *string `json:"price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnterpriseFeatureEnablePrice EnterpriseFeatureEnablePrice

// NewEnterpriseFeatureEnablePrice instantiates a new EnterpriseFeatureEnablePrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnterpriseFeatureEnablePrice() *EnterpriseFeatureEnablePrice {
	this := EnterpriseFeatureEnablePrice{}
	return &this
}

// NewEnterpriseFeatureEnablePriceWithDefaults instantiates a new EnterpriseFeatureEnablePrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnterpriseFeatureEnablePriceWithDefaults() *EnterpriseFeatureEnablePrice {
	this := EnterpriseFeatureEnablePrice{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *EnterpriseFeatureEnablePrice) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnterpriseFeatureEnablePrice) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *EnterpriseFeatureEnablePrice) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *EnterpriseFeatureEnablePrice) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *EnterpriseFeatureEnablePrice) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnterpriseFeatureEnablePrice) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *EnterpriseFeatureEnablePrice) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *EnterpriseFeatureEnablePrice) SetPrice(v string) {
	o.Price = &v
}

func (o EnterpriseFeatureEnablePrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnterpriseFeatureEnablePrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnterpriseFeatureEnablePrice) UnmarshalJSON(data []byte) (err error) {
	varEnterpriseFeatureEnablePrice := _EnterpriseFeatureEnablePrice{}

	err = json.Unmarshal(data, &varEnterpriseFeatureEnablePrice)

	if err != nil {
		return err
	}

	*o = EnterpriseFeatureEnablePrice(varEnterpriseFeatureEnablePrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnterpriseFeatureEnablePrice struct {
	value *EnterpriseFeatureEnablePrice
	isSet bool
}

func (v NullableEnterpriseFeatureEnablePrice) Get() *EnterpriseFeatureEnablePrice {
	return v.value
}

func (v *NullableEnterpriseFeatureEnablePrice) Set(val *EnterpriseFeatureEnablePrice) {
	v.value = val
	v.isSet = true
}

func (v NullableEnterpriseFeatureEnablePrice) IsSet() bool {
	return v.isSet
}

func (v *NullableEnterpriseFeatureEnablePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnterpriseFeatureEnablePrice(val *EnterpriseFeatureEnablePrice) *NullableEnterpriseFeatureEnablePrice {
	return &NullableEnterpriseFeatureEnablePrice{value: val, isSet: true}
}

func (v NullableEnterpriseFeatureEnablePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnterpriseFeatureEnablePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


