/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Committer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Committer{}

// Committer Committer model definition
type Committer struct {
	// The ID for the committer
	Id string `json:"id"`
	// The ID of the account the committer is associated with
	AccountId string `json:"account_id"`
	// The ID of the user associated with the committer, if found
	UserId string `json:"user_id"`
	// The name of the provider, for example: **github**, **gitlab**, **bitbucket**
	Provider string `json:"provider"`
	// The ID of the committer within the provider's system
	ProviderId int64 `json:"provider_id"`
	// The username of the committer within the provider's system
	ProviderSlug string `json:"provider_slug"`
	// The ID of the member of the account matched to this committer
	MemberId string `json:"member_id"`
	// The invite ID matched to this committer
	InviteId string `json:"invite_id"`
	// How the member was matched to the committer: **automatic** for our system, or **manual**  for a human
	MatchMethod string `json:"match_method"`
	// The last time an event (push/pull/merge request) was detected for the committer
	LastSeen time.Time `json:"last_seen"`
	AdditionalProperties map[string]interface{}
}

type _Committer Committer

// NewCommitter instantiates a new Committer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitter(id string, accountId string, userId string, provider string, providerId int64, providerSlug string, memberId string, inviteId string, matchMethod string, lastSeen time.Time) *Committer {
	this := Committer{}
	this.Id = id
	this.AccountId = accountId
	this.UserId = userId
	this.Provider = provider
	this.ProviderId = providerId
	this.ProviderSlug = providerSlug
	this.MemberId = memberId
	this.InviteId = inviteId
	this.MatchMethod = matchMethod
	this.LastSeen = lastSeen
	return &this
}

// NewCommitterWithDefaults instantiates a new Committer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitterWithDefaults() *Committer {
	this := Committer{}
	return &this
}

// GetId returns the Id field value
func (o *Committer) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Committer) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Committer) SetId(v string) {
	o.Id = v
}

// GetAccountId returns the AccountId field value
func (o *Committer) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Committer) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Committer) SetAccountId(v string) {
	o.AccountId = v
}

// GetUserId returns the UserId field value
func (o *Committer) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Committer) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Committer) SetUserId(v string) {
	o.UserId = v
}

// GetProvider returns the Provider field value
func (o *Committer) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *Committer) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *Committer) SetProvider(v string) {
	o.Provider = v
}

// GetProviderId returns the ProviderId field value
func (o *Committer) GetProviderId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value
// and a boolean to check if the value has been set.
func (o *Committer) GetProviderIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderId, true
}

// SetProviderId sets field value
func (o *Committer) SetProviderId(v int64) {
	o.ProviderId = v
}

// GetProviderSlug returns the ProviderSlug field value
func (o *Committer) GetProviderSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderSlug
}

// GetProviderSlugOk returns a tuple with the ProviderSlug field value
// and a boolean to check if the value has been set.
func (o *Committer) GetProviderSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderSlug, true
}

// SetProviderSlug sets field value
func (o *Committer) SetProviderSlug(v string) {
	o.ProviderSlug = v
}

// GetMemberId returns the MemberId field value
func (o *Committer) GetMemberId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value
// and a boolean to check if the value has been set.
func (o *Committer) GetMemberIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemberId, true
}

// SetMemberId sets field value
func (o *Committer) SetMemberId(v string) {
	o.MemberId = v
}

// GetInviteId returns the InviteId field value
func (o *Committer) GetInviteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InviteId
}

// GetInviteIdOk returns a tuple with the InviteId field value
// and a boolean to check if the value has been set.
func (o *Committer) GetInviteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InviteId, true
}

// SetInviteId sets field value
func (o *Committer) SetInviteId(v string) {
	o.InviteId = v
}

// GetMatchMethod returns the MatchMethod field value
func (o *Committer) GetMatchMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MatchMethod
}

// GetMatchMethodOk returns a tuple with the MatchMethod field value
// and a boolean to check if the value has been set.
func (o *Committer) GetMatchMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchMethod, true
}

// SetMatchMethod sets field value
func (o *Committer) SetMatchMethod(v string) {
	o.MatchMethod = v
}

// GetLastSeen returns the LastSeen field value
func (o *Committer) GetLastSeen() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value
// and a boolean to check if the value has been set.
func (o *Committer) GetLastSeenOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSeen, true
}

// SetLastSeen sets field value
func (o *Committer) SetLastSeen(v time.Time) {
	o.LastSeen = v
}

func (o Committer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Committer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["account_id"] = o.AccountId
	toSerialize["user_id"] = o.UserId
	toSerialize["provider"] = o.Provider
	toSerialize["provider_id"] = o.ProviderId
	toSerialize["provider_slug"] = o.ProviderSlug
	toSerialize["member_id"] = o.MemberId
	toSerialize["invite_id"] = o.InviteId
	toSerialize["match_method"] = o.MatchMethod
	toSerialize["last_seen"] = o.LastSeen

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Committer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"account_id",
		"user_id",
		"provider",
		"provider_id",
		"provider_slug",
		"member_id",
		"invite_id",
		"match_method",
		"last_seen",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitter := _Committer{}

	err = json.Unmarshal(data, &varCommitter)

	if err != nil {
		return err
	}

	*o = Committer(varCommitter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "provider")
		delete(additionalProperties, "provider_id")
		delete(additionalProperties, "provider_slug")
		delete(additionalProperties, "member_id")
		delete(additionalProperties, "invite_id")
		delete(additionalProperties, "match_method")
		delete(additionalProperties, "last_seen")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommitter struct {
	value *Committer
	isSet bool
}

func (v NullableCommitter) Get() *Committer {
	return v.value
}

func (v *NullableCommitter) Set(val *Committer) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitter) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitter(val *Committer) *NullableCommitter {
	return &NullableCommitter{value: val, isSet: true}
}

func (v NullableCommitter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


