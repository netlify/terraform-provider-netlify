/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the DevServerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevServerConfig{}

// DevServerConfig struct for DevServerConfig
type DevServerConfig struct {
	// The id of the dev server
	Id *string `json:"id,omitempty"`
	// The time the new config should expire
	ExpiresAt *string `json:"expires_at,omitempty"`
	// The repo url
	RepoUrl *string `json:"repo_url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DevServerConfig DevServerConfig

// NewDevServerConfig instantiates a new DevServerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevServerConfig() *DevServerConfig {
	this := DevServerConfig{}
	return &this
}

// NewDevServerConfigWithDefaults instantiates a new DevServerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevServerConfigWithDefaults() *DevServerConfig {
	this := DevServerConfig{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DevServerConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServerConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DevServerConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DevServerConfig) SetId(v string) {
	o.Id = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *DevServerConfig) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServerConfig) GetExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *DevServerConfig) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *DevServerConfig) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetRepoUrl returns the RepoUrl field value if set, zero value otherwise.
func (o *DevServerConfig) GetRepoUrl() string {
	if o == nil || IsNil(o.RepoUrl) {
		var ret string
		return ret
	}
	return *o.RepoUrl
}

// GetRepoUrlOk returns a tuple with the RepoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevServerConfig) GetRepoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RepoUrl) {
		return nil, false
	}
	return o.RepoUrl, true
}

// HasRepoUrl returns a boolean if a field has been set.
func (o *DevServerConfig) HasRepoUrl() bool {
	if o != nil && !IsNil(o.RepoUrl) {
		return true
	}

	return false
}

// SetRepoUrl gets a reference to the given string and assigns it to the RepoUrl field.
func (o *DevServerConfig) SetRepoUrl(v string) {
	o.RepoUrl = &v
}

func (o DevServerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevServerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.RepoUrl) {
		toSerialize["repo_url"] = o.RepoUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DevServerConfig) UnmarshalJSON(data []byte) (err error) {
	varDevServerConfig := _DevServerConfig{}

	err = json.Unmarshal(data, &varDevServerConfig)

	if err != nil {
		return err
	}

	*o = DevServerConfig(varDevServerConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "repo_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDevServerConfig struct {
	value *DevServerConfig
	isSet bool
}

func (v NullableDevServerConfig) Get() *DevServerConfig {
	return v.value
}

func (v *NullableDevServerConfig) Set(val *DevServerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDevServerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDevServerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevServerConfig(val *DevServerConfig) *NullableDevServerConfig {
	return &NullableDevServerConfig{value: val, isSet: true}
}

func (v NullableDevServerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevServerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


