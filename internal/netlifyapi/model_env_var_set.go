/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the EnvVarSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvVarSet{}

// EnvVarSet struct for EnvVarSet
type EnvVarSet struct {
	// The deploy context where this value will be applied
	Context *string `json:"context,omitempty"`
	// If present, the name of the custom context related to the context_parameter
	ContextParameter *string `json:"context_parameter,omitempty"`
	// The plaintext value to be set on the key-context
	Value *string `json:"value,omitempty"`
	// Should this environment variable be treated as a write-only variable and not accesible outside of Netlify runtimes
	IsSecret *bool `json:"is_secret,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvVarSet EnvVarSet

// NewEnvVarSet instantiates a new EnvVarSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvVarSet() *EnvVarSet {
	this := EnvVarSet{}
	return &this
}

// NewEnvVarSetWithDefaults instantiates a new EnvVarSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvVarSetWithDefaults() *EnvVarSet {
	this := EnvVarSet{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *EnvVarSet) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvVarSet) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *EnvVarSet) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *EnvVarSet) SetContext(v string) {
	o.Context = &v
}

// GetContextParameter returns the ContextParameter field value if set, zero value otherwise.
func (o *EnvVarSet) GetContextParameter() string {
	if o == nil || IsNil(o.ContextParameter) {
		var ret string
		return ret
	}
	return *o.ContextParameter
}

// GetContextParameterOk returns a tuple with the ContextParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvVarSet) GetContextParameterOk() (*string, bool) {
	if o == nil || IsNil(o.ContextParameter) {
		return nil, false
	}
	return o.ContextParameter, true
}

// HasContextParameter returns a boolean if a field has been set.
func (o *EnvVarSet) HasContextParameter() bool {
	if o != nil && !IsNil(o.ContextParameter) {
		return true
	}

	return false
}

// SetContextParameter gets a reference to the given string and assigns it to the ContextParameter field.
func (o *EnvVarSet) SetContextParameter(v string) {
	o.ContextParameter = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EnvVarSet) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvVarSet) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EnvVarSet) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *EnvVarSet) SetValue(v string) {
	o.Value = &v
}

// GetIsSecret returns the IsSecret field value if set, zero value otherwise.
func (o *EnvVarSet) GetIsSecret() bool {
	if o == nil || IsNil(o.IsSecret) {
		var ret bool
		return ret
	}
	return *o.IsSecret
}

// GetIsSecretOk returns a tuple with the IsSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvVarSet) GetIsSecretOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecret) {
		return nil, false
	}
	return o.IsSecret, true
}

// HasIsSecret returns a boolean if a field has been set.
func (o *EnvVarSet) HasIsSecret() bool {
	if o != nil && !IsNil(o.IsSecret) {
		return true
	}

	return false
}

// SetIsSecret gets a reference to the given bool and assigns it to the IsSecret field.
func (o *EnvVarSet) SetIsSecret(v bool) {
	o.IsSecret = &v
}

func (o EnvVarSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvVarSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.ContextParameter) {
		toSerialize["context_parameter"] = o.ContextParameter
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.IsSecret) {
		toSerialize["is_secret"] = o.IsSecret
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvVarSet) UnmarshalJSON(data []byte) (err error) {
	varEnvVarSet := _EnvVarSet{}

	err = json.Unmarshal(data, &varEnvVarSet)

	if err != nil {
		return err
	}

	*o = EnvVarSet(varEnvVarSet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "context")
		delete(additionalProperties, "context_parameter")
		delete(additionalProperties, "value")
		delete(additionalProperties, "is_secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvVarSet struct {
	value *EnvVarSet
	isSet bool
}

func (v NullableEnvVarSet) Get() *EnvVarSet {
	return v.value
}

func (v *NullableEnvVarSet) Set(val *EnvVarSet) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvVarSet) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvVarSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvVarSet(val *EnvVarSet) *NullableEnvVarSet {
	return &NullableEnvVarSet{value: val, isSet: true}
}

func (v NullableEnvVarSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvVarSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


