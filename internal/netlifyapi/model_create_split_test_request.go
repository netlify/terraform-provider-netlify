/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the CreateSplitTestRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSplitTestRequest{}

// CreateSplitTestRequest struct for CreateSplitTestRequest
type CreateSplitTestRequest struct {
	BranchTests map[string]interface{} `json:"branch_tests,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateSplitTestRequest CreateSplitTestRequest

// NewCreateSplitTestRequest instantiates a new CreateSplitTestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSplitTestRequest() *CreateSplitTestRequest {
	this := CreateSplitTestRequest{}
	return &this
}

// NewCreateSplitTestRequestWithDefaults instantiates a new CreateSplitTestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSplitTestRequestWithDefaults() *CreateSplitTestRequest {
	this := CreateSplitTestRequest{}
	return &this
}

// GetBranchTests returns the BranchTests field value if set, zero value otherwise.
func (o *CreateSplitTestRequest) GetBranchTests() map[string]interface{} {
	if o == nil || IsNil(o.BranchTests) {
		var ret map[string]interface{}
		return ret
	}
	return o.BranchTests
}

// GetBranchTestsOk returns a tuple with the BranchTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSplitTestRequest) GetBranchTestsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.BranchTests) {
		return map[string]interface{}{}, false
	}
	return o.BranchTests, true
}

// HasBranchTests returns a boolean if a field has been set.
func (o *CreateSplitTestRequest) HasBranchTests() bool {
	if o != nil && !IsNil(o.BranchTests) {
		return true
	}

	return false
}

// SetBranchTests gets a reference to the given map[string]interface{} and assigns it to the BranchTests field.
func (o *CreateSplitTestRequest) SetBranchTests(v map[string]interface{}) {
	o.BranchTests = v
}

func (o CreateSplitTestRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSplitTestRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BranchTests) {
		toSerialize["branch_tests"] = o.BranchTests
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateSplitTestRequest) UnmarshalJSON(data []byte) (err error) {
	varCreateSplitTestRequest := _CreateSplitTestRequest{}

	err = json.Unmarshal(data, &varCreateSplitTestRequest)

	if err != nil {
		return err
	}

	*o = CreateSplitTestRequest(varCreateSplitTestRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "branch_tests")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateSplitTestRequest struct {
	value *CreateSplitTestRequest
	isSet bool
}

func (v NullableCreateSplitTestRequest) Get() *CreateSplitTestRequest {
	return v.value
}

func (v *NullableCreateSplitTestRequest) Set(val *CreateSplitTestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSplitTestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSplitTestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSplitTestRequest(val *CreateSplitTestRequest) *NullableCreateSplitTestRequest {
	return &NullableCreateSplitTestRequest{value: val, isSet: true}
}

func (v NullableCreateSplitTestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSplitTestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


