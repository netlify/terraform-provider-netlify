/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User User model definition
type User struct {
	// The identifier for the user
	Id string `json:"id"`
	// The uid for multipass
	Uid string `json:"uid"`
	// The full name of the user
	FullName string `json:"full_name"`
	// The URL for the avatar
	AvatarUrl string `json:"avatar_url"`
	// The email of the user
	Email string `json:"email"`
	// The number of sites the user has
	SiteCount int64 `json:"site_count"`
	// When the user was created
	CreatedAt time.Time `json:"created_at"`
	// Last time this user logged in
	LastLogin time.Time `json:"last_login"`
	// An array of login providers the user has
	LoginProviders []string `json:"login_providers"`
	// The slug of the user
	Slug string `json:"slug"`
	ConnectedAccounts UserConnectedAccounts `json:"connected_accounts"`
	// The tracking ID of the user
	TrackingId string `json:"tracking_id"`
	// Whether the user has 2 Factor Auth enabled
	MfaEnabled bool `json:"mfa_enabled"`
	// The account_id that is used for SSO
	SamlAccountId string `json:"saml_account_id"`
	// The account slug that is used for SSO
	SamlSlug string `json:"saml_slug"`
	// Only provided in `/auth/login` response
	AccessToken string `json:"access_token"`
	// Issued during OAuth flows
	RefreshToken string `json:"refresh_token"`
	// Id of account user wants UI to start on
	PreferredAccountId string `json:"preferred_account_id"`
	// HMAC-signed user ID to be shared with CommandBar for storing user preferences
	CommandBarUserId string `json:"command_bar_user_id"`
	// Favorited sites UUIDs
	FavoriteSites []string `json:"favorite_sites"`
	AdditionalProperties map[string]interface{}
}

type _User User

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(id string, uid string, fullName string, avatarUrl string, email string, siteCount int64, createdAt time.Time, lastLogin time.Time, loginProviders []string, slug string, connectedAccounts UserConnectedAccounts, trackingId string, mfaEnabled bool, samlAccountId string, samlSlug string, accessToken string, refreshToken string, preferredAccountId string, commandBarUserId string, favoriteSites []string) *User {
	this := User{}
	this.Id = id
	this.Uid = uid
	this.FullName = fullName
	this.AvatarUrl = avatarUrl
	this.Email = email
	this.SiteCount = siteCount
	this.CreatedAt = createdAt
	this.LastLogin = lastLogin
	this.LoginProviders = loginProviders
	this.Slug = slug
	this.ConnectedAccounts = connectedAccounts
	this.TrackingId = trackingId
	this.MfaEnabled = mfaEnabled
	this.SamlAccountId = samlAccountId
	this.SamlSlug = samlSlug
	this.AccessToken = accessToken
	this.RefreshToken = refreshToken
	this.PreferredAccountId = preferredAccountId
	this.CommandBarUserId = commandBarUserId
	this.FavoriteSites = favoriteSites
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value
func (o *User) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v string) {
	o.Id = v
}

// GetUid returns the Uid field value
func (o *User) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *User) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *User) SetUid(v string) {
	o.Uid = v
}

// GetFullName returns the FullName field value
func (o *User) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *User) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *User) SetFullName(v string) {
	o.FullName = v
}

// GetAvatarUrl returns the AvatarUrl field value
func (o *User) GetAvatarUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value
// and a boolean to check if the value has been set.
func (o *User) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// SetAvatarUrl sets field value
func (o *User) SetAvatarUrl(v string) {
	o.AvatarUrl = v
}

// GetEmail returns the Email field value
func (o *User) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *User) SetEmail(v string) {
	o.Email = v
}

// GetSiteCount returns the SiteCount field value
func (o *User) GetSiteCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SiteCount
}

// GetSiteCountOk returns a tuple with the SiteCount field value
// and a boolean to check if the value has been set.
func (o *User) GetSiteCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteCount, true
}

// SetSiteCount sets field value
func (o *User) SetSiteCount(v int64) {
	o.SiteCount = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *User) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *User) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *User) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetLastLogin returns the LastLogin field value
func (o *User) GetLastLogin() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value
// and a boolean to check if the value has been set.
func (o *User) GetLastLoginOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastLogin, true
}

// SetLastLogin sets field value
func (o *User) SetLastLogin(v time.Time) {
	o.LastLogin = v
}

// GetLoginProviders returns the LoginProviders field value
func (o *User) GetLoginProviders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.LoginProviders
}

// GetLoginProvidersOk returns a tuple with the LoginProviders field value
// and a boolean to check if the value has been set.
func (o *User) GetLoginProvidersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LoginProviders, true
}

// SetLoginProviders sets field value
func (o *User) SetLoginProviders(v []string) {
	o.LoginProviders = v
}

// GetSlug returns the Slug field value
func (o *User) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *User) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *User) SetSlug(v string) {
	o.Slug = v
}

// GetConnectedAccounts returns the ConnectedAccounts field value
func (o *User) GetConnectedAccounts() UserConnectedAccounts {
	if o == nil {
		var ret UserConnectedAccounts
		return ret
	}

	return o.ConnectedAccounts
}

// GetConnectedAccountsOk returns a tuple with the ConnectedAccounts field value
// and a boolean to check if the value has been set.
func (o *User) GetConnectedAccountsOk() (*UserConnectedAccounts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectedAccounts, true
}

// SetConnectedAccounts sets field value
func (o *User) SetConnectedAccounts(v UserConnectedAccounts) {
	o.ConnectedAccounts = v
}

// GetTrackingId returns the TrackingId field value
func (o *User) GetTrackingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrackingId
}

// GetTrackingIdOk returns a tuple with the TrackingId field value
// and a boolean to check if the value has been set.
func (o *User) GetTrackingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackingId, true
}

// SetTrackingId sets field value
func (o *User) SetTrackingId(v string) {
	o.TrackingId = v
}

// GetMfaEnabled returns the MfaEnabled field value
func (o *User) GetMfaEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MfaEnabled
}

// GetMfaEnabledOk returns a tuple with the MfaEnabled field value
// and a boolean to check if the value has been set.
func (o *User) GetMfaEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MfaEnabled, true
}

// SetMfaEnabled sets field value
func (o *User) SetMfaEnabled(v bool) {
	o.MfaEnabled = v
}

// GetSamlAccountId returns the SamlAccountId field value
func (o *User) GetSamlAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SamlAccountId
}

// GetSamlAccountIdOk returns a tuple with the SamlAccountId field value
// and a boolean to check if the value has been set.
func (o *User) GetSamlAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SamlAccountId, true
}

// SetSamlAccountId sets field value
func (o *User) SetSamlAccountId(v string) {
	o.SamlAccountId = v
}

// GetSamlSlug returns the SamlSlug field value
func (o *User) GetSamlSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SamlSlug
}

// GetSamlSlugOk returns a tuple with the SamlSlug field value
// and a boolean to check if the value has been set.
func (o *User) GetSamlSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SamlSlug, true
}

// SetSamlSlug sets field value
func (o *User) SetSamlSlug(v string) {
	o.SamlSlug = v
}

// GetAccessToken returns the AccessToken field value
func (o *User) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *User) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *User) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetRefreshToken returns the RefreshToken field value
func (o *User) GetRefreshToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
func (o *User) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshToken, true
}

// SetRefreshToken sets field value
func (o *User) SetRefreshToken(v string) {
	o.RefreshToken = v
}

// GetPreferredAccountId returns the PreferredAccountId field value
func (o *User) GetPreferredAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreferredAccountId
}

// GetPreferredAccountIdOk returns a tuple with the PreferredAccountId field value
// and a boolean to check if the value has been set.
func (o *User) GetPreferredAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreferredAccountId, true
}

// SetPreferredAccountId sets field value
func (o *User) SetPreferredAccountId(v string) {
	o.PreferredAccountId = v
}

// GetCommandBarUserId returns the CommandBarUserId field value
func (o *User) GetCommandBarUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommandBarUserId
}

// GetCommandBarUserIdOk returns a tuple with the CommandBarUserId field value
// and a boolean to check if the value has been set.
func (o *User) GetCommandBarUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandBarUserId, true
}

// SetCommandBarUserId sets field value
func (o *User) SetCommandBarUserId(v string) {
	o.CommandBarUserId = v
}

// GetFavoriteSites returns the FavoriteSites field value
func (o *User) GetFavoriteSites() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FavoriteSites
}

// GetFavoriteSitesOk returns a tuple with the FavoriteSites field value
// and a boolean to check if the value has been set.
func (o *User) GetFavoriteSitesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FavoriteSites, true
}

// SetFavoriteSites sets field value
func (o *User) SetFavoriteSites(v []string) {
	o.FavoriteSites = v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["uid"] = o.Uid
	toSerialize["full_name"] = o.FullName
	toSerialize["avatar_url"] = o.AvatarUrl
	toSerialize["email"] = o.Email
	toSerialize["site_count"] = o.SiteCount
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["last_login"] = o.LastLogin
	toSerialize["login_providers"] = o.LoginProviders
	toSerialize["slug"] = o.Slug
	toSerialize["connected_accounts"] = o.ConnectedAccounts
	toSerialize["tracking_id"] = o.TrackingId
	toSerialize["mfa_enabled"] = o.MfaEnabled
	toSerialize["saml_account_id"] = o.SamlAccountId
	toSerialize["saml_slug"] = o.SamlSlug
	toSerialize["access_token"] = o.AccessToken
	toSerialize["refresh_token"] = o.RefreshToken
	toSerialize["preferred_account_id"] = o.PreferredAccountId
	toSerialize["command_bar_user_id"] = o.CommandBarUserId
	toSerialize["favorite_sites"] = o.FavoriteSites

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *User) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"uid",
		"full_name",
		"avatar_url",
		"email",
		"site_count",
		"created_at",
		"last_login",
		"login_providers",
		"slug",
		"connected_accounts",
		"tracking_id",
		"mfa_enabled",
		"saml_account_id",
		"saml_slug",
		"access_token",
		"refresh_token",
		"preferred_account_id",
		"command_bar_user_id",
		"favorite_sites",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUser := _User{}

	err = json.Unmarshal(data, &varUser)

	if err != nil {
		return err
	}

	*o = User(varUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "uid")
		delete(additionalProperties, "full_name")
		delete(additionalProperties, "avatar_url")
		delete(additionalProperties, "email")
		delete(additionalProperties, "site_count")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "last_login")
		delete(additionalProperties, "login_providers")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "connected_accounts")
		delete(additionalProperties, "tracking_id")
		delete(additionalProperties, "mfa_enabled")
		delete(additionalProperties, "saml_account_id")
		delete(additionalProperties, "saml_slug")
		delete(additionalProperties, "access_token")
		delete(additionalProperties, "refresh_token")
		delete(additionalProperties, "preferred_account_id")
		delete(additionalProperties, "command_bar_user_id")
		delete(additionalProperties, "favorite_sites")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


