/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TrafficRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrafficRule{}

// TrafficRule struct for TrafficRule
type TrafficRule struct {
	Action TrafficRuleAction `json:"action"`
	Target TrafficRuleTarget `json:"target"`
	Description *string `json:"description,omitempty"`
	Id string `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _TrafficRule TrafficRule

// NewTrafficRule instantiates a new TrafficRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrafficRule(action TrafficRuleAction, target TrafficRuleTarget, id string) *TrafficRule {
	this := TrafficRule{}
	this.Action = action
	this.Target = target
	this.Id = id
	return &this
}

// NewTrafficRuleWithDefaults instantiates a new TrafficRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrafficRuleWithDefaults() *TrafficRule {
	this := TrafficRule{}
	return &this
}

// GetAction returns the Action field value
func (o *TrafficRule) GetAction() TrafficRuleAction {
	if o == nil {
		var ret TrafficRuleAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *TrafficRule) GetActionOk() (*TrafficRuleAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *TrafficRule) SetAction(v TrafficRuleAction) {
	o.Action = v
}

// GetTarget returns the Target field value
func (o *TrafficRule) GetTarget() TrafficRuleTarget {
	if o == nil {
		var ret TrafficRuleTarget
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *TrafficRule) GetTargetOk() (*TrafficRuleTarget, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *TrafficRule) SetTarget(v TrafficRuleTarget) {
	o.Target = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TrafficRule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficRule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TrafficRule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TrafficRule) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value
func (o *TrafficRule) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TrafficRule) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TrafficRule) SetId(v string) {
	o.Id = v
}

func (o TrafficRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrafficRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["target"] = o.Target
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TrafficRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"target",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrafficRule := _TrafficRule{}

	err = json.Unmarshal(data, &varTrafficRule)

	if err != nil {
		return err
	}

	*o = TrafficRule(varTrafficRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "target")
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrafficRule struct {
	value *TrafficRule
	isSet bool
}

func (v NullableTrafficRule) Get() *TrafficRule {
	return v.value
}

func (v *NullableTrafficRule) Set(val *TrafficRule) {
	v.value = val
	v.isSet = true
}

func (v NullableTrafficRule) IsSet() bool {
	return v.isSet
}

func (v *NullableTrafficRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrafficRule(val *TrafficRule) *NullableTrafficRule {
	return &NullableTrafficRule{value: val, isSet: true}
}

func (v NullableTrafficRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrafficRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


