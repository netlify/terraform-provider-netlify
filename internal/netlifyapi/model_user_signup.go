/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the UserSignup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSignup{}

// UserSignup struct for UserSignup
type UserSignup struct {
	// The email address
	Email *string `json:"email,omitempty"`
	// The password
	Password *string `json:"password,omitempty"`
	// The full name
	FullName *string `json:"full_name,omitempty"`
	// The job role (used for the user identify)
	Jobrole *string `json:"jobrole,omitempty"`
	ReviewerSignup *ReviewerSignupInfo `json:"reviewer_signup,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserSignup UserSignup

// NewUserSignup instantiates a new UserSignup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSignup() *UserSignup {
	this := UserSignup{}
	return &this
}

// NewUserSignupWithDefaults instantiates a new UserSignup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSignupWithDefaults() *UserSignup {
	this := UserSignup{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserSignup) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSignup) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserSignup) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserSignup) SetEmail(v string) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserSignup) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSignup) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserSignup) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserSignup) SetPassword(v string) {
	o.Password = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *UserSignup) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSignup) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *UserSignup) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *UserSignup) SetFullName(v string) {
	o.FullName = &v
}

// GetJobrole returns the Jobrole field value if set, zero value otherwise.
func (o *UserSignup) GetJobrole() string {
	if o == nil || IsNil(o.Jobrole) {
		var ret string
		return ret
	}
	return *o.Jobrole
}

// GetJobroleOk returns a tuple with the Jobrole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSignup) GetJobroleOk() (*string, bool) {
	if o == nil || IsNil(o.Jobrole) {
		return nil, false
	}
	return o.Jobrole, true
}

// HasJobrole returns a boolean if a field has been set.
func (o *UserSignup) HasJobrole() bool {
	if o != nil && !IsNil(o.Jobrole) {
		return true
	}

	return false
}

// SetJobrole gets a reference to the given string and assigns it to the Jobrole field.
func (o *UserSignup) SetJobrole(v string) {
	o.Jobrole = &v
}

// GetReviewerSignup returns the ReviewerSignup field value if set, zero value otherwise.
func (o *UserSignup) GetReviewerSignup() ReviewerSignupInfo {
	if o == nil || IsNil(o.ReviewerSignup) {
		var ret ReviewerSignupInfo
		return ret
	}
	return *o.ReviewerSignup
}

// GetReviewerSignupOk returns a tuple with the ReviewerSignup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSignup) GetReviewerSignupOk() (*ReviewerSignupInfo, bool) {
	if o == nil || IsNil(o.ReviewerSignup) {
		return nil, false
	}
	return o.ReviewerSignup, true
}

// HasReviewerSignup returns a boolean if a field has been set.
func (o *UserSignup) HasReviewerSignup() bool {
	if o != nil && !IsNil(o.ReviewerSignup) {
		return true
	}

	return false
}

// SetReviewerSignup gets a reference to the given ReviewerSignupInfo and assigns it to the ReviewerSignup field.
func (o *UserSignup) SetReviewerSignup(v ReviewerSignupInfo) {
	o.ReviewerSignup = &v
}

func (o UserSignup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSignup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.Jobrole) {
		toSerialize["jobrole"] = o.Jobrole
	}
	if !IsNil(o.ReviewerSignup) {
		toSerialize["reviewer_signup"] = o.ReviewerSignup
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserSignup) UnmarshalJSON(data []byte) (err error) {
	varUserSignup := _UserSignup{}

	err = json.Unmarshal(data, &varUserSignup)

	if err != nil {
		return err
	}

	*o = UserSignup(varUserSignup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "password")
		delete(additionalProperties, "full_name")
		delete(additionalProperties, "jobrole")
		delete(additionalProperties, "reviewer_signup")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserSignup struct {
	value *UserSignup
	isSet bool
}

func (v NullableUserSignup) Get() *UserSignup {
	return v.value
}

func (v *NullableUserSignup) Set(val *UserSignup) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSignup) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSignup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSignup(val *UserSignup) *NullableUserSignup {
	return &NullableUserSignup{value: val, isSet: true}
}

func (v NullableUserSignup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSignup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


