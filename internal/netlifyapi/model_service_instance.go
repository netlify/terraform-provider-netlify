/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ServiceInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceInstance{}

// ServiceInstance struct for ServiceInstance
type ServiceInstance struct {
	// the identifier for the service instance
	Id string `json:"id"`
	Url string `json:"url"`
	Config map[string]interface{} `json:"config"`
	// the service slug of the instance
	ServiceSlug string `json:"service_slug"`
	// the service path of the instance
	ServicePath string `json:"service_path"`
	// the service name of the instance
	ServiceName string `json:"service_name"`
	Env map[string]interface{} `json:"env"`
	Snippets map[string]interface{} `json:"snippets"`
	AuthUrl string `json:"auth_url"`
	ExternalAttributes map[string]interface{} `json:"external_attributes"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	AdditionalProperties map[string]interface{}
}

type _ServiceInstance ServiceInstance

// NewServiceInstance instantiates a new ServiceInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceInstance(id string, url string, config map[string]interface{}, serviceSlug string, servicePath string, serviceName string, env map[string]interface{}, snippets map[string]interface{}, authUrl string, externalAttributes map[string]interface{}, createdAt time.Time, updatedAt time.Time) *ServiceInstance {
	this := ServiceInstance{}
	this.Id = id
	this.Url = url
	this.Config = config
	this.ServiceSlug = serviceSlug
	this.ServicePath = servicePath
	this.ServiceName = serviceName
	this.Env = env
	this.Snippets = snippets
	this.AuthUrl = authUrl
	this.ExternalAttributes = externalAttributes
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewServiceInstanceWithDefaults instantiates a new ServiceInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceInstanceWithDefaults() *ServiceInstance {
	this := ServiceInstance{}
	return &this
}

// GetId returns the Id field value
func (o *ServiceInstance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceInstance) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *ServiceInstance) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ServiceInstance) SetUrl(v string) {
	o.Url = v
}

// GetConfig returns the Config field value
func (o *ServiceInstance) GetConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// SetConfig sets field value
func (o *ServiceInstance) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetServiceSlug returns the ServiceSlug field value
func (o *ServiceInstance) GetServiceSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceSlug
}

// GetServiceSlugOk returns a tuple with the ServiceSlug field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetServiceSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceSlug, true
}

// SetServiceSlug sets field value
func (o *ServiceInstance) SetServiceSlug(v string) {
	o.ServiceSlug = v
}

// GetServicePath returns the ServicePath field value
func (o *ServiceInstance) GetServicePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServicePath
}

// GetServicePathOk returns a tuple with the ServicePath field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetServicePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServicePath, true
}

// SetServicePath sets field value
func (o *ServiceInstance) SetServicePath(v string) {
	o.ServicePath = v
}

// GetServiceName returns the ServiceName field value
func (o *ServiceInstance) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *ServiceInstance) SetServiceName(v string) {
	o.ServiceName = v
}

// GetEnv returns the Env field value
func (o *ServiceInstance) GetEnv() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Env
}

// GetEnvOk returns a tuple with the Env field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetEnvOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Env, true
}

// SetEnv sets field value
func (o *ServiceInstance) SetEnv(v map[string]interface{}) {
	o.Env = v
}

// GetSnippets returns the Snippets field value
func (o *ServiceInstance) GetSnippets() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Snippets
}

// GetSnippetsOk returns a tuple with the Snippets field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetSnippetsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Snippets, true
}

// SetSnippets sets field value
func (o *ServiceInstance) SetSnippets(v map[string]interface{}) {
	o.Snippets = v
}

// GetAuthUrl returns the AuthUrl field value
func (o *ServiceInstance) GetAuthUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthUrl
}

// GetAuthUrlOk returns a tuple with the AuthUrl field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetAuthUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthUrl, true
}

// SetAuthUrl sets field value
func (o *ServiceInstance) SetAuthUrl(v string) {
	o.AuthUrl = v
}

// GetExternalAttributes returns the ExternalAttributes field value
func (o *ServiceInstance) GetExternalAttributes() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ExternalAttributes
}

// GetExternalAttributesOk returns a tuple with the ExternalAttributes field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetExternalAttributesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ExternalAttributes, true
}

// SetExternalAttributes sets field value
func (o *ServiceInstance) SetExternalAttributes(v map[string]interface{}) {
	o.ExternalAttributes = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ServiceInstance) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ServiceInstance) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ServiceInstance) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ServiceInstance) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ServiceInstance) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o ServiceInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["config"] = o.Config
	toSerialize["service_slug"] = o.ServiceSlug
	toSerialize["service_path"] = o.ServicePath
	toSerialize["service_name"] = o.ServiceName
	toSerialize["env"] = o.Env
	toSerialize["snippets"] = o.Snippets
	toSerialize["auth_url"] = o.AuthUrl
	toSerialize["external_attributes"] = o.ExternalAttributes
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"config",
		"service_slug",
		"service_path",
		"service_name",
		"env",
		"snippets",
		"auth_url",
		"external_attributes",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceInstance := _ServiceInstance{}

	err = json.Unmarshal(data, &varServiceInstance)

	if err != nil {
		return err
	}

	*o = ServiceInstance(varServiceInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "config")
		delete(additionalProperties, "service_slug")
		delete(additionalProperties, "service_path")
		delete(additionalProperties, "service_name")
		delete(additionalProperties, "env")
		delete(additionalProperties, "snippets")
		delete(additionalProperties, "auth_url")
		delete(additionalProperties, "external_attributes")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceInstance struct {
	value *ServiceInstance
	isSet bool
}

func (v NullableServiceInstance) Get() *ServiceInstance {
	return v.value
}

func (v *NullableServiceInstance) Set(val *ServiceInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceInstance(val *ServiceInstance) *NullableServiceInstance {
	return &NullableServiceInstance{value: val, isSet: true}
}

func (v NullableServiceInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


