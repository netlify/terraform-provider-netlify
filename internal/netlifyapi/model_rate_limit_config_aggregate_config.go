/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the RateLimitConfigAggregateConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateLimitConfigAggregateConfig{}

// RateLimitConfigAggregateConfig struct for RateLimitConfigAggregateConfig
type RateLimitConfigAggregateConfig struct {
	Keys []RateLimitConfigAggregateConfigAggregateKey `json:"keys"`
	AdditionalProperties map[string]interface{}
}

type _RateLimitConfigAggregateConfig RateLimitConfigAggregateConfig

// NewRateLimitConfigAggregateConfig instantiates a new RateLimitConfigAggregateConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateLimitConfigAggregateConfig(keys []RateLimitConfigAggregateConfigAggregateKey) *RateLimitConfigAggregateConfig {
	this := RateLimitConfigAggregateConfig{}
	this.Keys = keys
	return &this
}

// NewRateLimitConfigAggregateConfigWithDefaults instantiates a new RateLimitConfigAggregateConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateLimitConfigAggregateConfigWithDefaults() *RateLimitConfigAggregateConfig {
	this := RateLimitConfigAggregateConfig{}
	return &this
}

// GetKeys returns the Keys field value
func (o *RateLimitConfigAggregateConfig) GetKeys() []RateLimitConfigAggregateConfigAggregateKey {
	if o == nil {
		var ret []RateLimitConfigAggregateConfigAggregateKey
		return ret
	}

	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value
// and a boolean to check if the value has been set.
func (o *RateLimitConfigAggregateConfig) GetKeysOk() ([]RateLimitConfigAggregateConfigAggregateKey, bool) {
	if o == nil {
		return nil, false
	}
	return o.Keys, true
}

// SetKeys sets field value
func (o *RateLimitConfigAggregateConfig) SetKeys(v []RateLimitConfigAggregateConfigAggregateKey) {
	o.Keys = v
}

func (o RateLimitConfigAggregateConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateLimitConfigAggregateConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keys"] = o.Keys

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RateLimitConfigAggregateConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"keys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRateLimitConfigAggregateConfig := _RateLimitConfigAggregateConfig{}

	err = json.Unmarshal(data, &varRateLimitConfigAggregateConfig)

	if err != nil {
		return err
	}

	*o = RateLimitConfigAggregateConfig(varRateLimitConfigAggregateConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "keys")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRateLimitConfigAggregateConfig struct {
	value *RateLimitConfigAggregateConfig
	isSet bool
}

func (v NullableRateLimitConfigAggregateConfig) Get() *RateLimitConfigAggregateConfig {
	return v.value
}

func (v *NullableRateLimitConfigAggregateConfig) Set(val *RateLimitConfigAggregateConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRateLimitConfigAggregateConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRateLimitConfigAggregateConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateLimitConfigAggregateConfig(val *RateLimitConfigAggregateConfig) *NullableRateLimitConfigAggregateConfig {
	return &NullableRateLimitConfigAggregateConfig{value: val, isSet: true}
}

func (v NullableRateLimitConfigAggregateConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateLimitConfigAggregateConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


