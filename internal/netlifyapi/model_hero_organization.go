/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the HeroOrganization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroOrganization{}

// HeroOrganization HeroOrganization model definition, see OrganizationSerializer for other fields
type HeroOrganization struct {
	// The URL of the organization in the Netlify UI
	AdminUrl string `json:"admin_url"`
	// The URL of the zuora account
	ZuoraUrl string `json:"zuora_url"`
	Capabilities map[string]interface{} `json:"capabilities"`
	AdditionalProperties map[string]interface{}
}

type _HeroOrganization HeroOrganization

// NewHeroOrganization instantiates a new HeroOrganization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroOrganization(adminUrl string, zuoraUrl string, capabilities map[string]interface{}) *HeroOrganization {
	this := HeroOrganization{}
	this.AdminUrl = adminUrl
	this.ZuoraUrl = zuoraUrl
	this.Capabilities = capabilities
	return &this
}

// NewHeroOrganizationWithDefaults instantiates a new HeroOrganization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroOrganizationWithDefaults() *HeroOrganization {
	this := HeroOrganization{}
	return &this
}

// GetAdminUrl returns the AdminUrl field value
func (o *HeroOrganization) GetAdminUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminUrl
}

// GetAdminUrlOk returns a tuple with the AdminUrl field value
// and a boolean to check if the value has been set.
func (o *HeroOrganization) GetAdminUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminUrl, true
}

// SetAdminUrl sets field value
func (o *HeroOrganization) SetAdminUrl(v string) {
	o.AdminUrl = v
}

// GetZuoraUrl returns the ZuoraUrl field value
func (o *HeroOrganization) GetZuoraUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZuoraUrl
}

// GetZuoraUrlOk returns a tuple with the ZuoraUrl field value
// and a boolean to check if the value has been set.
func (o *HeroOrganization) GetZuoraUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZuoraUrl, true
}

// SetZuoraUrl sets field value
func (o *HeroOrganization) SetZuoraUrl(v string) {
	o.ZuoraUrl = v
}

// GetCapabilities returns the Capabilities field value
func (o *HeroOrganization) GetCapabilities() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value
// and a boolean to check if the value has been set.
func (o *HeroOrganization) GetCapabilitiesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Capabilities, true
}

// SetCapabilities sets field value
func (o *HeroOrganization) SetCapabilities(v map[string]interface{}) {
	o.Capabilities = v
}

func (o HeroOrganization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroOrganization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["admin_url"] = o.AdminUrl
	toSerialize["zuora_url"] = o.ZuoraUrl
	toSerialize["capabilities"] = o.Capabilities

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HeroOrganization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"admin_url",
		"zuora_url",
		"capabilities",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroOrganization := _HeroOrganization{}

	err = json.Unmarshal(data, &varHeroOrganization)

	if err != nil {
		return err
	}

	*o = HeroOrganization(varHeroOrganization)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "admin_url")
		delete(additionalProperties, "zuora_url")
		delete(additionalProperties, "capabilities")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHeroOrganization struct {
	value *HeroOrganization
	isSet bool
}

func (v NullableHeroOrganization) Get() *HeroOrganization {
	return v.value
}

func (v *NullableHeroOrganization) Set(val *HeroOrganization) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroOrganization) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroOrganization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroOrganization(val *HeroOrganization) *NullableHeroOrganization {
	return &NullableHeroOrganization{value: val, isSet: true}
}

func (v NullableHeroOrganization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroOrganization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


