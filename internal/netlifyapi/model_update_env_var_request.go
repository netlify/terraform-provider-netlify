/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the UpdateEnvVarRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEnvVarRequest{}

// UpdateEnvVarRequest struct for UpdateEnvVarRequest
type UpdateEnvVarRequest struct {
	Values []EnvVarValue `json:"values,omitempty"`
	Scopes []string `json:"scopes,omitempty"`
	IsSecret *bool `json:"is_secret,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateEnvVarRequest UpdateEnvVarRequest

// NewUpdateEnvVarRequest instantiates a new UpdateEnvVarRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEnvVarRequest() *UpdateEnvVarRequest {
	this := UpdateEnvVarRequest{}
	return &this
}

// NewUpdateEnvVarRequestWithDefaults instantiates a new UpdateEnvVarRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEnvVarRequestWithDefaults() *UpdateEnvVarRequest {
	this := UpdateEnvVarRequest{}
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *UpdateEnvVarRequest) GetValues() []EnvVarValue {
	if o == nil || IsNil(o.Values) {
		var ret []EnvVarValue
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEnvVarRequest) GetValuesOk() ([]EnvVarValue, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *UpdateEnvVarRequest) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []EnvVarValue and assigns it to the Values field.
func (o *UpdateEnvVarRequest) SetValues(v []EnvVarValue) {
	o.Values = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *UpdateEnvVarRequest) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEnvVarRequest) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *UpdateEnvVarRequest) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *UpdateEnvVarRequest) SetScopes(v []string) {
	o.Scopes = v
}

// GetIsSecret returns the IsSecret field value if set, zero value otherwise.
func (o *UpdateEnvVarRequest) GetIsSecret() bool {
	if o == nil || IsNil(o.IsSecret) {
		var ret bool
		return ret
	}
	return *o.IsSecret
}

// GetIsSecretOk returns a tuple with the IsSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEnvVarRequest) GetIsSecretOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecret) {
		return nil, false
	}
	return o.IsSecret, true
}

// HasIsSecret returns a boolean if a field has been set.
func (o *UpdateEnvVarRequest) HasIsSecret() bool {
	if o != nil && !IsNil(o.IsSecret) {
		return true
	}

	return false
}

// SetIsSecret gets a reference to the given bool and assigns it to the IsSecret field.
func (o *UpdateEnvVarRequest) SetIsSecret(v bool) {
	o.IsSecret = &v
}

func (o UpdateEnvVarRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEnvVarRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.IsSecret) {
		toSerialize["is_secret"] = o.IsSecret
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateEnvVarRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateEnvVarRequest := _UpdateEnvVarRequest{}

	err = json.Unmarshal(data, &varUpdateEnvVarRequest)

	if err != nil {
		return err
	}

	*o = UpdateEnvVarRequest(varUpdateEnvVarRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "values")
		delete(additionalProperties, "scopes")
		delete(additionalProperties, "is_secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateEnvVarRequest struct {
	value *UpdateEnvVarRequest
	isSet bool
}

func (v NullableUpdateEnvVarRequest) Get() *UpdateEnvVarRequest {
	return v.value
}

func (v *NullableUpdateEnvVarRequest) Set(val *UpdateEnvVarRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEnvVarRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEnvVarRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEnvVarRequest(val *UpdateEnvVarRequest) *NullableUpdateEnvVarRequest {
	return &NullableUpdateEnvVarRequest{value: val, isSet: true}
}

func (v NullableUpdateEnvVarRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEnvVarRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


