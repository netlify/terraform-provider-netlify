/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the SiteProcessingSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteProcessingSettings{}

// SiteProcessingSettings struct for SiteProcessingSettings
type SiteProcessingSettings struct {
	Html *SiteProcessingSettingsHtml `json:"html,omitempty"`
	IgnoreHtmlForms *bool `json:"ignore_html_forms,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteProcessingSettings SiteProcessingSettings

// NewSiteProcessingSettings instantiates a new SiteProcessingSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteProcessingSettings() *SiteProcessingSettings {
	this := SiteProcessingSettings{}
	return &this
}

// NewSiteProcessingSettingsWithDefaults instantiates a new SiteProcessingSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteProcessingSettingsWithDefaults() *SiteProcessingSettings {
	this := SiteProcessingSettings{}
	return &this
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *SiteProcessingSettings) GetHtml() SiteProcessingSettingsHtml {
	if o == nil || IsNil(o.Html) {
		var ret SiteProcessingSettingsHtml
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteProcessingSettings) GetHtmlOk() (*SiteProcessingSettingsHtml, bool) {
	if o == nil || IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *SiteProcessingSettings) HasHtml() bool {
	if o != nil && !IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given SiteProcessingSettingsHtml and assigns it to the Html field.
func (o *SiteProcessingSettings) SetHtml(v SiteProcessingSettingsHtml) {
	o.Html = &v
}

// GetIgnoreHtmlForms returns the IgnoreHtmlForms field value if set, zero value otherwise.
func (o *SiteProcessingSettings) GetIgnoreHtmlForms() bool {
	if o == nil || IsNil(o.IgnoreHtmlForms) {
		var ret bool
		return ret
	}
	return *o.IgnoreHtmlForms
}

// GetIgnoreHtmlFormsOk returns a tuple with the IgnoreHtmlForms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteProcessingSettings) GetIgnoreHtmlFormsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreHtmlForms) {
		return nil, false
	}
	return o.IgnoreHtmlForms, true
}

// HasIgnoreHtmlForms returns a boolean if a field has been set.
func (o *SiteProcessingSettings) HasIgnoreHtmlForms() bool {
	if o != nil && !IsNil(o.IgnoreHtmlForms) {
		return true
	}

	return false
}

// SetIgnoreHtmlForms gets a reference to the given bool and assigns it to the IgnoreHtmlForms field.
func (o *SiteProcessingSettings) SetIgnoreHtmlForms(v bool) {
	o.IgnoreHtmlForms = &v
}

func (o SiteProcessingSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteProcessingSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Html) {
		toSerialize["html"] = o.Html
	}
	if !IsNil(o.IgnoreHtmlForms) {
		toSerialize["ignore_html_forms"] = o.IgnoreHtmlForms
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteProcessingSettings) UnmarshalJSON(data []byte) (err error) {
	varSiteProcessingSettings := _SiteProcessingSettings{}

	err = json.Unmarshal(data, &varSiteProcessingSettings)

	if err != nil {
		return err
	}

	*o = SiteProcessingSettings(varSiteProcessingSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "html")
		delete(additionalProperties, "ignore_html_forms")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteProcessingSettings struct {
	value *SiteProcessingSettings
	isSet bool
}

func (v NullableSiteProcessingSettings) Get() *SiteProcessingSettings {
	return v.value
}

func (v *NullableSiteProcessingSettings) Set(val *SiteProcessingSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteProcessingSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteProcessingSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteProcessingSettings(val *SiteProcessingSettings) *NullableSiteProcessingSettings {
	return &NullableSiteProcessingSettings{value: val, isSet: true}
}

func (v NullableSiteProcessingSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteProcessingSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


