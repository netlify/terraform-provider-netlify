/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the HeroSitesSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeroSitesSummary{}

// HeroSitesSummary HeroSitesSummary model definition
type HeroSitesSummary struct {
	AccountId string `json:"account_id"`
	Total int64 `json:"total"`
	UseFunctionsCount int64 `json:"use_functions_count"`
	UseFormsCount int64 `json:"use_forms_count"`
	UseEdgeFunctionsCount int64 `json:"use_edge_functions_count"`
	UseLmCount int64 `json:"use_lm_count"`
	FunctionsBreakdown map[string]interface{} `json:"functions_breakdown"`
	AdditionalProperties map[string]interface{}
}

type _HeroSitesSummary HeroSitesSummary

// NewHeroSitesSummary instantiates a new HeroSitesSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeroSitesSummary(accountId string, total int64, useFunctionsCount int64, useFormsCount int64, useEdgeFunctionsCount int64, useLmCount int64, functionsBreakdown map[string]interface{}) *HeroSitesSummary {
	this := HeroSitesSummary{}
	this.AccountId = accountId
	this.Total = total
	this.UseFunctionsCount = useFunctionsCount
	this.UseFormsCount = useFormsCount
	this.UseEdgeFunctionsCount = useEdgeFunctionsCount
	this.UseLmCount = useLmCount
	this.FunctionsBreakdown = functionsBreakdown
	return &this
}

// NewHeroSitesSummaryWithDefaults instantiates a new HeroSitesSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeroSitesSummaryWithDefaults() *HeroSitesSummary {
	this := HeroSitesSummary{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *HeroSitesSummary) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *HeroSitesSummary) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *HeroSitesSummary) SetAccountId(v string) {
	o.AccountId = v
}

// GetTotal returns the Total field value
func (o *HeroSitesSummary) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *HeroSitesSummary) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *HeroSitesSummary) SetTotal(v int64) {
	o.Total = v
}

// GetUseFunctionsCount returns the UseFunctionsCount field value
func (o *HeroSitesSummary) GetUseFunctionsCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UseFunctionsCount
}

// GetUseFunctionsCountOk returns a tuple with the UseFunctionsCount field value
// and a boolean to check if the value has been set.
func (o *HeroSitesSummary) GetUseFunctionsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseFunctionsCount, true
}

// SetUseFunctionsCount sets field value
func (o *HeroSitesSummary) SetUseFunctionsCount(v int64) {
	o.UseFunctionsCount = v
}

// GetUseFormsCount returns the UseFormsCount field value
func (o *HeroSitesSummary) GetUseFormsCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UseFormsCount
}

// GetUseFormsCountOk returns a tuple with the UseFormsCount field value
// and a boolean to check if the value has been set.
func (o *HeroSitesSummary) GetUseFormsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseFormsCount, true
}

// SetUseFormsCount sets field value
func (o *HeroSitesSummary) SetUseFormsCount(v int64) {
	o.UseFormsCount = v
}

// GetUseEdgeFunctionsCount returns the UseEdgeFunctionsCount field value
func (o *HeroSitesSummary) GetUseEdgeFunctionsCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UseEdgeFunctionsCount
}

// GetUseEdgeFunctionsCountOk returns a tuple with the UseEdgeFunctionsCount field value
// and a boolean to check if the value has been set.
func (o *HeroSitesSummary) GetUseEdgeFunctionsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseEdgeFunctionsCount, true
}

// SetUseEdgeFunctionsCount sets field value
func (o *HeroSitesSummary) SetUseEdgeFunctionsCount(v int64) {
	o.UseEdgeFunctionsCount = v
}

// GetUseLmCount returns the UseLmCount field value
func (o *HeroSitesSummary) GetUseLmCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UseLmCount
}

// GetUseLmCountOk returns a tuple with the UseLmCount field value
// and a boolean to check if the value has been set.
func (o *HeroSitesSummary) GetUseLmCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseLmCount, true
}

// SetUseLmCount sets field value
func (o *HeroSitesSummary) SetUseLmCount(v int64) {
	o.UseLmCount = v
}

// GetFunctionsBreakdown returns the FunctionsBreakdown field value
func (o *HeroSitesSummary) GetFunctionsBreakdown() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.FunctionsBreakdown
}

// GetFunctionsBreakdownOk returns a tuple with the FunctionsBreakdown field value
// and a boolean to check if the value has been set.
func (o *HeroSitesSummary) GetFunctionsBreakdownOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.FunctionsBreakdown, true
}

// SetFunctionsBreakdown sets field value
func (o *HeroSitesSummary) SetFunctionsBreakdown(v map[string]interface{}) {
	o.FunctionsBreakdown = v
}

func (o HeroSitesSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeroSitesSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["total"] = o.Total
	toSerialize["use_functions_count"] = o.UseFunctionsCount
	toSerialize["use_forms_count"] = o.UseFormsCount
	toSerialize["use_edge_functions_count"] = o.UseEdgeFunctionsCount
	toSerialize["use_lm_count"] = o.UseLmCount
	toSerialize["functions_breakdown"] = o.FunctionsBreakdown

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HeroSitesSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"total",
		"use_functions_count",
		"use_forms_count",
		"use_edge_functions_count",
		"use_lm_count",
		"functions_breakdown",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeroSitesSummary := _HeroSitesSummary{}

	err = json.Unmarshal(data, &varHeroSitesSummary)

	if err != nil {
		return err
	}

	*o = HeroSitesSummary(varHeroSitesSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "total")
		delete(additionalProperties, "use_functions_count")
		delete(additionalProperties, "use_forms_count")
		delete(additionalProperties, "use_edge_functions_count")
		delete(additionalProperties, "use_lm_count")
		delete(additionalProperties, "functions_breakdown")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHeroSitesSummary struct {
	value *HeroSitesSummary
	isSet bool
}

func (v NullableHeroSitesSummary) Get() *HeroSitesSummary {
	return v.value
}

func (v *NullableHeroSitesSummary) Set(val *HeroSitesSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableHeroSitesSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableHeroSitesSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeroSitesSummary(val *HeroSitesSummary) *NullableHeroSitesSummary {
	return &NullableHeroSitesSummary{value: val, isSet: true}
}

func (v NullableHeroSitesSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeroSitesSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


