/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the IPTargetConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPTargetConfig{}

// IPTargetConfig struct for IPTargetConfig
type IPTargetConfig struct {
	Address string `json:"address"`
	Exclude *bool `json:"exclude,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IPTargetConfig IPTargetConfig

// NewIPTargetConfig instantiates a new IPTargetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPTargetConfig(address string) *IPTargetConfig {
	this := IPTargetConfig{}
	this.Address = address
	return &this
}

// NewIPTargetConfigWithDefaults instantiates a new IPTargetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPTargetConfigWithDefaults() *IPTargetConfig {
	this := IPTargetConfig{}
	return &this
}

// GetAddress returns the Address field value
func (o *IPTargetConfig) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *IPTargetConfig) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *IPTargetConfig) SetAddress(v string) {
	o.Address = v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *IPTargetConfig) GetExclude() bool {
	if o == nil || IsNil(o.Exclude) {
		var ret bool
		return ret
	}
	return *o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPTargetConfig) GetExcludeOk() (*bool, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *IPTargetConfig) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given bool and assigns it to the Exclude field.
func (o *IPTargetConfig) SetExclude(v bool) {
	o.Exclude = &v
}

func (o IPTargetConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPTargetConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IPTargetConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIPTargetConfig := _IPTargetConfig{}

	err = json.Unmarshal(data, &varIPTargetConfig)

	if err != nil {
		return err
	}

	*o = IPTargetConfig(varIPTargetConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "exclude")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIPTargetConfig struct {
	value *IPTargetConfig
	isSet bool
}

func (v NullableIPTargetConfig) Get() *IPTargetConfig {
	return v.value
}

func (v *NullableIPTargetConfig) Set(val *IPTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIPTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIPTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPTargetConfig(val *IPTargetConfig) *NullableIPTargetConfig {
	return &NullableIPTargetConfig{value: val, isSet: true}
}

func (v NullableIPTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


