/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the EnvVarValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvVarValue{}

// EnvVarValue Environment variable value model definition
type EnvVarValue struct {
	// The environment variable value's universally unique ID
	Id *string `json:"id,omitempty"`
	// The environment variable's unencrypted value
	Value *string `json:"value,omitempty"`
	// The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`. `branch` must be provided with a value in `context_parameter`.
	Context *string `json:"context,omitempty"`
	// An additional parameter for custom branches. Currently, this is used for providing a branch name when `context=branch`.
	ContextParameter *string `json:"context_parameter,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvVarValue EnvVarValue

// NewEnvVarValue instantiates a new EnvVarValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvVarValue() *EnvVarValue {
	this := EnvVarValue{}
	return &this
}

// NewEnvVarValueWithDefaults instantiates a new EnvVarValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvVarValueWithDefaults() *EnvVarValue {
	this := EnvVarValue{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EnvVarValue) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvVarValue) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EnvVarValue) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EnvVarValue) SetId(v string) {
	o.Id = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EnvVarValue) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvVarValue) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EnvVarValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *EnvVarValue) SetValue(v string) {
	o.Value = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *EnvVarValue) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvVarValue) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *EnvVarValue) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *EnvVarValue) SetContext(v string) {
	o.Context = &v
}

// GetContextParameter returns the ContextParameter field value if set, zero value otherwise.
func (o *EnvVarValue) GetContextParameter() string {
	if o == nil || IsNil(o.ContextParameter) {
		var ret string
		return ret
	}
	return *o.ContextParameter
}

// GetContextParameterOk returns a tuple with the ContextParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvVarValue) GetContextParameterOk() (*string, bool) {
	if o == nil || IsNil(o.ContextParameter) {
		return nil, false
	}
	return o.ContextParameter, true
}

// HasContextParameter returns a boolean if a field has been set.
func (o *EnvVarValue) HasContextParameter() bool {
	if o != nil && !IsNil(o.ContextParameter) {
		return true
	}

	return false
}

// SetContextParameter gets a reference to the given string and assigns it to the ContextParameter field.
func (o *EnvVarValue) SetContextParameter(v string) {
	o.ContextParameter = &v
}

func (o EnvVarValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvVarValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.ContextParameter) {
		toSerialize["context_parameter"] = o.ContextParameter
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvVarValue) UnmarshalJSON(data []byte) (err error) {
	varEnvVarValue := _EnvVarValue{}

	err = json.Unmarshal(data, &varEnvVarValue)

	if err != nil {
		return err
	}

	*o = EnvVarValue(varEnvVarValue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "value")
		delete(additionalProperties, "context")
		delete(additionalProperties, "context_parameter")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvVarValue struct {
	value *EnvVarValue
	isSet bool
}

func (v NullableEnvVarValue) Get() *EnvVarValue {
	return v.value
}

func (v *NullableEnvVarValue) Set(val *EnvVarValue) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvVarValue) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvVarValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvVarValue(val *EnvVarValue) *NullableEnvVarValue {
	return &NullableEnvVarValue{value: val, isSet: true}
}

func (v NullableEnvVarValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvVarValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


