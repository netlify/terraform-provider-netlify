/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Build type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Build{}

// Build struct for Build
type Build struct {
	Id string `json:"id"`
	DeployId string `json:"deploy_id"`
	// The state of the associated deploy, or empty string if there's no associated deploy.
	DeployState string `json:"deploy_state"`
	Sha string `json:"sha"`
	Done bool `json:"done"`
	Error string `json:"error"`
	CreatedAt time.Time `json:"created_at"`
	AdditionalProperties map[string]interface{}
}

type _Build Build

// NewBuild instantiates a new Build object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuild(id string, deployId string, deployState string, sha string, done bool, error_ string, createdAt time.Time) *Build {
	this := Build{}
	this.Id = id
	this.DeployId = deployId
	this.DeployState = deployState
	this.Sha = sha
	this.Done = done
	this.Error = error_
	this.CreatedAt = createdAt
	return &this
}

// NewBuildWithDefaults instantiates a new Build object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildWithDefaults() *Build {
	this := Build{}
	return &this
}

// GetId returns the Id field value
func (o *Build) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Build) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Build) SetId(v string) {
	o.Id = v
}

// GetDeployId returns the DeployId field value
func (o *Build) GetDeployId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployId
}

// GetDeployIdOk returns a tuple with the DeployId field value
// and a boolean to check if the value has been set.
func (o *Build) GetDeployIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployId, true
}

// SetDeployId sets field value
func (o *Build) SetDeployId(v string) {
	o.DeployId = v
}

// GetDeployState returns the DeployState field value
func (o *Build) GetDeployState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployState
}

// GetDeployStateOk returns a tuple with the DeployState field value
// and a boolean to check if the value has been set.
func (o *Build) GetDeployStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployState, true
}

// SetDeployState sets field value
func (o *Build) SetDeployState(v string) {
	o.DeployState = v
}

// GetSha returns the Sha field value
func (o *Build) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *Build) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *Build) SetSha(v string) {
	o.Sha = v
}

// GetDone returns the Done field value
func (o *Build) GetDone() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Done
}

// GetDoneOk returns a tuple with the Done field value
// and a boolean to check if the value has been set.
func (o *Build) GetDoneOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Done, true
}

// SetDone sets field value
func (o *Build) SetDone(v bool) {
	o.Done = v
}

// GetError returns the Error field value
func (o *Build) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *Build) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *Build) SetError(v string) {
	o.Error = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Build) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Build) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Build) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Build) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Build) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["deploy_id"] = o.DeployId
	toSerialize["deploy_state"] = o.DeployState
	toSerialize["sha"] = o.Sha
	toSerialize["done"] = o.Done
	toSerialize["error"] = o.Error
	toSerialize["created_at"] = o.CreatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Build) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"deploy_id",
		"deploy_state",
		"sha",
		"done",
		"error",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuild := _Build{}

	err = json.Unmarshal(data, &varBuild)

	if err != nil {
		return err
	}

	*o = Build(varBuild)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "deploy_id")
		delete(additionalProperties, "deploy_state")
		delete(additionalProperties, "sha")
		delete(additionalProperties, "done")
		delete(additionalProperties, "error")
		delete(additionalProperties, "created_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBuild struct {
	value *Build
	isSet bool
}

func (v NullableBuild) Get() *Build {
	return v.value
}

func (v *NullableBuild) Set(val *Build) {
	v.value = val
	v.isSet = true
}

func (v NullableBuild) IsSet() bool {
	return v.isSet
}

func (v *NullableBuild) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuild(val *Build) *NullableBuild {
	return &NullableBuild{value: val, isSet: true}
}

func (v NullableBuild) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuild) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


