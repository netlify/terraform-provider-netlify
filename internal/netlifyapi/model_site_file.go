/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SiteFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteFile{}

// SiteFile struct for SiteFile
type SiteFile struct {
	// The path of the file
	Id string `json:"id"`
	// The path of the file
	Path string `json:"path"`
	// The sha of the file
	Sha string `json:"sha"`
	// The mime_type of the file
	MimeType string `json:"mime_type"`
	// The size of the file in bytes
	Size int64 `json:"size"`
	// The site ID of the file
	SiteId string `json:"site_id"`
	// The deploy ID of the file
	DeployId string `json:"deploy_id"`
	AdditionalProperties map[string]interface{}
}

type _SiteFile SiteFile

// NewSiteFile instantiates a new SiteFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteFile(id string, path string, sha string, mimeType string, size int64, siteId string, deployId string) *SiteFile {
	this := SiteFile{}
	this.Id = id
	this.Path = path
	this.Sha = sha
	this.MimeType = mimeType
	this.Size = size
	this.SiteId = siteId
	this.DeployId = deployId
	return &this
}

// NewSiteFileWithDefaults instantiates a new SiteFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteFileWithDefaults() *SiteFile {
	this := SiteFile{}
	return &this
}

// GetId returns the Id field value
func (o *SiteFile) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SiteFile) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SiteFile) SetId(v string) {
	o.Id = v
}

// GetPath returns the Path field value
func (o *SiteFile) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *SiteFile) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *SiteFile) SetPath(v string) {
	o.Path = v
}

// GetSha returns the Sha field value
func (o *SiteFile) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *SiteFile) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *SiteFile) SetSha(v string) {
	o.Sha = v
}

// GetMimeType returns the MimeType field value
func (o *SiteFile) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *SiteFile) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *SiteFile) SetMimeType(v string) {
	o.MimeType = v
}

// GetSize returns the Size field value
func (o *SiteFile) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *SiteFile) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *SiteFile) SetSize(v int64) {
	o.Size = v
}

// GetSiteId returns the SiteId field value
func (o *SiteFile) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *SiteFile) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *SiteFile) SetSiteId(v string) {
	o.SiteId = v
}

// GetDeployId returns the DeployId field value
func (o *SiteFile) GetDeployId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployId
}

// GetDeployIdOk returns a tuple with the DeployId field value
// and a boolean to check if the value has been set.
func (o *SiteFile) GetDeployIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployId, true
}

// SetDeployId sets field value
func (o *SiteFile) SetDeployId(v string) {
	o.DeployId = v
}

func (o SiteFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["path"] = o.Path
	toSerialize["sha"] = o.Sha
	toSerialize["mime_type"] = o.MimeType
	toSerialize["size"] = o.Size
	toSerialize["site_id"] = o.SiteId
	toSerialize["deploy_id"] = o.DeployId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"path",
		"sha",
		"mime_type",
		"size",
		"site_id",
		"deploy_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSiteFile := _SiteFile{}

	err = json.Unmarshal(data, &varSiteFile)

	if err != nil {
		return err
	}

	*o = SiteFile(varSiteFile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "path")
		delete(additionalProperties, "sha")
		delete(additionalProperties, "mime_type")
		delete(additionalProperties, "size")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "deploy_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteFile struct {
	value *SiteFile
	isSet bool
}

func (v NullableSiteFile) Get() *SiteFile {
	return v.value
}

func (v *NullableSiteFile) Set(val *SiteFile) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteFile) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteFile(val *SiteFile) *NullableSiteFile {
	return &NullableSiteFile{value: val, isSet: true}
}

func (v NullableSiteFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


