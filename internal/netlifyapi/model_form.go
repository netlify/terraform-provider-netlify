/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Form type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Form{}

// Form struct for Form
type Form struct {
	Id string `json:"id"`
	SiteId string `json:"site_id"`
	Name string `json:"name"`
	Paths []string `json:"paths"`
	SubmissionCount int64 `json:"submission_count"`
	Fields []map[string]interface{} `json:"fields"`
	Honeypot bool `json:"honeypot"`
	Recaptcha bool `json:"recaptcha"`
	LastSubmissionAt time.Time `json:"last_submission_at"`
	CreatedAt time.Time `json:"created_at"`
	AdditionalProperties map[string]interface{}
}

type _Form Form

// NewForm instantiates a new Form object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForm(id string, siteId string, name string, paths []string, submissionCount int64, fields []map[string]interface{}, honeypot bool, recaptcha bool, lastSubmissionAt time.Time, createdAt time.Time) *Form {
	this := Form{}
	this.Id = id
	this.SiteId = siteId
	this.Name = name
	this.Paths = paths
	this.SubmissionCount = submissionCount
	this.Fields = fields
	this.Honeypot = honeypot
	this.Recaptcha = recaptcha
	this.LastSubmissionAt = lastSubmissionAt
	this.CreatedAt = createdAt
	return &this
}

// NewFormWithDefaults instantiates a new Form object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormWithDefaults() *Form {
	this := Form{}
	return &this
}

// GetId returns the Id field value
func (o *Form) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Form) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Form) SetId(v string) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *Form) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *Form) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *Form) SetSiteId(v string) {
	o.SiteId = v
}

// GetName returns the Name field value
func (o *Form) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Form) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Form) SetName(v string) {
	o.Name = v
}

// GetPaths returns the Paths field value
func (o *Form) GetPaths() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value
// and a boolean to check if the value has been set.
func (o *Form) GetPathsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paths, true
}

// SetPaths sets field value
func (o *Form) SetPaths(v []string) {
	o.Paths = v
}

// GetSubmissionCount returns the SubmissionCount field value
func (o *Form) GetSubmissionCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SubmissionCount
}

// GetSubmissionCountOk returns a tuple with the SubmissionCount field value
// and a boolean to check if the value has been set.
func (o *Form) GetSubmissionCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubmissionCount, true
}

// SetSubmissionCount sets field value
func (o *Form) SetSubmissionCount(v int64) {
	o.SubmissionCount = v
}

// GetFields returns the Fields field value
func (o *Form) GetFields() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *Form) GetFieldsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *Form) SetFields(v []map[string]interface{}) {
	o.Fields = v
}

// GetHoneypot returns the Honeypot field value
func (o *Form) GetHoneypot() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Honeypot
}

// GetHoneypotOk returns a tuple with the Honeypot field value
// and a boolean to check if the value has been set.
func (o *Form) GetHoneypotOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Honeypot, true
}

// SetHoneypot sets field value
func (o *Form) SetHoneypot(v bool) {
	o.Honeypot = v
}

// GetRecaptcha returns the Recaptcha field value
func (o *Form) GetRecaptcha() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Recaptcha
}

// GetRecaptchaOk returns a tuple with the Recaptcha field value
// and a boolean to check if the value has been set.
func (o *Form) GetRecaptchaOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recaptcha, true
}

// SetRecaptcha sets field value
func (o *Form) SetRecaptcha(v bool) {
	o.Recaptcha = v
}

// GetLastSubmissionAt returns the LastSubmissionAt field value
func (o *Form) GetLastSubmissionAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastSubmissionAt
}

// GetLastSubmissionAtOk returns a tuple with the LastSubmissionAt field value
// and a boolean to check if the value has been set.
func (o *Form) GetLastSubmissionAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSubmissionAt, true
}

// SetLastSubmissionAt sets field value
func (o *Form) SetLastSubmissionAt(v time.Time) {
	o.LastSubmissionAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Form) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Form) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Form) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Form) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Form) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["site_id"] = o.SiteId
	toSerialize["name"] = o.Name
	toSerialize["paths"] = o.Paths
	toSerialize["submission_count"] = o.SubmissionCount
	toSerialize["fields"] = o.Fields
	toSerialize["honeypot"] = o.Honeypot
	toSerialize["recaptcha"] = o.Recaptcha
	toSerialize["last_submission_at"] = o.LastSubmissionAt
	toSerialize["created_at"] = o.CreatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Form) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"site_id",
		"name",
		"paths",
		"submission_count",
		"fields",
		"honeypot",
		"recaptcha",
		"last_submission_at",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varForm := _Form{}

	err = json.Unmarshal(data, &varForm)

	if err != nil {
		return err
	}

	*o = Form(varForm)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "paths")
		delete(additionalProperties, "submission_count")
		delete(additionalProperties, "fields")
		delete(additionalProperties, "honeypot")
		delete(additionalProperties, "recaptcha")
		delete(additionalProperties, "last_submission_at")
		delete(additionalProperties, "created_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableForm struct {
	value *Form
	isSet bool
}

func (v NullableForm) Get() *Form {
	return v.value
}

func (v *NullableForm) Set(val *Form) {
	v.value = val
	v.isSet = true
}

func (v NullableForm) IsSet() bool {
	return v.isSet
}

func (v *NullableForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForm(val *Form) *NullableForm {
	return &NullableForm{value: val, isSet: true}
}

func (v NullableForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


