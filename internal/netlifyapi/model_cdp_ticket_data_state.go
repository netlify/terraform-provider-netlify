/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CDPTicketDataState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDPTicketDataState{}

// CDPTicketDataState struct for CDPTicketDataState
type CDPTicketDataState struct {
	Color string `json:"color"`
	CreatedAt time.Time `json:"created_at"`
	Description string `json:"description"`
	Id string `json:"id"`
	Name string `json:"name"`
	Position int64 `json:"position"`
	StateType string `json:"state_type"`
	AdditionalProperties map[string]interface{}
}

type _CDPTicketDataState CDPTicketDataState

// NewCDPTicketDataState instantiates a new CDPTicketDataState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDPTicketDataState(color string, createdAt time.Time, description string, id string, name string, position int64, stateType string) *CDPTicketDataState {
	this := CDPTicketDataState{}
	this.Color = color
	this.CreatedAt = createdAt
	this.Description = description
	this.Id = id
	this.Name = name
	this.Position = position
	this.StateType = stateType
	return &this
}

// NewCDPTicketDataStateWithDefaults instantiates a new CDPTicketDataState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDPTicketDataStateWithDefaults() *CDPTicketDataState {
	this := CDPTicketDataState{}
	return &this
}

// GetColor returns the Color field value
func (o *CDPTicketDataState) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataState) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *CDPTicketDataState) SetColor(v string) {
	o.Color = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CDPTicketDataState) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataState) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CDPTicketDataState) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value
func (o *CDPTicketDataState) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataState) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CDPTicketDataState) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *CDPTicketDataState) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataState) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CDPTicketDataState) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CDPTicketDataState) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataState) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CDPTicketDataState) SetName(v string) {
	o.Name = v
}

// GetPosition returns the Position field value
func (o *CDPTicketDataState) GetPosition() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataState) GetPositionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *CDPTicketDataState) SetPosition(v int64) {
	o.Position = v
}

// GetStateType returns the StateType field value
func (o *CDPTicketDataState) GetStateType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateType
}

// GetStateTypeOk returns a tuple with the StateType field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataState) GetStateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateType, true
}

// SetStateType sets field value
func (o *CDPTicketDataState) SetStateType(v string) {
	o.StateType = v
}

func (o CDPTicketDataState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDPTicketDataState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["color"] = o.Color
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["position"] = o.Position
	toSerialize["state_type"] = o.StateType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CDPTicketDataState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"color",
		"created_at",
		"description",
		"id",
		"name",
		"position",
		"state_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDPTicketDataState := _CDPTicketDataState{}

	err = json.Unmarshal(data, &varCDPTicketDataState)

	if err != nil {
		return err
	}

	*o = CDPTicketDataState(varCDPTicketDataState)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "color")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "position")
		delete(additionalProperties, "state_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCDPTicketDataState struct {
	value *CDPTicketDataState
	isSet bool
}

func (v NullableCDPTicketDataState) Get() *CDPTicketDataState {
	return v.value
}

func (v *NullableCDPTicketDataState) Set(val *CDPTicketDataState) {
	v.value = val
	v.isSet = true
}

func (v NullableCDPTicketDataState) IsSet() bool {
	return v.isSet
}

func (v *NullableCDPTicketDataState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDPTicketDataState(val *CDPTicketDataState) *NullableCDPTicketDataState {
	return &NullableCDPTicketDataState{value: val, isSet: true}
}

func (v NullableCDPTicketDataState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDPTicketDataState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


