/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the WafPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WafPolicy{}

// WafPolicy struct for WafPolicy
type WafPolicy struct {
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	Description string `json:"description"`
	RuleSets []WafPolicyRuleSetsInner `json:"rule_sets"`
	AdditionalProperties map[string]interface{}
}

type _WafPolicy WafPolicy

// NewWafPolicy instantiates a new WafPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWafPolicy(name string, description string, ruleSets []WafPolicyRuleSetsInner) *WafPolicy {
	this := WafPolicy{}
	this.Name = name
	this.Description = description
	this.RuleSets = ruleSets
	return &this
}

// NewWafPolicyWithDefaults instantiates a new WafPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWafPolicyWithDefaults() *WafPolicy {
	this := WafPolicy{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WafPolicy) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafPolicy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WafPolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WafPolicy) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *WafPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WafPolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WafPolicy) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *WafPolicy) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *WafPolicy) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *WafPolicy) SetDescription(v string) {
	o.Description = v
}

// GetRuleSets returns the RuleSets field value
func (o *WafPolicy) GetRuleSets() []WafPolicyRuleSetsInner {
	if o == nil {
		var ret []WafPolicyRuleSetsInner
		return ret
	}

	return o.RuleSets
}

// GetRuleSetsOk returns a tuple with the RuleSets field value
// and a boolean to check if the value has been set.
func (o *WafPolicy) GetRuleSetsOk() ([]WafPolicyRuleSetsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.RuleSets, true
}

// SetRuleSets sets field value
func (o *WafPolicy) SetRuleSets(v []WafPolicyRuleSetsInner) {
	o.RuleSets = v
}

func (o WafPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WafPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["rule_sets"] = o.RuleSets

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WafPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"rule_sets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWafPolicy := _WafPolicy{}

	err = json.Unmarshal(data, &varWafPolicy)

	if err != nil {
		return err
	}

	*o = WafPolicy(varWafPolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "rule_sets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWafPolicy struct {
	value *WafPolicy
	isSet bool
}

func (v NullableWafPolicy) Get() *WafPolicy {
	return v.value
}

func (v *NullableWafPolicy) Set(val *WafPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableWafPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableWafPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWafPolicy(val *WafPolicy) *NullableWafPolicy {
	return &NullableWafPolicy{value: val, isSet: true}
}

func (v NullableWafPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWafPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


