/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CDPTicketDataProject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDPTicketDataProject{}

// CDPTicketDataProject struct for CDPTicketDataProject
type CDPTicketDataProject struct {
	Archived bool `json:"archived"`
	Color string `json:"color"`
	CreatedAt time.Time `json:"created_at"`
	Description string `json:"description"`
	Id string `json:"id"`
	Name string `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
	// An array of issue types of the project. Only available for Jira
	IssueTypes []CDPTicketDataProjectIssueType `json:"issue_types"`
	AdditionalProperties map[string]interface{}
}

type _CDPTicketDataProject CDPTicketDataProject

// NewCDPTicketDataProject instantiates a new CDPTicketDataProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDPTicketDataProject(archived bool, color string, createdAt time.Time, description string, id string, name string, updatedAt time.Time, issueTypes []CDPTicketDataProjectIssueType) *CDPTicketDataProject {
	this := CDPTicketDataProject{}
	this.Archived = archived
	this.Color = color
	this.CreatedAt = createdAt
	this.Description = description
	this.Id = id
	this.Name = name
	this.UpdatedAt = updatedAt
	this.IssueTypes = issueTypes
	return &this
}

// NewCDPTicketDataProjectWithDefaults instantiates a new CDPTicketDataProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDPTicketDataProjectWithDefaults() *CDPTicketDataProject {
	this := CDPTicketDataProject{}
	return &this
}

// GetArchived returns the Archived field value
func (o *CDPTicketDataProject) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataProject) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *CDPTicketDataProject) SetArchived(v bool) {
	o.Archived = v
}

// GetColor returns the Color field value
func (o *CDPTicketDataProject) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataProject) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *CDPTicketDataProject) SetColor(v string) {
	o.Color = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CDPTicketDataProject) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataProject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CDPTicketDataProject) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value
func (o *CDPTicketDataProject) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataProject) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CDPTicketDataProject) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *CDPTicketDataProject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataProject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CDPTicketDataProject) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CDPTicketDataProject) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataProject) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CDPTicketDataProject) SetName(v string) {
	o.Name = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CDPTicketDataProject) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataProject) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CDPTicketDataProject) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetIssueTypes returns the IssueTypes field value
func (o *CDPTicketDataProject) GetIssueTypes() []CDPTicketDataProjectIssueType {
	if o == nil {
		var ret []CDPTicketDataProjectIssueType
		return ret
	}

	return o.IssueTypes
}

// GetIssueTypesOk returns a tuple with the IssueTypes field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataProject) GetIssueTypesOk() ([]CDPTicketDataProjectIssueType, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssueTypes, true
}

// SetIssueTypes sets field value
func (o *CDPTicketDataProject) SetIssueTypes(v []CDPTicketDataProjectIssueType) {
	o.IssueTypes = v
}

func (o CDPTicketDataProject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDPTicketDataProject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["archived"] = o.Archived
	toSerialize["color"] = o.Color
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["issue_types"] = o.IssueTypes

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CDPTicketDataProject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"archived",
		"color",
		"created_at",
		"description",
		"id",
		"name",
		"updated_at",
		"issue_types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDPTicketDataProject := _CDPTicketDataProject{}

	err = json.Unmarshal(data, &varCDPTicketDataProject)

	if err != nil {
		return err
	}

	*o = CDPTicketDataProject(varCDPTicketDataProject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "archived")
		delete(additionalProperties, "color")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "issue_types")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCDPTicketDataProject struct {
	value *CDPTicketDataProject
	isSet bool
}

func (v NullableCDPTicketDataProject) Get() *CDPTicketDataProject {
	return v.value
}

func (v *NullableCDPTicketDataProject) Set(val *CDPTicketDataProject) {
	v.value = val
	v.isSet = true
}

func (v NullableCDPTicketDataProject) IsSet() bool {
	return v.isSet
}

func (v *NullableCDPTicketDataProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDPTicketDataProject(val *CDPTicketDataProject) *NullableCDPTicketDataProject {
	return &NullableCDPTicketDataProject{value: val, isSet: true}
}

func (v NullableCDPTicketDataProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDPTicketDataProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


