/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the RateLimitConfigRateLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateLimitConfigRateLimits{}

// RateLimitConfigRateLimits struct for RateLimitConfigRateLimits
type RateLimitConfigRateLimits struct {
	Window int64 `json:"window"`
	AdditionalProperties map[string]interface{}
}

type _RateLimitConfigRateLimits RateLimitConfigRateLimits

// NewRateLimitConfigRateLimits instantiates a new RateLimitConfigRateLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateLimitConfigRateLimits(window int64) *RateLimitConfigRateLimits {
	this := RateLimitConfigRateLimits{}
	this.Window = window
	return &this
}

// NewRateLimitConfigRateLimitsWithDefaults instantiates a new RateLimitConfigRateLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateLimitConfigRateLimitsWithDefaults() *RateLimitConfigRateLimits {
	this := RateLimitConfigRateLimits{}
	return &this
}

// GetWindow returns the Window field value
func (o *RateLimitConfigRateLimits) GetWindow() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Window
}

// GetWindowOk returns a tuple with the Window field value
// and a boolean to check if the value has been set.
func (o *RateLimitConfigRateLimits) GetWindowOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Window, true
}

// SetWindow sets field value
func (o *RateLimitConfigRateLimits) SetWindow(v int64) {
	o.Window = v
}

func (o RateLimitConfigRateLimits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateLimitConfigRateLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["window"] = o.Window

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RateLimitConfigRateLimits) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"window",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRateLimitConfigRateLimits := _RateLimitConfigRateLimits{}

	err = json.Unmarshal(data, &varRateLimitConfigRateLimits)

	if err != nil {
		return err
	}

	*o = RateLimitConfigRateLimits(varRateLimitConfigRateLimits)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "window")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRateLimitConfigRateLimits struct {
	value *RateLimitConfigRateLimits
	isSet bool
}

func (v NullableRateLimitConfigRateLimits) Get() *RateLimitConfigRateLimits {
	return v.value
}

func (v *NullableRateLimitConfigRateLimits) Set(val *RateLimitConfigRateLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableRateLimitConfigRateLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableRateLimitConfigRateLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateLimitConfigRateLimits(val *RateLimitConfigRateLimits) *NullableRateLimitConfigRateLimits {
	return &NullableRateLimitConfigRateLimits{value: val, isSet: true}
}

func (v NullableRateLimitConfigRateLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateLimitConfigRateLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


