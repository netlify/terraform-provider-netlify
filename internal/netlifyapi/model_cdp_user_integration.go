/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CDPUserIntegration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDPUserIntegration{}

// CDPUserIntegration struct for CDPUserIntegration
type CDPUserIntegration struct {
	// The ID of the UserIntegration
	Id string `json:"id"`
	// The slug if the integration provider
	Slug string `json:"slug"`
	// When the Event ticket was created
	CreatedAt time.Time `json:"created_at"`
	// When the Event ticket was created
	UpdatedAt time.Time `json:"updated_at"`
	// Information about the user integration
	IntegrationData map[string]interface{} `json:"integration_data"`
	AdditionalProperties map[string]interface{}
}

type _CDPUserIntegration CDPUserIntegration

// NewCDPUserIntegration instantiates a new CDPUserIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDPUserIntegration(id string, slug string, createdAt time.Time, updatedAt time.Time, integrationData map[string]interface{}) *CDPUserIntegration {
	this := CDPUserIntegration{}
	this.Id = id
	this.Slug = slug
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.IntegrationData = integrationData
	return &this
}

// NewCDPUserIntegrationWithDefaults instantiates a new CDPUserIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDPUserIntegrationWithDefaults() *CDPUserIntegration {
	this := CDPUserIntegration{}
	return &this
}

// GetId returns the Id field value
func (o *CDPUserIntegration) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CDPUserIntegration) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CDPUserIntegration) SetId(v string) {
	o.Id = v
}

// GetSlug returns the Slug field value
func (o *CDPUserIntegration) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *CDPUserIntegration) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *CDPUserIntegration) SetSlug(v string) {
	o.Slug = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CDPUserIntegration) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPUserIntegration) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CDPUserIntegration) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CDPUserIntegration) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPUserIntegration) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CDPUserIntegration) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetIntegrationData returns the IntegrationData field value
func (o *CDPUserIntegration) GetIntegrationData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.IntegrationData
}

// GetIntegrationDataOk returns a tuple with the IntegrationData field value
// and a boolean to check if the value has been set.
func (o *CDPUserIntegration) GetIntegrationDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.IntegrationData, true
}

// SetIntegrationData sets field value
func (o *CDPUserIntegration) SetIntegrationData(v map[string]interface{}) {
	o.IntegrationData = v
}

func (o CDPUserIntegration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDPUserIntegration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["slug"] = o.Slug
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["integration_data"] = o.IntegrationData

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CDPUserIntegration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"slug",
		"created_at",
		"updated_at",
		"integration_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDPUserIntegration := _CDPUserIntegration{}

	err = json.Unmarshal(data, &varCDPUserIntegration)

	if err != nil {
		return err
	}

	*o = CDPUserIntegration(varCDPUserIntegration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "integration_data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCDPUserIntegration struct {
	value *CDPUserIntegration
	isSet bool
}

func (v NullableCDPUserIntegration) Get() *CDPUserIntegration {
	return v.value
}

func (v *NullableCDPUserIntegration) Set(val *CDPUserIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableCDPUserIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableCDPUserIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDPUserIntegration(val *CDPUserIntegration) *NullableCDPUserIntegration {
	return &NullableCDPUserIntegration{value: val, isSet: true}
}

func (v NullableCDPUserIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDPUserIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


