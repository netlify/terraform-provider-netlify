/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the RewriteConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RewriteConfig{}

// RewriteConfig struct for RewriteConfig
type RewriteConfig struct {
	Aggregate RateLimitConfigAggregateConfig `json:"aggregate"`
	Limits RateLimitConfigRateLimits `json:"limits"`
	RateLimitConfig RateLimitConfig `json:"rate_limit_config"`
	// The path and query to rewrite the request to
	To string `json:"to"`
	AdditionalProperties map[string]interface{}
}

type _RewriteConfig RewriteConfig

// NewRewriteConfig instantiates a new RewriteConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRewriteConfig(aggregate RateLimitConfigAggregateConfig, limits RateLimitConfigRateLimits, rateLimitConfig RateLimitConfig, to string) *RewriteConfig {
	this := RewriteConfig{}
	this.Aggregate = aggregate
	this.Limits = limits
	this.RateLimitConfig = rateLimitConfig
	this.To = to
	return &this
}

// NewRewriteConfigWithDefaults instantiates a new RewriteConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRewriteConfigWithDefaults() *RewriteConfig {
	this := RewriteConfig{}
	return &this
}

// GetAggregate returns the Aggregate field value
func (o *RewriteConfig) GetAggregate() RateLimitConfigAggregateConfig {
	if o == nil {
		var ret RateLimitConfigAggregateConfig
		return ret
	}

	return o.Aggregate
}

// GetAggregateOk returns a tuple with the Aggregate field value
// and a boolean to check if the value has been set.
func (o *RewriteConfig) GetAggregateOk() (*RateLimitConfigAggregateConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregate, true
}

// SetAggregate sets field value
func (o *RewriteConfig) SetAggregate(v RateLimitConfigAggregateConfig) {
	o.Aggregate = v
}

// GetLimits returns the Limits field value
func (o *RewriteConfig) GetLimits() RateLimitConfigRateLimits {
	if o == nil {
		var ret RateLimitConfigRateLimits
		return ret
	}

	return o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value
// and a boolean to check if the value has been set.
func (o *RewriteConfig) GetLimitsOk() (*RateLimitConfigRateLimits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limits, true
}

// SetLimits sets field value
func (o *RewriteConfig) SetLimits(v RateLimitConfigRateLimits) {
	o.Limits = v
}

// GetRateLimitConfig returns the RateLimitConfig field value
func (o *RewriteConfig) GetRateLimitConfig() RateLimitConfig {
	if o == nil {
		var ret RateLimitConfig
		return ret
	}

	return o.RateLimitConfig
}

// GetRateLimitConfigOk returns a tuple with the RateLimitConfig field value
// and a boolean to check if the value has been set.
func (o *RewriteConfig) GetRateLimitConfigOk() (*RateLimitConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RateLimitConfig, true
}

// SetRateLimitConfig sets field value
func (o *RewriteConfig) SetRateLimitConfig(v RateLimitConfig) {
	o.RateLimitConfig = v
}

// GetTo returns the To field value
func (o *RewriteConfig) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *RewriteConfig) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *RewriteConfig) SetTo(v string) {
	o.To = v
}

func (o RewriteConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RewriteConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aggregate"] = o.Aggregate
	toSerialize["limits"] = o.Limits
	toSerialize["rate_limit_config"] = o.RateLimitConfig
	toSerialize["to"] = o.To

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RewriteConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregate",
		"limits",
		"rate_limit_config",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRewriteConfig := _RewriteConfig{}

	err = json.Unmarshal(data, &varRewriteConfig)

	if err != nil {
		return err
	}

	*o = RewriteConfig(varRewriteConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aggregate")
		delete(additionalProperties, "limits")
		delete(additionalProperties, "rate_limit_config")
		delete(additionalProperties, "to")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRewriteConfig struct {
	value *RewriteConfig
	isSet bool
}

func (v NullableRewriteConfig) Get() *RewriteConfig {
	return v.value
}

func (v *NullableRewriteConfig) Set(val *RewriteConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRewriteConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRewriteConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRewriteConfig(val *RewriteConfig) *NullableRewriteConfig {
	return &NullableRewriteConfig{value: val, isSet: true}
}

func (v NullableRewriteConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRewriteConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


