/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CDPTicket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDPTicket{}

// CDPTicket struct for CDPTicket
type CDPTicket struct {
	// Whether the ticket is only visible to members with certain access
	Confidential bool `json:"confidential"`
	// The body text of the ticket
	Description string `json:"description"`
	// The Date the ticket is due
	DueAt time.Time `json:"due_at"`
	// The Epic ID for the ticket
	Epic string `json:"epic"`
	// The estimate for the ticket
	Estimate int64 `json:"estimate"`
	// The labels for the ticket
	Labels []string `json:"labels"`
	// The IDs for the owners of the ticket
	Owners []string `json:"owners"`
	// The priority of the ticket
	Priority int64 `json:"priority"`
	// The project id for the ticket
	Project string `json:"project"`
	// The sprint id for the ticket
	Sprint string `json:"sprint"`
	// The state of the ticket
	State string `json:"state"`
	// The IDs for the subscribers to the ticket
	Subscribers []string `json:"subscribers"`
	// The team ID of the ticket
	Team string `json:"team"`
	// The title of the ticket
	Title string `json:"title"`
	// The type of the ticket
	TicketType string `json:"ticket_type"`
	// The ticket number
	Number string `json:"number"`
	// The web url of the ticket
	Url string `json:"url"`
	// The Ticket's service (github, clubhouse, trello etc)
	Service string `json:"service"`
	AdditionalProperties map[string]interface{}
}

type _CDPTicket CDPTicket

// NewCDPTicket instantiates a new CDPTicket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDPTicket(confidential bool, description string, dueAt time.Time, epic string, estimate int64, labels []string, owners []string, priority int64, project string, sprint string, state string, subscribers []string, team string, title string, ticketType string, number string, url string, service string) *CDPTicket {
	this := CDPTicket{}
	this.Confidential = confidential
	this.Description = description
	this.DueAt = dueAt
	this.Epic = epic
	this.Estimate = estimate
	this.Labels = labels
	this.Owners = owners
	this.Priority = priority
	this.Project = project
	this.Sprint = sprint
	this.State = state
	this.Subscribers = subscribers
	this.Team = team
	this.Title = title
	this.TicketType = ticketType
	this.Number = number
	this.Url = url
	this.Service = service
	return &this
}

// NewCDPTicketWithDefaults instantiates a new CDPTicket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDPTicketWithDefaults() *CDPTicket {
	this := CDPTicket{}
	return &this
}

// GetConfidential returns the Confidential field value
func (o *CDPTicket) GetConfidential() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Confidential
}

// GetConfidentialOk returns a tuple with the Confidential field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetConfidentialOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Confidential, true
}

// SetConfidential sets field value
func (o *CDPTicket) SetConfidential(v bool) {
	o.Confidential = v
}

// GetDescription returns the Description field value
func (o *CDPTicket) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CDPTicket) SetDescription(v string) {
	o.Description = v
}

// GetDueAt returns the DueAt field value
func (o *CDPTicket) GetDueAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DueAt
}

// GetDueAtOk returns a tuple with the DueAt field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetDueAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DueAt, true
}

// SetDueAt sets field value
func (o *CDPTicket) SetDueAt(v time.Time) {
	o.DueAt = v
}

// GetEpic returns the Epic field value
func (o *CDPTicket) GetEpic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Epic
}

// GetEpicOk returns a tuple with the Epic field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetEpicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Epic, true
}

// SetEpic sets field value
func (o *CDPTicket) SetEpic(v string) {
	o.Epic = v
}

// GetEstimate returns the Estimate field value
func (o *CDPTicket) GetEstimate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Estimate
}

// GetEstimateOk returns a tuple with the Estimate field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetEstimateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Estimate, true
}

// SetEstimate sets field value
func (o *CDPTicket) SetEstimate(v int64) {
	o.Estimate = v
}

// GetLabels returns the Labels field value
func (o *CDPTicket) GetLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetLabelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *CDPTicket) SetLabels(v []string) {
	o.Labels = v
}

// GetOwners returns the Owners field value
func (o *CDPTicket) GetOwners() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetOwnersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owners, true
}

// SetOwners sets field value
func (o *CDPTicket) SetOwners(v []string) {
	o.Owners = v
}

// GetPriority returns the Priority field value
func (o *CDPTicket) GetPriority() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetPriorityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *CDPTicket) SetPriority(v int64) {
	o.Priority = v
}

// GetProject returns the Project field value
func (o *CDPTicket) GetProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *CDPTicket) SetProject(v string) {
	o.Project = v
}

// GetSprint returns the Sprint field value
func (o *CDPTicket) GetSprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sprint
}

// GetSprintOk returns a tuple with the Sprint field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetSprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sprint, true
}

// SetSprint sets field value
func (o *CDPTicket) SetSprint(v string) {
	o.Sprint = v
}

// GetState returns the State field value
func (o *CDPTicket) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CDPTicket) SetState(v string) {
	o.State = v
}

// GetSubscribers returns the Subscribers field value
func (o *CDPTicket) GetSubscribers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Subscribers
}

// GetSubscribersOk returns a tuple with the Subscribers field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetSubscribersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subscribers, true
}

// SetSubscribers sets field value
func (o *CDPTicket) SetSubscribers(v []string) {
	o.Subscribers = v
}

// GetTeam returns the Team field value
func (o *CDPTicket) GetTeam() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Team
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetTeamOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team, true
}

// SetTeam sets field value
func (o *CDPTicket) SetTeam(v string) {
	o.Team = v
}

// GetTitle returns the Title field value
func (o *CDPTicket) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CDPTicket) SetTitle(v string) {
	o.Title = v
}

// GetTicketType returns the TicketType field value
func (o *CDPTicket) GetTicketType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TicketType
}

// GetTicketTypeOk returns a tuple with the TicketType field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetTicketTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TicketType, true
}

// SetTicketType sets field value
func (o *CDPTicket) SetTicketType(v string) {
	o.TicketType = v
}

// GetNumber returns the Number field value
func (o *CDPTicket) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *CDPTicket) SetNumber(v string) {
	o.Number = v
}

// GetUrl returns the Url field value
func (o *CDPTicket) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CDPTicket) SetUrl(v string) {
	o.Url = v
}

// GetService returns the Service field value
func (o *CDPTicket) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *CDPTicket) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *CDPTicket) SetService(v string) {
	o.Service = v
}

func (o CDPTicket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDPTicket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["confidential"] = o.Confidential
	toSerialize["description"] = o.Description
	toSerialize["due_at"] = o.DueAt
	toSerialize["epic"] = o.Epic
	toSerialize["estimate"] = o.Estimate
	toSerialize["labels"] = o.Labels
	toSerialize["owners"] = o.Owners
	toSerialize["priority"] = o.Priority
	toSerialize["project"] = o.Project
	toSerialize["sprint"] = o.Sprint
	toSerialize["state"] = o.State
	toSerialize["subscribers"] = o.Subscribers
	toSerialize["team"] = o.Team
	toSerialize["title"] = o.Title
	toSerialize["ticket_type"] = o.TicketType
	toSerialize["number"] = o.Number
	toSerialize["url"] = o.Url
	toSerialize["service"] = o.Service

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CDPTicket) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"confidential",
		"description",
		"due_at",
		"epic",
		"estimate",
		"labels",
		"owners",
		"priority",
		"project",
		"sprint",
		"state",
		"subscribers",
		"team",
		"title",
		"ticket_type",
		"number",
		"url",
		"service",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDPTicket := _CDPTicket{}

	err = json.Unmarshal(data, &varCDPTicket)

	if err != nil {
		return err
	}

	*o = CDPTicket(varCDPTicket)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "confidential")
		delete(additionalProperties, "description")
		delete(additionalProperties, "due_at")
		delete(additionalProperties, "epic")
		delete(additionalProperties, "estimate")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "owners")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "project")
		delete(additionalProperties, "sprint")
		delete(additionalProperties, "state")
		delete(additionalProperties, "subscribers")
		delete(additionalProperties, "team")
		delete(additionalProperties, "title")
		delete(additionalProperties, "ticket_type")
		delete(additionalProperties, "number")
		delete(additionalProperties, "url")
		delete(additionalProperties, "service")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCDPTicket struct {
	value *CDPTicket
	isSet bool
}

func (v NullableCDPTicket) Get() *CDPTicket {
	return v.value
}

func (v *NullableCDPTicket) Set(val *CDPTicket) {
	v.value = val
	v.isSet = true
}

func (v NullableCDPTicket) IsSet() bool {
	return v.isSet
}

func (v *NullableCDPTicket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDPTicket(val *CDPTicket) *NullableCDPTicket {
	return &NullableCDPTicket{value: val, isSet: true}
}

func (v NullableCDPTicket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDPTicket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


