/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CDPTicketDataLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDPTicketDataLabel{}

// CDPTicketDataLabel struct for CDPTicketDataLabel
type CDPTicketDataLabel struct {
	Archived bool `json:"archived"`
	CreatedAt time.Time `json:"created_at"`
	Color string `json:"color"`
	Description time.Time `json:"description"`
	Id string `json:"id"`
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _CDPTicketDataLabel CDPTicketDataLabel

// NewCDPTicketDataLabel instantiates a new CDPTicketDataLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDPTicketDataLabel(archived bool, createdAt time.Time, color string, description time.Time, id string, name string) *CDPTicketDataLabel {
	this := CDPTicketDataLabel{}
	this.Archived = archived
	this.CreatedAt = createdAt
	this.Color = color
	this.Description = description
	this.Id = id
	this.Name = name
	return &this
}

// NewCDPTicketDataLabelWithDefaults instantiates a new CDPTicketDataLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDPTicketDataLabelWithDefaults() *CDPTicketDataLabel {
	this := CDPTicketDataLabel{}
	return &this
}

// GetArchived returns the Archived field value
func (o *CDPTicketDataLabel) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataLabel) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *CDPTicketDataLabel) SetArchived(v bool) {
	o.Archived = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CDPTicketDataLabel) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataLabel) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CDPTicketDataLabel) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetColor returns the Color field value
func (o *CDPTicketDataLabel) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataLabel) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *CDPTicketDataLabel) SetColor(v string) {
	o.Color = v
}

// GetDescription returns the Description field value
func (o *CDPTicketDataLabel) GetDescription() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataLabel) GetDescriptionOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CDPTicketDataLabel) SetDescription(v time.Time) {
	o.Description = v
}

// GetId returns the Id field value
func (o *CDPTicketDataLabel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataLabel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CDPTicketDataLabel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CDPTicketDataLabel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CDPTicketDataLabel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CDPTicketDataLabel) SetName(v string) {
	o.Name = v
}

func (o CDPTicketDataLabel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDPTicketDataLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["archived"] = o.Archived
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["color"] = o.Color
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CDPTicketDataLabel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"archived",
		"created_at",
		"color",
		"description",
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDPTicketDataLabel := _CDPTicketDataLabel{}

	err = json.Unmarshal(data, &varCDPTicketDataLabel)

	if err != nil {
		return err
	}

	*o = CDPTicketDataLabel(varCDPTicketDataLabel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "archived")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "color")
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCDPTicketDataLabel struct {
	value *CDPTicketDataLabel
	isSet bool
}

func (v NullableCDPTicketDataLabel) Get() *CDPTicketDataLabel {
	return v.value
}

func (v *NullableCDPTicketDataLabel) Set(val *CDPTicketDataLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableCDPTicketDataLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableCDPTicketDataLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDPTicketDataLabel(val *CDPTicketDataLabel) *NullableCDPTicketDataLabel {
	return &NullableCDPTicketDataLabel{value: val, isSet: true}
}

func (v NullableCDPTicketDataLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDPTicketDataLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


