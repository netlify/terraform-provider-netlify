/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Asset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Asset{}

// Asset Asset model definition
type Asset struct {
	Id string `json:"id"`
	SiteId string `json:"site_id"`
	AccountId string `json:"account_id"`
	Name string `json:"name"`
	Size int64 `json:"size"`
	ContentType string `json:"content_type"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	State string `json:"state"`
	Key string `json:"key"`
	Url string `json:"url"`
	Visibility string `json:"visibility"`
	UploadedUrl string `json:"uploaded_url"`
	AdditionalProperties map[string]interface{}
}

type _Asset Asset

// NewAsset instantiates a new Asset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsset(id string, siteId string, accountId string, name string, size int64, contentType string, createdAt time.Time, updatedAt time.Time, state string, key string, url string, visibility string, uploadedUrl string) *Asset {
	this := Asset{}
	this.Id = id
	this.SiteId = siteId
	this.AccountId = accountId
	this.Name = name
	this.Size = size
	this.ContentType = contentType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.State = state
	this.Key = key
	this.Url = url
	this.Visibility = visibility
	this.UploadedUrl = uploadedUrl
	return &this
}

// NewAssetWithDefaults instantiates a new Asset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetWithDefaults() *Asset {
	this := Asset{}
	return &this
}

// GetId returns the Id field value
func (o *Asset) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Asset) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Asset) SetId(v string) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *Asset) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *Asset) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *Asset) SetSiteId(v string) {
	o.SiteId = v
}

// GetAccountId returns the AccountId field value
func (o *Asset) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Asset) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Asset) SetAccountId(v string) {
	o.AccountId = v
}

// GetName returns the Name field value
func (o *Asset) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Asset) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Asset) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value
func (o *Asset) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Asset) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Asset) SetSize(v int64) {
	o.Size = v
}

// GetContentType returns the ContentType field value
func (o *Asset) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *Asset) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *Asset) SetContentType(v string) {
	o.ContentType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Asset) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Asset) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Asset) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Asset) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Asset) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Asset) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetState returns the State field value
func (o *Asset) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Asset) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Asset) SetState(v string) {
	o.State = v
}

// GetKey returns the Key field value
func (o *Asset) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *Asset) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *Asset) SetKey(v string) {
	o.Key = v
}

// GetUrl returns the Url field value
func (o *Asset) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Asset) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Asset) SetUrl(v string) {
	o.Url = v
}

// GetVisibility returns the Visibility field value
func (o *Asset) GetVisibility() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *Asset) GetVisibilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visibility, true
}

// SetVisibility sets field value
func (o *Asset) SetVisibility(v string) {
	o.Visibility = v
}

// GetUploadedUrl returns the UploadedUrl field value
func (o *Asset) GetUploadedUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadedUrl
}

// GetUploadedUrlOk returns a tuple with the UploadedUrl field value
// and a boolean to check if the value has been set.
func (o *Asset) GetUploadedUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadedUrl, true
}

// SetUploadedUrl sets field value
func (o *Asset) SetUploadedUrl(v string) {
	o.UploadedUrl = v
}

func (o Asset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Asset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["site_id"] = o.SiteId
	toSerialize["account_id"] = o.AccountId
	toSerialize["name"] = o.Name
	toSerialize["size"] = o.Size
	toSerialize["content_type"] = o.ContentType
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["state"] = o.State
	toSerialize["key"] = o.Key
	toSerialize["url"] = o.Url
	toSerialize["visibility"] = o.Visibility
	toSerialize["uploaded_url"] = o.UploadedUrl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Asset) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"site_id",
		"account_id",
		"name",
		"size",
		"content_type",
		"created_at",
		"updated_at",
		"state",
		"key",
		"url",
		"visibility",
		"uploaded_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAsset := _Asset{}

	err = json.Unmarshal(data, &varAsset)

	if err != nil {
		return err
	}

	*o = Asset(varAsset)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "size")
		delete(additionalProperties, "content_type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "state")
		delete(additionalProperties, "key")
		delete(additionalProperties, "url")
		delete(additionalProperties, "visibility")
		delete(additionalProperties, "uploaded_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAsset struct {
	value *Asset
	isSet bool
}

func (v NullableAsset) Get() *Asset {
	return v.value
}

func (v *NullableAsset) Set(val *Asset) {
	v.value = val
	v.isSet = true
}

func (v NullableAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsset(val *Asset) *NullableAsset {
	return &NullableAsset{value: val, isSet: true}
}

func (v NullableAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


