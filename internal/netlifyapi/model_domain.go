/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Domain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Domain{}

// Domain struct for Domain
type Domain struct {
	// The ID of the domain
	Id string `json:"id"`
	// The name of the domain
	Name string `json:"name"`
	// The user ID of the domain creator
	UserId string `json:"user_id"`
	// When the domain expires
	ExpiresAt time.Time `json:"expires_at"`
	// When the domain was registered
	RegisteredAt time.Time `json:"registered_at"`
	// The renewal price of the domain
	RenewalPrice string `json:"renewal_price"`
	// Whether the domain auto renews or not
	AutoRenew bool `json:"auto_renew"`
	// The auth code used for transferring out the domain
	AuthCode string `json:"auth_code"`
	// When the domain was transferred
	TransferredAt time.Time `json:"transferred_at"`
	// When the domain was auto renewed
	AutoRenewAt time.Time `json:"auto_renew_at"`
	// When the domain was created
	CreatedAt time.Time `json:"created_at"`
	// When the domain was updated
	UpdatedAt time.Time `json:"updated_at"`
	AdditionalProperties map[string]interface{}
}

type _Domain Domain

// NewDomain instantiates a new Domain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomain(id string, name string, userId string, expiresAt time.Time, registeredAt time.Time, renewalPrice string, autoRenew bool, authCode string, transferredAt time.Time, autoRenewAt time.Time, createdAt time.Time, updatedAt time.Time) *Domain {
	this := Domain{}
	this.Id = id
	this.Name = name
	this.UserId = userId
	this.ExpiresAt = expiresAt
	this.RegisteredAt = registeredAt
	this.RenewalPrice = renewalPrice
	this.AutoRenew = autoRenew
	this.AuthCode = authCode
	this.TransferredAt = transferredAt
	this.AutoRenewAt = autoRenewAt
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewDomainWithDefaults instantiates a new Domain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainWithDefaults() *Domain {
	this := Domain{}
	return &this
}

// GetId returns the Id field value
func (o *Domain) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Domain) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Domain) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Domain) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Domain) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Domain) SetName(v string) {
	o.Name = v
}

// GetUserId returns the UserId field value
func (o *Domain) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Domain) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Domain) SetUserId(v string) {
	o.UserId = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *Domain) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *Domain) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *Domain) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetRegisteredAt returns the RegisteredAt field value
func (o *Domain) GetRegisteredAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RegisteredAt
}

// GetRegisteredAtOk returns a tuple with the RegisteredAt field value
// and a boolean to check if the value has been set.
func (o *Domain) GetRegisteredAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegisteredAt, true
}

// SetRegisteredAt sets field value
func (o *Domain) SetRegisteredAt(v time.Time) {
	o.RegisteredAt = v
}

// GetRenewalPrice returns the RenewalPrice field value
func (o *Domain) GetRenewalPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RenewalPrice
}

// GetRenewalPriceOk returns a tuple with the RenewalPrice field value
// and a boolean to check if the value has been set.
func (o *Domain) GetRenewalPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RenewalPrice, true
}

// SetRenewalPrice sets field value
func (o *Domain) SetRenewalPrice(v string) {
	o.RenewalPrice = v
}

// GetAutoRenew returns the AutoRenew field value
func (o *Domain) GetAutoRenew() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoRenew
}

// GetAutoRenewOk returns a tuple with the AutoRenew field value
// and a boolean to check if the value has been set.
func (o *Domain) GetAutoRenewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoRenew, true
}

// SetAutoRenew sets field value
func (o *Domain) SetAutoRenew(v bool) {
	o.AutoRenew = v
}

// GetAuthCode returns the AuthCode field value
func (o *Domain) GetAuthCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthCode
}

// GetAuthCodeOk returns a tuple with the AuthCode field value
// and a boolean to check if the value has been set.
func (o *Domain) GetAuthCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthCode, true
}

// SetAuthCode sets field value
func (o *Domain) SetAuthCode(v string) {
	o.AuthCode = v
}

// GetTransferredAt returns the TransferredAt field value
func (o *Domain) GetTransferredAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TransferredAt
}

// GetTransferredAtOk returns a tuple with the TransferredAt field value
// and a boolean to check if the value has been set.
func (o *Domain) GetTransferredAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransferredAt, true
}

// SetTransferredAt sets field value
func (o *Domain) SetTransferredAt(v time.Time) {
	o.TransferredAt = v
}

// GetAutoRenewAt returns the AutoRenewAt field value
func (o *Domain) GetAutoRenewAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.AutoRenewAt
}

// GetAutoRenewAtOk returns a tuple with the AutoRenewAt field value
// and a boolean to check if the value has been set.
func (o *Domain) GetAutoRenewAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoRenewAt, true
}

// SetAutoRenewAt sets field value
func (o *Domain) SetAutoRenewAt(v time.Time) {
	o.AutoRenewAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Domain) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Domain) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Domain) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Domain) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Domain) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Domain) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o Domain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Domain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["user_id"] = o.UserId
	toSerialize["expires_at"] = o.ExpiresAt
	toSerialize["registered_at"] = o.RegisteredAt
	toSerialize["renewal_price"] = o.RenewalPrice
	toSerialize["auto_renew"] = o.AutoRenew
	toSerialize["auth_code"] = o.AuthCode
	toSerialize["transferred_at"] = o.TransferredAt
	toSerialize["auto_renew_at"] = o.AutoRenewAt
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Domain) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"user_id",
		"expires_at",
		"registered_at",
		"renewal_price",
		"auto_renew",
		"auth_code",
		"transferred_at",
		"auto_renew_at",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDomain := _Domain{}

	err = json.Unmarshal(data, &varDomain)

	if err != nil {
		return err
	}

	*o = Domain(varDomain)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "registered_at")
		delete(additionalProperties, "renewal_price")
		delete(additionalProperties, "auto_renew")
		delete(additionalProperties, "auth_code")
		delete(additionalProperties, "transferred_at")
		delete(additionalProperties, "auto_renew_at")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDomain struct {
	value *Domain
	isSet bool
}

func (v NullableDomain) Get() *Domain {
	return v.value
}

func (v *NullableDomain) Set(val *Domain) {
	v.value = val
	v.isSet = true
}

func (v NullableDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomain(val *Domain) *NullableDomain {
	return &NullableDomain{value: val, isSet: true}
}

func (v NullableDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


