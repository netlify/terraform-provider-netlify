/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the DeployKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeployKey{}

// DeployKey DeployKey model definition
type DeployKey struct {
	// The deploy key ID
	Id string `json:"id"`
	// The public key
	PublicKey string `json:"public_key"`
	// When the deploy key was created
	CreatedAt time.Time `json:"created_at"`
	AdditionalProperties map[string]interface{}
}

type _DeployKey DeployKey

// NewDeployKey instantiates a new DeployKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployKey(id string, publicKey string, createdAt time.Time) *DeployKey {
	this := DeployKey{}
	this.Id = id
	this.PublicKey = publicKey
	this.CreatedAt = createdAt
	return &this
}

// NewDeployKeyWithDefaults instantiates a new DeployKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployKeyWithDefaults() *DeployKey {
	this := DeployKey{}
	return &this
}

// GetId returns the Id field value
func (o *DeployKey) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeployKey) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeployKey) SetId(v string) {
	o.Id = v
}

// GetPublicKey returns the PublicKey field value
func (o *DeployKey) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *DeployKey) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *DeployKey) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DeployKey) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DeployKey) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DeployKey) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o DeployKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeployKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["public_key"] = o.PublicKey
	toSerialize["created_at"] = o.CreatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeployKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"public_key",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeployKey := _DeployKey{}

	err = json.Unmarshal(data, &varDeployKey)

	if err != nil {
		return err
	}

	*o = DeployKey(varDeployKey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "public_key")
		delete(additionalProperties, "created_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeployKey struct {
	value *DeployKey
	isSet bool
}

func (v NullableDeployKey) Get() *DeployKey {
	return v.value
}

func (v *NullableDeployKey) Set(val *DeployKey) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployKey) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployKey(val *DeployKey) *NullableDeployKey {
	return &NullableDeployKey{value: val, isSet: true}
}

func (v NullableDeployKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


