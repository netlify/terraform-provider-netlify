/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Administrator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Administrator{}

// Administrator Administrator model definition
type Administrator struct {
	// The URL for the avatar
	AvatarUrl string `json:"avatar_url"`
	// The administrator email
	Email string `json:"email"`
	// The administrator name
	FullName string `json:"full_name"`
	// The identifier for the administrator record
	Id string `json:"id"`
	// When this user last logged in
	LastLogin time.Time `json:"last_login"`
	// Whether the user has two-factor authentication enabled or not
	MfaEnabled bool `json:"mfa_enabled"`
	// The role of the administrator
	Role string `json:"role"`
	// A space-separated list of scopes given based on the role
	Scopes string `json:"scopes"`
	// The identifier for the user
	UserId string `json:"user_id"`
	AdditionalProperties map[string]interface{}
}

type _Administrator Administrator

// NewAdministrator instantiates a new Administrator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdministrator(avatarUrl string, email string, fullName string, id string, lastLogin time.Time, mfaEnabled bool, role string, scopes string, userId string) *Administrator {
	this := Administrator{}
	this.AvatarUrl = avatarUrl
	this.Email = email
	this.FullName = fullName
	this.Id = id
	this.LastLogin = lastLogin
	this.MfaEnabled = mfaEnabled
	this.Role = role
	this.Scopes = scopes
	this.UserId = userId
	return &this
}

// NewAdministratorWithDefaults instantiates a new Administrator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdministratorWithDefaults() *Administrator {
	this := Administrator{}
	return &this
}

// GetAvatarUrl returns the AvatarUrl field value
func (o *Administrator) GetAvatarUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value
// and a boolean to check if the value has been set.
func (o *Administrator) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// SetAvatarUrl sets field value
func (o *Administrator) SetAvatarUrl(v string) {
	o.AvatarUrl = v
}

// GetEmail returns the Email field value
func (o *Administrator) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Administrator) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *Administrator) SetEmail(v string) {
	o.Email = v
}

// GetFullName returns the FullName field value
func (o *Administrator) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *Administrator) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *Administrator) SetFullName(v string) {
	o.FullName = v
}

// GetId returns the Id field value
func (o *Administrator) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Administrator) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Administrator) SetId(v string) {
	o.Id = v
}

// GetLastLogin returns the LastLogin field value
func (o *Administrator) GetLastLogin() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value
// and a boolean to check if the value has been set.
func (o *Administrator) GetLastLoginOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastLogin, true
}

// SetLastLogin sets field value
func (o *Administrator) SetLastLogin(v time.Time) {
	o.LastLogin = v
}

// GetMfaEnabled returns the MfaEnabled field value
func (o *Administrator) GetMfaEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MfaEnabled
}

// GetMfaEnabledOk returns a tuple with the MfaEnabled field value
// and a boolean to check if the value has been set.
func (o *Administrator) GetMfaEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MfaEnabled, true
}

// SetMfaEnabled sets field value
func (o *Administrator) SetMfaEnabled(v bool) {
	o.MfaEnabled = v
}

// GetRole returns the Role field value
func (o *Administrator) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *Administrator) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *Administrator) SetRole(v string) {
	o.Role = v
}

// GetScopes returns the Scopes field value
func (o *Administrator) GetScopes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *Administrator) GetScopesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scopes, true
}

// SetScopes sets field value
func (o *Administrator) SetScopes(v string) {
	o.Scopes = v
}

// GetUserId returns the UserId field value
func (o *Administrator) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Administrator) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Administrator) SetUserId(v string) {
	o.UserId = v
}

func (o Administrator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Administrator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["avatar_url"] = o.AvatarUrl
	toSerialize["email"] = o.Email
	toSerialize["full_name"] = o.FullName
	toSerialize["id"] = o.Id
	toSerialize["last_login"] = o.LastLogin
	toSerialize["mfa_enabled"] = o.MfaEnabled
	toSerialize["role"] = o.Role
	toSerialize["scopes"] = o.Scopes
	toSerialize["user_id"] = o.UserId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Administrator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"avatar_url",
		"email",
		"full_name",
		"id",
		"last_login",
		"mfa_enabled",
		"role",
		"scopes",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdministrator := _Administrator{}

	err = json.Unmarshal(data, &varAdministrator)

	if err != nil {
		return err
	}

	*o = Administrator(varAdministrator)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "avatar_url")
		delete(additionalProperties, "email")
		delete(additionalProperties, "full_name")
		delete(additionalProperties, "id")
		delete(additionalProperties, "last_login")
		delete(additionalProperties, "mfa_enabled")
		delete(additionalProperties, "role")
		delete(additionalProperties, "scopes")
		delete(additionalProperties, "user_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdministrator struct {
	value *Administrator
	isSet bool
}

func (v NullableAdministrator) Get() *Administrator {
	return v.value
}

func (v *NullableAdministrator) Set(val *Administrator) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministrator) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministrator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministrator(val *Administrator) *NullableAdministrator {
	return &NullableAdministrator{value: val, isSet: true}
}

func (v NullableAdministrator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministrator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


