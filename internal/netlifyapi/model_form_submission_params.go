/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the FormSubmissionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormSubmissionParams{}

// FormSubmissionParams struct for FormSubmissionParams
type FormSubmissionParams struct {
	// The form ID
	FormId *string `json:"form_id,omitempty"`
	// The deploy ID of the form submission
	DeployId *string `json:"deploy_id,omitempty"`
	// The form submission values in hash
	FormSubmission map[string]interface{} `json:"form_submission,omitempty"`
	// Whether to persist changes to the database or not
	Dry *bool `json:"dry,omitempty"`
	// The client IP address of the form submission request
	ConnectionIp *string `json:"connection_ip,omitempty"`
	// The user agent of the form submission request
	UserAgent *string `json:"user_agent,omitempty"`
	// The referrer of the form submission request
	Referrer *string `json:"referrer,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FormSubmissionParams FormSubmissionParams

// NewFormSubmissionParams instantiates a new FormSubmissionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormSubmissionParams() *FormSubmissionParams {
	this := FormSubmissionParams{}
	return &this
}

// NewFormSubmissionParamsWithDefaults instantiates a new FormSubmissionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormSubmissionParamsWithDefaults() *FormSubmissionParams {
	this := FormSubmissionParams{}
	return &this
}

// GetFormId returns the FormId field value if set, zero value otherwise.
func (o *FormSubmissionParams) GetFormId() string {
	if o == nil || IsNil(o.FormId) {
		var ret string
		return ret
	}
	return *o.FormId
}

// GetFormIdOk returns a tuple with the FormId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormSubmissionParams) GetFormIdOk() (*string, bool) {
	if o == nil || IsNil(o.FormId) {
		return nil, false
	}
	return o.FormId, true
}

// HasFormId returns a boolean if a field has been set.
func (o *FormSubmissionParams) HasFormId() bool {
	if o != nil && !IsNil(o.FormId) {
		return true
	}

	return false
}

// SetFormId gets a reference to the given string and assigns it to the FormId field.
func (o *FormSubmissionParams) SetFormId(v string) {
	o.FormId = &v
}

// GetDeployId returns the DeployId field value if set, zero value otherwise.
func (o *FormSubmissionParams) GetDeployId() string {
	if o == nil || IsNil(o.DeployId) {
		var ret string
		return ret
	}
	return *o.DeployId
}

// GetDeployIdOk returns a tuple with the DeployId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormSubmissionParams) GetDeployIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeployId) {
		return nil, false
	}
	return o.DeployId, true
}

// HasDeployId returns a boolean if a field has been set.
func (o *FormSubmissionParams) HasDeployId() bool {
	if o != nil && !IsNil(o.DeployId) {
		return true
	}

	return false
}

// SetDeployId gets a reference to the given string and assigns it to the DeployId field.
func (o *FormSubmissionParams) SetDeployId(v string) {
	o.DeployId = &v
}

// GetFormSubmission returns the FormSubmission field value if set, zero value otherwise.
func (o *FormSubmissionParams) GetFormSubmission() map[string]interface{} {
	if o == nil || IsNil(o.FormSubmission) {
		var ret map[string]interface{}
		return ret
	}
	return o.FormSubmission
}

// GetFormSubmissionOk returns a tuple with the FormSubmission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormSubmissionParams) GetFormSubmissionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FormSubmission) {
		return map[string]interface{}{}, false
	}
	return o.FormSubmission, true
}

// HasFormSubmission returns a boolean if a field has been set.
func (o *FormSubmissionParams) HasFormSubmission() bool {
	if o != nil && !IsNil(o.FormSubmission) {
		return true
	}

	return false
}

// SetFormSubmission gets a reference to the given map[string]interface{} and assigns it to the FormSubmission field.
func (o *FormSubmissionParams) SetFormSubmission(v map[string]interface{}) {
	o.FormSubmission = v
}

// GetDry returns the Dry field value if set, zero value otherwise.
func (o *FormSubmissionParams) GetDry() bool {
	if o == nil || IsNil(o.Dry) {
		var ret bool
		return ret
	}
	return *o.Dry
}

// GetDryOk returns a tuple with the Dry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormSubmissionParams) GetDryOk() (*bool, bool) {
	if o == nil || IsNil(o.Dry) {
		return nil, false
	}
	return o.Dry, true
}

// HasDry returns a boolean if a field has been set.
func (o *FormSubmissionParams) HasDry() bool {
	if o != nil && !IsNil(o.Dry) {
		return true
	}

	return false
}

// SetDry gets a reference to the given bool and assigns it to the Dry field.
func (o *FormSubmissionParams) SetDry(v bool) {
	o.Dry = &v
}

// GetConnectionIp returns the ConnectionIp field value if set, zero value otherwise.
func (o *FormSubmissionParams) GetConnectionIp() string {
	if o == nil || IsNil(o.ConnectionIp) {
		var ret string
		return ret
	}
	return *o.ConnectionIp
}

// GetConnectionIpOk returns a tuple with the ConnectionIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormSubmissionParams) GetConnectionIpOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionIp) {
		return nil, false
	}
	return o.ConnectionIp, true
}

// HasConnectionIp returns a boolean if a field has been set.
func (o *FormSubmissionParams) HasConnectionIp() bool {
	if o != nil && !IsNil(o.ConnectionIp) {
		return true
	}

	return false
}

// SetConnectionIp gets a reference to the given string and assigns it to the ConnectionIp field.
func (o *FormSubmissionParams) SetConnectionIp(v string) {
	o.ConnectionIp = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *FormSubmissionParams) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormSubmissionParams) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *FormSubmissionParams) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *FormSubmissionParams) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetReferrer returns the Referrer field value if set, zero value otherwise.
func (o *FormSubmissionParams) GetReferrer() string {
	if o == nil || IsNil(o.Referrer) {
		var ret string
		return ret
	}
	return *o.Referrer
}

// GetReferrerOk returns a tuple with the Referrer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormSubmissionParams) GetReferrerOk() (*string, bool) {
	if o == nil || IsNil(o.Referrer) {
		return nil, false
	}
	return o.Referrer, true
}

// HasReferrer returns a boolean if a field has been set.
func (o *FormSubmissionParams) HasReferrer() bool {
	if o != nil && !IsNil(o.Referrer) {
		return true
	}

	return false
}

// SetReferrer gets a reference to the given string and assigns it to the Referrer field.
func (o *FormSubmissionParams) SetReferrer(v string) {
	o.Referrer = &v
}

func (o FormSubmissionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormSubmissionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FormId) {
		toSerialize["form_id"] = o.FormId
	}
	if !IsNil(o.DeployId) {
		toSerialize["deploy_id"] = o.DeployId
	}
	if !IsNil(o.FormSubmission) {
		toSerialize["form_submission"] = o.FormSubmission
	}
	if !IsNil(o.Dry) {
		toSerialize["dry"] = o.Dry
	}
	if !IsNil(o.ConnectionIp) {
		toSerialize["connection_ip"] = o.ConnectionIp
	}
	if !IsNil(o.UserAgent) {
		toSerialize["user_agent"] = o.UserAgent
	}
	if !IsNil(o.Referrer) {
		toSerialize["referrer"] = o.Referrer
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FormSubmissionParams) UnmarshalJSON(data []byte) (err error) {
	varFormSubmissionParams := _FormSubmissionParams{}

	err = json.Unmarshal(data, &varFormSubmissionParams)

	if err != nil {
		return err
	}

	*o = FormSubmissionParams(varFormSubmissionParams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "form_id")
		delete(additionalProperties, "deploy_id")
		delete(additionalProperties, "form_submission")
		delete(additionalProperties, "dry")
		delete(additionalProperties, "connection_ip")
		delete(additionalProperties, "user_agent")
		delete(additionalProperties, "referrer")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFormSubmissionParams struct {
	value *FormSubmissionParams
	isSet bool
}

func (v NullableFormSubmissionParams) Get() *FormSubmissionParams {
	return v.value
}

func (v *NullableFormSubmissionParams) Set(val *FormSubmissionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFormSubmissionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFormSubmissionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormSubmissionParams(val *FormSubmissionParams) *NullableFormSubmissionParams {
	return &NullableFormSubmissionParams{value: val, isSet: true}
}

func (v NullableFormSubmissionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormSubmissionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


