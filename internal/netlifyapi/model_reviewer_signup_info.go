/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the ReviewerSignupInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewerSignupInfo{}

// ReviewerSignupInfo struct for ReviewerSignupInfo
type ReviewerSignupInfo struct {
	// The deploy ID that the user wants to join as a reviewer
	DeployId *string `json:"deploy_id,omitempty"`
	// The path of Deploy Previews page that the reviewer was on during the signup
	Path *string `json:"path,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReviewerSignupInfo ReviewerSignupInfo

// NewReviewerSignupInfo instantiates a new ReviewerSignupInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewerSignupInfo() *ReviewerSignupInfo {
	this := ReviewerSignupInfo{}
	return &this
}

// NewReviewerSignupInfoWithDefaults instantiates a new ReviewerSignupInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewerSignupInfoWithDefaults() *ReviewerSignupInfo {
	this := ReviewerSignupInfo{}
	return &this
}

// GetDeployId returns the DeployId field value if set, zero value otherwise.
func (o *ReviewerSignupInfo) GetDeployId() string {
	if o == nil || IsNil(o.DeployId) {
		var ret string
		return ret
	}
	return *o.DeployId
}

// GetDeployIdOk returns a tuple with the DeployId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewerSignupInfo) GetDeployIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeployId) {
		return nil, false
	}
	return o.DeployId, true
}

// HasDeployId returns a boolean if a field has been set.
func (o *ReviewerSignupInfo) HasDeployId() bool {
	if o != nil && !IsNil(o.DeployId) {
		return true
	}

	return false
}

// SetDeployId gets a reference to the given string and assigns it to the DeployId field.
func (o *ReviewerSignupInfo) SetDeployId(v string) {
	o.DeployId = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ReviewerSignupInfo) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewerSignupInfo) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ReviewerSignupInfo) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ReviewerSignupInfo) SetPath(v string) {
	o.Path = &v
}

func (o ReviewerSignupInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewerSignupInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeployId) {
		toSerialize["deploy_id"] = o.DeployId
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReviewerSignupInfo) UnmarshalJSON(data []byte) (err error) {
	varReviewerSignupInfo := _ReviewerSignupInfo{}

	err = json.Unmarshal(data, &varReviewerSignupInfo)

	if err != nil {
		return err
	}

	*o = ReviewerSignupInfo(varReviewerSignupInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deploy_id")
		delete(additionalProperties, "path")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReviewerSignupInfo struct {
	value *ReviewerSignupInfo
	isSet bool
}

func (v NullableReviewerSignupInfo) Get() *ReviewerSignupInfo {
	return v.value
}

func (v *NullableReviewerSignupInfo) Set(val *ReviewerSignupInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewerSignupInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewerSignupInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewerSignupInfo(val *ReviewerSignupInfo) *NullableReviewerSignupInfo {
	return &NullableReviewerSignupInfo{value: val, isSet: true}
}

func (v NullableReviewerSignupInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewerSignupInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


