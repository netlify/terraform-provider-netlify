/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DnsRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsRecord{}

// DnsRecord struct for DnsRecord
type DnsRecord struct {
	// The ID of the DNS record
	Id string `json:"id"`
	// The site ID
	SiteId string `json:"site_id"`
	// The ID of the DNS zone the record belongs to
	DnsZoneId string `json:"dns_zone_id"`
	// An array of error messages
	Errors []string `json:"errors"`
	// Whether Netlify created (managed) record or the user created
	Managed bool `json:"managed"`
	// The value of the DNS record
	Value string `json:"value"`
	// The hostname of the DNS record
	Hostname string `json:"hostname"`
	// The type of the DNS record
	Type string `json:"type"`
	// The TTL of the DNS record
	Ttl int64 `json:"ttl"`
	// The priority of the DNS record
	Priority int64 `json:"priority"`
	// The weight of the DNS record (for SRV type record)
	Weight int64 `json:"weight"`
	// The port of the DNS record (for SRV type record)
	Port int64 `json:"port"`
	// The flag of the DNS record (for CAA type record)
	Flag int64 `json:"flag"`
	// The tag of the DNS record (for CAA type record)
	Tag string `json:"tag"`
	AdditionalProperties map[string]interface{}
}

type _DnsRecord DnsRecord

// NewDnsRecord instantiates a new DnsRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsRecord(id string, siteId string, dnsZoneId string, errors []string, managed bool, value string, hostname string, type_ string, ttl int64, priority int64, weight int64, port int64, flag int64, tag string) *DnsRecord {
	this := DnsRecord{}
	this.Id = id
	this.SiteId = siteId
	this.DnsZoneId = dnsZoneId
	this.Errors = errors
	this.Managed = managed
	this.Value = value
	this.Hostname = hostname
	this.Type = type_
	this.Ttl = ttl
	this.Priority = priority
	this.Weight = weight
	this.Port = port
	this.Flag = flag
	this.Tag = tag
	return &this
}

// NewDnsRecordWithDefaults instantiates a new DnsRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsRecordWithDefaults() *DnsRecord {
	this := DnsRecord{}
	return &this
}

// GetId returns the Id field value
func (o *DnsRecord) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DnsRecord) SetId(v string) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *DnsRecord) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *DnsRecord) SetSiteId(v string) {
	o.SiteId = v
}

// GetDnsZoneId returns the DnsZoneId field value
func (o *DnsRecord) GetDnsZoneId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DnsZoneId
}

// GetDnsZoneIdOk returns a tuple with the DnsZoneId field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetDnsZoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnsZoneId, true
}

// SetDnsZoneId sets field value
func (o *DnsRecord) SetDnsZoneId(v string) {
	o.DnsZoneId = v
}

// GetErrors returns the Errors field value
func (o *DnsRecord) GetErrors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetErrorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *DnsRecord) SetErrors(v []string) {
	o.Errors = v
}

// GetManaged returns the Managed field value
func (o *DnsRecord) GetManaged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Managed
}

// GetManagedOk returns a tuple with the Managed field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetManagedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Managed, true
}

// SetManaged sets field value
func (o *DnsRecord) SetManaged(v bool) {
	o.Managed = v
}

// GetValue returns the Value field value
func (o *DnsRecord) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DnsRecord) SetValue(v string) {
	o.Value = v
}

// GetHostname returns the Hostname field value
func (o *DnsRecord) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *DnsRecord) SetHostname(v string) {
	o.Hostname = v
}

// GetType returns the Type field value
func (o *DnsRecord) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DnsRecord) SetType(v string) {
	o.Type = v
}

// GetTtl returns the Ttl field value
func (o *DnsRecord) GetTtl() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetTtlOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ttl, true
}

// SetTtl sets field value
func (o *DnsRecord) SetTtl(v int64) {
	o.Ttl = v
}

// GetPriority returns the Priority field value
func (o *DnsRecord) GetPriority() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetPriorityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *DnsRecord) SetPriority(v int64) {
	o.Priority = v
}

// GetWeight returns the Weight field value
func (o *DnsRecord) GetWeight() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetWeightOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weight, true
}

// SetWeight sets field value
func (o *DnsRecord) SetWeight(v int64) {
	o.Weight = v
}

// GetPort returns the Port field value
func (o *DnsRecord) GetPort() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetPortOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *DnsRecord) SetPort(v int64) {
	o.Port = v
}

// GetFlag returns the Flag field value
func (o *DnsRecord) GetFlag() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Flag
}

// GetFlagOk returns a tuple with the Flag field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetFlagOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flag, true
}

// SetFlag sets field value
func (o *DnsRecord) SetFlag(v int64) {
	o.Flag = v
}

// GetTag returns the Tag field value
func (o *DnsRecord) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *DnsRecord) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *DnsRecord) SetTag(v string) {
	o.Tag = v
}

func (o DnsRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["site_id"] = o.SiteId
	toSerialize["dns_zone_id"] = o.DnsZoneId
	toSerialize["errors"] = o.Errors
	toSerialize["managed"] = o.Managed
	toSerialize["value"] = o.Value
	toSerialize["hostname"] = o.Hostname
	toSerialize["type"] = o.Type
	toSerialize["ttl"] = o.Ttl
	toSerialize["priority"] = o.Priority
	toSerialize["weight"] = o.Weight
	toSerialize["port"] = o.Port
	toSerialize["flag"] = o.Flag
	toSerialize["tag"] = o.Tag

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DnsRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"site_id",
		"dns_zone_id",
		"errors",
		"managed",
		"value",
		"hostname",
		"type",
		"ttl",
		"priority",
		"weight",
		"port",
		"flag",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsRecord := _DnsRecord{}

	err = json.Unmarshal(data, &varDnsRecord)

	if err != nil {
		return err
	}

	*o = DnsRecord(varDnsRecord)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "dns_zone_id")
		delete(additionalProperties, "errors")
		delete(additionalProperties, "managed")
		delete(additionalProperties, "value")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "type")
		delete(additionalProperties, "ttl")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "weight")
		delete(additionalProperties, "port")
		delete(additionalProperties, "flag")
		delete(additionalProperties, "tag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDnsRecord struct {
	value *DnsRecord
	isSet bool
}

func (v NullableDnsRecord) Get() *DnsRecord {
	return v.value
}

func (v *NullableDnsRecord) Set(val *DnsRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsRecord(val *DnsRecord) *NullableDnsRecord {
	return &NullableDnsRecord{value: val, isSet: true}
}

func (v NullableDnsRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


