/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CDPUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDPUser{}

// CDPUser User model definition
type CDPUser struct {
	// the identifier for the user
	Id string `json:"id"`
	FullName string `json:"full_name"`
	// the URL for the avatar
	AvatarUrl string `json:"avatar_url"`
	CreatedAt time.Time `json:"created_at"`
	ConnectedAccounts CDPUserConnectedAccounts `json:"connected_accounts"`
	AdditionalProperties map[string]interface{}
}

type _CDPUser CDPUser

// NewCDPUser instantiates a new CDPUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDPUser(id string, fullName string, avatarUrl string, createdAt time.Time, connectedAccounts CDPUserConnectedAccounts) *CDPUser {
	this := CDPUser{}
	this.Id = id
	this.FullName = fullName
	this.AvatarUrl = avatarUrl
	this.CreatedAt = createdAt
	this.ConnectedAccounts = connectedAccounts
	return &this
}

// NewCDPUserWithDefaults instantiates a new CDPUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDPUserWithDefaults() *CDPUser {
	this := CDPUser{}
	return &this
}

// GetId returns the Id field value
func (o *CDPUser) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CDPUser) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CDPUser) SetId(v string) {
	o.Id = v
}

// GetFullName returns the FullName field value
func (o *CDPUser) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *CDPUser) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *CDPUser) SetFullName(v string) {
	o.FullName = v
}

// GetAvatarUrl returns the AvatarUrl field value
func (o *CDPUser) GetAvatarUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value
// and a boolean to check if the value has been set.
func (o *CDPUser) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// SetAvatarUrl sets field value
func (o *CDPUser) SetAvatarUrl(v string) {
	o.AvatarUrl = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CDPUser) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CDPUser) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CDPUser) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetConnectedAccounts returns the ConnectedAccounts field value
func (o *CDPUser) GetConnectedAccounts() CDPUserConnectedAccounts {
	if o == nil {
		var ret CDPUserConnectedAccounts
		return ret
	}

	return o.ConnectedAccounts
}

// GetConnectedAccountsOk returns a tuple with the ConnectedAccounts field value
// and a boolean to check if the value has been set.
func (o *CDPUser) GetConnectedAccountsOk() (*CDPUserConnectedAccounts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectedAccounts, true
}

// SetConnectedAccounts sets field value
func (o *CDPUser) SetConnectedAccounts(v CDPUserConnectedAccounts) {
	o.ConnectedAccounts = v
}

func (o CDPUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDPUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["full_name"] = o.FullName
	toSerialize["avatar_url"] = o.AvatarUrl
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["connected_accounts"] = o.ConnectedAccounts

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CDPUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"full_name",
		"avatar_url",
		"created_at",
		"connected_accounts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCDPUser := _CDPUser{}

	err = json.Unmarshal(data, &varCDPUser)

	if err != nil {
		return err
	}

	*o = CDPUser(varCDPUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "full_name")
		delete(additionalProperties, "avatar_url")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "connected_accounts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCDPUser struct {
	value *CDPUser
	isSet bool
}

func (v NullableCDPUser) Get() *CDPUser {
	return v.value
}

func (v *NullableCDPUser) Set(val *CDPUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCDPUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCDPUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDPUser(val *CDPUser) *NullableCDPUser {
	return &NullableCDPUser{value: val, isSet: true}
}

func (v NullableCDPUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDPUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


