/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Receipt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Receipt{}

// Receipt struct for Receipt
type Receipt struct {
	Id string `json:"id"`
	TransactionId string `json:"transaction_id"`
	Amount string `json:"amount"`
	PrintFields []string `json:"print_fields"`
	Items []string `json:"items"`
	Usage []string `json:"usage"`
	DisplayAmount string `json:"display_amount"`
	TaxAmount string `json:"tax_amount"`
	UserId string `json:"user_id"`
	SiteId string `json:"site_id"`
	PaymentMethodId string `json:"payment_method_id"`
	PaymentMethodLastFour string `json:"payment_method_last_four"`
	PaymentMethodCardType string `json:"payment_method_card_type"`
	HtmlStored bool `json:"html_stored"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	TransactionCreatedAt time.Time `json:"transaction_created_at"`
	AdditionalProperties map[string]interface{}
}

type _Receipt Receipt

// NewReceipt instantiates a new Receipt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceipt(id string, transactionId string, amount string, printFields []string, items []string, usage []string, displayAmount string, taxAmount string, userId string, siteId string, paymentMethodId string, paymentMethodLastFour string, paymentMethodCardType string, htmlStored bool, createdAt time.Time, updatedAt time.Time, transactionCreatedAt time.Time) *Receipt {
	this := Receipt{}
	this.Id = id
	this.TransactionId = transactionId
	this.Amount = amount
	this.PrintFields = printFields
	this.Items = items
	this.Usage = usage
	this.DisplayAmount = displayAmount
	this.TaxAmount = taxAmount
	this.UserId = userId
	this.SiteId = siteId
	this.PaymentMethodId = paymentMethodId
	this.PaymentMethodLastFour = paymentMethodLastFour
	this.PaymentMethodCardType = paymentMethodCardType
	this.HtmlStored = htmlStored
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.TransactionCreatedAt = transactionCreatedAt
	return &this
}

// NewReceiptWithDefaults instantiates a new Receipt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceiptWithDefaults() *Receipt {
	this := Receipt{}
	return &this
}

// GetId returns the Id field value
func (o *Receipt) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Receipt) SetId(v string) {
	o.Id = v
}

// GetTransactionId returns the TransactionId field value
func (o *Receipt) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *Receipt) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetAmount returns the Amount field value
func (o *Receipt) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Receipt) SetAmount(v string) {
	o.Amount = v
}

// GetPrintFields returns the PrintFields field value
func (o *Receipt) GetPrintFields() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PrintFields
}

// GetPrintFieldsOk returns a tuple with the PrintFields field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetPrintFieldsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrintFields, true
}

// SetPrintFields sets field value
func (o *Receipt) SetPrintFields(v []string) {
	o.PrintFields = v
}

// GetItems returns the Items field value
func (o *Receipt) GetItems() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetItemsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *Receipt) SetItems(v []string) {
	o.Items = v
}

// GetUsage returns the Usage field value
func (o *Receipt) GetUsage() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetUsageOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usage, true
}

// SetUsage sets field value
func (o *Receipt) SetUsage(v []string) {
	o.Usage = v
}

// GetDisplayAmount returns the DisplayAmount field value
func (o *Receipt) GetDisplayAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayAmount
}

// GetDisplayAmountOk returns a tuple with the DisplayAmount field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetDisplayAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayAmount, true
}

// SetDisplayAmount sets field value
func (o *Receipt) SetDisplayAmount(v string) {
	o.DisplayAmount = v
}

// GetTaxAmount returns the TaxAmount field value
func (o *Receipt) GetTaxAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetTaxAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxAmount, true
}

// SetTaxAmount sets field value
func (o *Receipt) SetTaxAmount(v string) {
	o.TaxAmount = v
}

// GetUserId returns the UserId field value
func (o *Receipt) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Receipt) SetUserId(v string) {
	o.UserId = v
}

// GetSiteId returns the SiteId field value
func (o *Receipt) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *Receipt) SetSiteId(v string) {
	o.SiteId = v
}

// GetPaymentMethodId returns the PaymentMethodId field value
func (o *Receipt) GetPaymentMethodId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentMethodId
}

// GetPaymentMethodIdOk returns a tuple with the PaymentMethodId field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetPaymentMethodIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentMethodId, true
}

// SetPaymentMethodId sets field value
func (o *Receipt) SetPaymentMethodId(v string) {
	o.PaymentMethodId = v
}

// GetPaymentMethodLastFour returns the PaymentMethodLastFour field value
func (o *Receipt) GetPaymentMethodLastFour() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentMethodLastFour
}

// GetPaymentMethodLastFourOk returns a tuple with the PaymentMethodLastFour field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetPaymentMethodLastFourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentMethodLastFour, true
}

// SetPaymentMethodLastFour sets field value
func (o *Receipt) SetPaymentMethodLastFour(v string) {
	o.PaymentMethodLastFour = v
}

// GetPaymentMethodCardType returns the PaymentMethodCardType field value
func (o *Receipt) GetPaymentMethodCardType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentMethodCardType
}

// GetPaymentMethodCardTypeOk returns a tuple with the PaymentMethodCardType field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetPaymentMethodCardTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentMethodCardType, true
}

// SetPaymentMethodCardType sets field value
func (o *Receipt) SetPaymentMethodCardType(v string) {
	o.PaymentMethodCardType = v
}

// GetHtmlStored returns the HtmlStored field value
func (o *Receipt) GetHtmlStored() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HtmlStored
}

// GetHtmlStoredOk returns a tuple with the HtmlStored field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetHtmlStoredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlStored, true
}

// SetHtmlStored sets field value
func (o *Receipt) SetHtmlStored(v bool) {
	o.HtmlStored = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Receipt) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Receipt) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Receipt) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Receipt) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetTransactionCreatedAt returns the TransactionCreatedAt field value
func (o *Receipt) GetTransactionCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TransactionCreatedAt
}

// GetTransactionCreatedAtOk returns a tuple with the TransactionCreatedAt field value
// and a boolean to check if the value has been set.
func (o *Receipt) GetTransactionCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionCreatedAt, true
}

// SetTransactionCreatedAt sets field value
func (o *Receipt) SetTransactionCreatedAt(v time.Time) {
	o.TransactionCreatedAt = v
}

func (o Receipt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Receipt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["transaction_id"] = o.TransactionId
	toSerialize["amount"] = o.Amount
	toSerialize["print_fields"] = o.PrintFields
	toSerialize["items"] = o.Items
	toSerialize["usage"] = o.Usage
	toSerialize["display_amount"] = o.DisplayAmount
	toSerialize["tax_amount"] = o.TaxAmount
	toSerialize["user_id"] = o.UserId
	toSerialize["site_id"] = o.SiteId
	toSerialize["payment_method_id"] = o.PaymentMethodId
	toSerialize["payment_method_last_four"] = o.PaymentMethodLastFour
	toSerialize["payment_method_card_type"] = o.PaymentMethodCardType
	toSerialize["html_stored"] = o.HtmlStored
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["transaction_created_at"] = o.TransactionCreatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Receipt) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"transaction_id",
		"amount",
		"print_fields",
		"items",
		"usage",
		"display_amount",
		"tax_amount",
		"user_id",
		"site_id",
		"payment_method_id",
		"payment_method_last_four",
		"payment_method_card_type",
		"html_stored",
		"created_at",
		"updated_at",
		"transaction_created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReceipt := _Receipt{}

	err = json.Unmarshal(data, &varReceipt)

	if err != nil {
		return err
	}

	*o = Receipt(varReceipt)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "transaction_id")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "print_fields")
		delete(additionalProperties, "items")
		delete(additionalProperties, "usage")
		delete(additionalProperties, "display_amount")
		delete(additionalProperties, "tax_amount")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "payment_method_id")
		delete(additionalProperties, "payment_method_last_four")
		delete(additionalProperties, "payment_method_card_type")
		delete(additionalProperties, "html_stored")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "transaction_created_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReceipt struct {
	value *Receipt
	isSet bool
}

func (v NullableReceipt) Get() *Receipt {
	return v.value
}

func (v *NullableReceipt) Set(val *Receipt) {
	v.value = val
	v.isSet = true
}

func (v NullableReceipt) IsSet() bool {
	return v.isSet
}

func (v *NullableReceipt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceipt(val *Receipt) *NullableReceipt {
	return &NullableReceipt{value: val, isSet: true}
}

func (v NullableReceipt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceipt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


