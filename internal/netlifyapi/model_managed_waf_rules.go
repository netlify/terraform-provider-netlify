/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the ManagedWafRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedWafRules{}

// ManagedWafRules struct for ManagedWafRules
type ManagedWafRules struct {
	RuleSets map[string]ManagedWafRuleSet `json:"rule_sets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManagedWafRules ManagedWafRules

// NewManagedWafRules instantiates a new ManagedWafRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedWafRules() *ManagedWafRules {
	this := ManagedWafRules{}
	return &this
}

// NewManagedWafRulesWithDefaults instantiates a new ManagedWafRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedWafRulesWithDefaults() *ManagedWafRules {
	this := ManagedWafRules{}
	return &this
}

// GetRuleSets returns the RuleSets field value if set, zero value otherwise.
func (o *ManagedWafRules) GetRuleSets() map[string]ManagedWafRuleSet {
	if o == nil || IsNil(o.RuleSets) {
		var ret map[string]ManagedWafRuleSet
		return ret
	}
	return o.RuleSets
}

// GetRuleSetsOk returns a tuple with the RuleSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedWafRules) GetRuleSetsOk() (map[string]ManagedWafRuleSet, bool) {
	if o == nil || IsNil(o.RuleSets) {
		return map[string]ManagedWafRuleSet{}, false
	}
	return o.RuleSets, true
}

// HasRuleSets returns a boolean if a field has been set.
func (o *ManagedWafRules) HasRuleSets() bool {
	if o != nil && !IsNil(o.RuleSets) {
		return true
	}

	return false
}

// SetRuleSets gets a reference to the given map[string]ManagedWafRuleSet and assigns it to the RuleSets field.
func (o *ManagedWafRules) SetRuleSets(v map[string]ManagedWafRuleSet) {
	o.RuleSets = v
}

func (o ManagedWafRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedWafRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleSets) {
		toSerialize["rule_sets"] = o.RuleSets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManagedWafRules) UnmarshalJSON(data []byte) (err error) {
	varManagedWafRules := _ManagedWafRules{}

	err = json.Unmarshal(data, &varManagedWafRules)

	if err != nil {
		return err
	}

	*o = ManagedWafRules(varManagedWafRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rule_sets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManagedWafRules struct {
	value *ManagedWafRules
	isSet bool
}

func (v NullableManagedWafRules) Get() *ManagedWafRules {
	return v.value
}

func (v *NullableManagedWafRules) Set(val *ManagedWafRules) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedWafRules) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedWafRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedWafRules(val *ManagedWafRules) *NullableManagedWafRules {
	return &NullableManagedWafRules{value: val, isSet: true}
}

func (v NullableManagedWafRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedWafRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


