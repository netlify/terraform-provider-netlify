/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the DeploySiteDeploy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploySiteDeploy{}

// DeploySiteDeploy struct for DeploySiteDeploy
type DeploySiteDeploy struct {
	Id string `json:"id"`
	SiteId string `json:"site_id"`
	State string `json:"state"`
	// When the deploy was created
	CreatedAt time.Time `json:"created_at"`
	// The total time, in seconds, it took to deploy
	DeployTime int64 `json:"deploy_time"`
	// The deploy context
	Context string `json:"context"`
	// The git branch name of the deploy
	Branch string `json:"branch"`
	// The git commit SHA
	CommitRef string `json:"commit_ref"`
	// The URL for the commit of the deploy
	CommitUrl string `json:"commit_url"`
	// The HTTPS URL of the production deploy
	SslUrl string `json:"ssl_url"`
	// The HTTPS URL of the Deploy Preview
	DeploySslUrl string `json:"deploy_ssl_url"`
	// The build ID
	BuildId string `json:"build_id"`
	// The pull request or merge request number
	ReviewId int64 `json:"review_id"`
	// The error message, if an error occurred during the deploy
	ErrorMessage string `json:"error_message"`
	// The title of the pull request or merge request
	Title string `json:"title"`
	// Whether the deploy has been skipped
	Skipped bool `json:"skipped"`
	// The state of the deploy's plugins
	PluginState string `json:"plugin_state"`
	AdditionalProperties map[string]interface{}
}

type _DeploySiteDeploy DeploySiteDeploy

// NewDeploySiteDeploy instantiates a new DeploySiteDeploy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploySiteDeploy(id string, siteId string, state string, createdAt time.Time, deployTime int64, context string, branch string, commitRef string, commitUrl string, sslUrl string, deploySslUrl string, buildId string, reviewId int64, errorMessage string, title string, skipped bool, pluginState string) *DeploySiteDeploy {
	this := DeploySiteDeploy{}
	this.Id = id
	this.SiteId = siteId
	this.State = state
	this.CreatedAt = createdAt
	this.DeployTime = deployTime
	this.Context = context
	this.Branch = branch
	this.CommitRef = commitRef
	this.CommitUrl = commitUrl
	this.SslUrl = sslUrl
	this.DeploySslUrl = deploySslUrl
	this.BuildId = buildId
	this.ReviewId = reviewId
	this.ErrorMessage = errorMessage
	this.Title = title
	this.Skipped = skipped
	this.PluginState = pluginState
	return &this
}

// NewDeploySiteDeployWithDefaults instantiates a new DeploySiteDeploy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploySiteDeployWithDefaults() *DeploySiteDeploy {
	this := DeploySiteDeploy{}
	return &this
}

// GetId returns the Id field value
func (o *DeploySiteDeploy) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeploySiteDeploy) SetId(v string) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *DeploySiteDeploy) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *DeploySiteDeploy) SetSiteId(v string) {
	o.SiteId = v
}

// GetState returns the State field value
func (o *DeploySiteDeploy) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *DeploySiteDeploy) SetState(v string) {
	o.State = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DeploySiteDeploy) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DeploySiteDeploy) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDeployTime returns the DeployTime field value
func (o *DeploySiteDeploy) GetDeployTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DeployTime
}

// GetDeployTimeOk returns a tuple with the DeployTime field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetDeployTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployTime, true
}

// SetDeployTime sets field value
func (o *DeploySiteDeploy) SetDeployTime(v int64) {
	o.DeployTime = v
}

// GetContext returns the Context field value
func (o *DeploySiteDeploy) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *DeploySiteDeploy) SetContext(v string) {
	o.Context = v
}

// GetBranch returns the Branch field value
func (o *DeploySiteDeploy) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *DeploySiteDeploy) SetBranch(v string) {
	o.Branch = v
}

// GetCommitRef returns the CommitRef field value
func (o *DeploySiteDeploy) GetCommitRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitRef
}

// GetCommitRefOk returns a tuple with the CommitRef field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetCommitRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitRef, true
}

// SetCommitRef sets field value
func (o *DeploySiteDeploy) SetCommitRef(v string) {
	o.CommitRef = v
}

// GetCommitUrl returns the CommitUrl field value
func (o *DeploySiteDeploy) GetCommitUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitUrl
}

// GetCommitUrlOk returns a tuple with the CommitUrl field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetCommitUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitUrl, true
}

// SetCommitUrl sets field value
func (o *DeploySiteDeploy) SetCommitUrl(v string) {
	o.CommitUrl = v
}

// GetSslUrl returns the SslUrl field value
func (o *DeploySiteDeploy) GetSslUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SslUrl
}

// GetSslUrlOk returns a tuple with the SslUrl field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetSslUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SslUrl, true
}

// SetSslUrl sets field value
func (o *DeploySiteDeploy) SetSslUrl(v string) {
	o.SslUrl = v
}

// GetDeploySslUrl returns the DeploySslUrl field value
func (o *DeploySiteDeploy) GetDeploySslUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploySslUrl
}

// GetDeploySslUrlOk returns a tuple with the DeploySslUrl field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetDeploySslUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploySslUrl, true
}

// SetDeploySslUrl sets field value
func (o *DeploySiteDeploy) SetDeploySslUrl(v string) {
	o.DeploySslUrl = v
}

// GetBuildId returns the BuildId field value
func (o *DeploySiteDeploy) GetBuildId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildId
}

// GetBuildIdOk returns a tuple with the BuildId field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetBuildIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildId, true
}

// SetBuildId sets field value
func (o *DeploySiteDeploy) SetBuildId(v string) {
	o.BuildId = v
}

// GetReviewId returns the ReviewId field value
func (o *DeploySiteDeploy) GetReviewId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ReviewId
}

// GetReviewIdOk returns a tuple with the ReviewId field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetReviewIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReviewId, true
}

// SetReviewId sets field value
func (o *DeploySiteDeploy) SetReviewId(v int64) {
	o.ReviewId = v
}

// GetErrorMessage returns the ErrorMessage field value
func (o *DeploySiteDeploy) GetErrorMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorMessage, true
}

// SetErrorMessage sets field value
func (o *DeploySiteDeploy) SetErrorMessage(v string) {
	o.ErrorMessage = v
}

// GetTitle returns the Title field value
func (o *DeploySiteDeploy) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *DeploySiteDeploy) SetTitle(v string) {
	o.Title = v
}

// GetSkipped returns the Skipped field value
func (o *DeploySiteDeploy) GetSkipped() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Skipped
}

// GetSkippedOk returns a tuple with the Skipped field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetSkippedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Skipped, true
}

// SetSkipped sets field value
func (o *DeploySiteDeploy) SetSkipped(v bool) {
	o.Skipped = v
}

// GetPluginState returns the PluginState field value
func (o *DeploySiteDeploy) GetPluginState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PluginState
}

// GetPluginStateOk returns a tuple with the PluginState field value
// and a boolean to check if the value has been set.
func (o *DeploySiteDeploy) GetPluginStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PluginState, true
}

// SetPluginState sets field value
func (o *DeploySiteDeploy) SetPluginState(v string) {
	o.PluginState = v
}

func (o DeploySiteDeploy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploySiteDeploy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["site_id"] = o.SiteId
	toSerialize["state"] = o.State
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["deploy_time"] = o.DeployTime
	toSerialize["context"] = o.Context
	toSerialize["branch"] = o.Branch
	toSerialize["commit_ref"] = o.CommitRef
	toSerialize["commit_url"] = o.CommitUrl
	toSerialize["ssl_url"] = o.SslUrl
	toSerialize["deploy_ssl_url"] = o.DeploySslUrl
	toSerialize["build_id"] = o.BuildId
	toSerialize["review_id"] = o.ReviewId
	toSerialize["error_message"] = o.ErrorMessage
	toSerialize["title"] = o.Title
	toSerialize["skipped"] = o.Skipped
	toSerialize["plugin_state"] = o.PluginState

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploySiteDeploy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"site_id",
		"state",
		"created_at",
		"deploy_time",
		"context",
		"branch",
		"commit_ref",
		"commit_url",
		"ssl_url",
		"deploy_ssl_url",
		"build_id",
		"review_id",
		"error_message",
		"title",
		"skipped",
		"plugin_state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploySiteDeploy := _DeploySiteDeploy{}

	err = json.Unmarshal(data, &varDeploySiteDeploy)

	if err != nil {
		return err
	}

	*o = DeploySiteDeploy(varDeploySiteDeploy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "state")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "deploy_time")
		delete(additionalProperties, "context")
		delete(additionalProperties, "branch")
		delete(additionalProperties, "commit_ref")
		delete(additionalProperties, "commit_url")
		delete(additionalProperties, "ssl_url")
		delete(additionalProperties, "deploy_ssl_url")
		delete(additionalProperties, "build_id")
		delete(additionalProperties, "review_id")
		delete(additionalProperties, "error_message")
		delete(additionalProperties, "title")
		delete(additionalProperties, "skipped")
		delete(additionalProperties, "plugin_state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploySiteDeploy struct {
	value *DeploySiteDeploy
	isSet bool
}

func (v NullableDeploySiteDeploy) Get() *DeploySiteDeploy {
	return v.value
}

func (v *NullableDeploySiteDeploy) Set(val *DeploySiteDeploy) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploySiteDeploy) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploySiteDeploy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploySiteDeploy(val *DeploySiteDeploy) *NullableDeploySiteDeploy {
	return &NullableDeploySiteDeploy{value: val, isSet: true}
}

func (v NullableDeploySiteDeploy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploySiteDeploy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


