/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"fmt"
)

// checks if the LogDrain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogDrain{}

// LogDrain Log Drain model definition
type LogDrain struct {
	// The ID of the log drain
	Id string `json:"id"`
	// The site ID
	SiteId string `json:"site_id"`
	// An array of the selected log types
	LogTypes string `json:"log_types"`
	// The format for log drain output
	Format string `json:"format"`
	// The destination of the log drain
	Destination string `json:"destination"`
	// Whether to exclude PII from the user traffic logs
	ExcludePii *bool `json:"exclude_pii,omitempty"`
	ServiceConfig LogDrainServiceConfig `json:"service_config"`
	AdditionalProperties map[string]interface{}
}

type _LogDrain LogDrain

// NewLogDrain instantiates a new LogDrain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogDrain(id string, siteId string, logTypes string, format string, destination string, serviceConfig LogDrainServiceConfig) *LogDrain {
	this := LogDrain{}
	this.Id = id
	this.SiteId = siteId
	this.LogTypes = logTypes
	this.Format = format
	this.Destination = destination
	this.ServiceConfig = serviceConfig
	return &this
}

// NewLogDrainWithDefaults instantiates a new LogDrain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogDrainWithDefaults() *LogDrain {
	this := LogDrain{}
	return &this
}

// GetId returns the Id field value
func (o *LogDrain) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogDrain) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogDrain) SetId(v string) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *LogDrain) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *LogDrain) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *LogDrain) SetSiteId(v string) {
	o.SiteId = v
}

// GetLogTypes returns the LogTypes field value
func (o *LogDrain) GetLogTypes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogTypes
}

// GetLogTypesOk returns a tuple with the LogTypes field value
// and a boolean to check if the value has been set.
func (o *LogDrain) GetLogTypesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogTypes, true
}

// SetLogTypes sets field value
func (o *LogDrain) SetLogTypes(v string) {
	o.LogTypes = v
}

// GetFormat returns the Format field value
func (o *LogDrain) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *LogDrain) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *LogDrain) SetFormat(v string) {
	o.Format = v
}

// GetDestination returns the Destination field value
func (o *LogDrain) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *LogDrain) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *LogDrain) SetDestination(v string) {
	o.Destination = v
}

// GetExcludePii returns the ExcludePii field value if set, zero value otherwise.
func (o *LogDrain) GetExcludePii() bool {
	if o == nil || IsNil(o.ExcludePii) {
		var ret bool
		return ret
	}
	return *o.ExcludePii
}

// GetExcludePiiOk returns a tuple with the ExcludePii field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogDrain) GetExcludePiiOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludePii) {
		return nil, false
	}
	return o.ExcludePii, true
}

// HasExcludePii returns a boolean if a field has been set.
func (o *LogDrain) HasExcludePii() bool {
	if o != nil && !IsNil(o.ExcludePii) {
		return true
	}

	return false
}

// SetExcludePii gets a reference to the given bool and assigns it to the ExcludePii field.
func (o *LogDrain) SetExcludePii(v bool) {
	o.ExcludePii = &v
}

// GetServiceConfig returns the ServiceConfig field value
func (o *LogDrain) GetServiceConfig() LogDrainServiceConfig {
	if o == nil {
		var ret LogDrainServiceConfig
		return ret
	}

	return o.ServiceConfig
}

// GetServiceConfigOk returns a tuple with the ServiceConfig field value
// and a boolean to check if the value has been set.
func (o *LogDrain) GetServiceConfigOk() (*LogDrainServiceConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceConfig, true
}

// SetServiceConfig sets field value
func (o *LogDrain) SetServiceConfig(v LogDrainServiceConfig) {
	o.ServiceConfig = v
}

func (o LogDrain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogDrain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["site_id"] = o.SiteId
	toSerialize["log_types"] = o.LogTypes
	toSerialize["format"] = o.Format
	toSerialize["destination"] = o.Destination
	if !IsNil(o.ExcludePii) {
		toSerialize["exclude_pii"] = o.ExcludePii
	}
	toSerialize["service_config"] = o.ServiceConfig

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogDrain) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"site_id",
		"log_types",
		"format",
		"destination",
		"service_config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogDrain := _LogDrain{}

	err = json.Unmarshal(data, &varLogDrain)

	if err != nil {
		return err
	}

	*o = LogDrain(varLogDrain)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "log_types")
		delete(additionalProperties, "format")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "exclude_pii")
		delete(additionalProperties, "service_config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogDrain struct {
	value *LogDrain
	isSet bool
}

func (v NullableLogDrain) Get() *LogDrain {
	return v.value
}

func (v *NullableLogDrain) Set(val *LogDrain) {
	v.value = val
	v.isSet = true
}

func (v NullableLogDrain) IsSet() bool {
	return v.isSet
}

func (v *NullableLogDrain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogDrain(val *LogDrain) *NullableLogDrain {
	return &NullableLogDrain{value: val, isSet: true}
}

func (v NullableLogDrain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogDrain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


