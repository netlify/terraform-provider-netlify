/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
)

// checks if the SetTrafficRulesConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetTrafficRulesConfig{}

// SetTrafficRulesConfig struct for SetTrafficRulesConfig
type SetTrafficRulesConfig struct {
	ConfigId *string `json:"config_id,omitempty"`
	Scope *string `json:"scope,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SetTrafficRulesConfig SetTrafficRulesConfig

// NewSetTrafficRulesConfig instantiates a new SetTrafficRulesConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetTrafficRulesConfig() *SetTrafficRulesConfig {
	this := SetTrafficRulesConfig{}
	return &this
}

// NewSetTrafficRulesConfigWithDefaults instantiates a new SetTrafficRulesConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetTrafficRulesConfigWithDefaults() *SetTrafficRulesConfig {
	this := SetTrafficRulesConfig{}
	return &this
}

// GetConfigId returns the ConfigId field value if set, zero value otherwise.
func (o *SetTrafficRulesConfig) GetConfigId() string {
	if o == nil || IsNil(o.ConfigId) {
		var ret string
		return ret
	}
	return *o.ConfigId
}

// GetConfigIdOk returns a tuple with the ConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetTrafficRulesConfig) GetConfigIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigId) {
		return nil, false
	}
	return o.ConfigId, true
}

// HasConfigId returns a boolean if a field has been set.
func (o *SetTrafficRulesConfig) HasConfigId() bool {
	if o != nil && !IsNil(o.ConfigId) {
		return true
	}

	return false
}

// SetConfigId gets a reference to the given string and assigns it to the ConfigId field.
func (o *SetTrafficRulesConfig) SetConfigId(v string) {
	o.ConfigId = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SetTrafficRulesConfig) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetTrafficRulesConfig) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *SetTrafficRulesConfig) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *SetTrafficRulesConfig) SetScope(v string) {
	o.Scope = &v
}

func (o SetTrafficRulesConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetTrafficRulesConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigId) {
		toSerialize["config_id"] = o.ConfigId
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SetTrafficRulesConfig) UnmarshalJSON(data []byte) (err error) {
	varSetTrafficRulesConfig := _SetTrafficRulesConfig{}

	err = json.Unmarshal(data, &varSetTrafficRulesConfig)

	if err != nil {
		return err
	}

	*o = SetTrafficRulesConfig(varSetTrafficRulesConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "config_id")
		delete(additionalProperties, "scope")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSetTrafficRulesConfig struct {
	value *SetTrafficRulesConfig
	isSet bool
}

func (v NullableSetTrafficRulesConfig) Get() *SetTrafficRulesConfig {
	return v.value
}

func (v *NullableSetTrafficRulesConfig) Set(val *SetTrafficRulesConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSetTrafficRulesConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSetTrafficRulesConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetTrafficRulesConfig(val *SetTrafficRulesConfig) *NullableSetTrafficRulesConfig {
	return &NullableSetTrafficRulesConfig{value: val, isSet: true}
}

func (v NullableSetTrafficRulesConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetTrafficRulesConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


