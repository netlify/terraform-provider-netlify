/*
Netlify's API documentation

Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.   This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://docs.netlify.com/api/get-started/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).   Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/js-client) 

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netlifyapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SplitTest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SplitTest{}

// SplitTest struct for SplitTest
type SplitTest struct {
	Id string `json:"id"`
	SiteId string `json:"site_id"`
	Name string `json:"name"`
	Path string `json:"path"`
	Branches []map[string]interface{} `json:"branches"`
	Active bool `json:"active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UnpublishedAt time.Time `json:"unpublished_at"`
	AdditionalProperties map[string]interface{}
}

type _SplitTest SplitTest

// NewSplitTest instantiates a new SplitTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplitTest(id string, siteId string, name string, path string, branches []map[string]interface{}, active bool, createdAt time.Time, updatedAt time.Time, unpublishedAt time.Time) *SplitTest {
	this := SplitTest{}
	this.Id = id
	this.SiteId = siteId
	this.Name = name
	this.Path = path
	this.Branches = branches
	this.Active = active
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.UnpublishedAt = unpublishedAt
	return &this
}

// NewSplitTestWithDefaults instantiates a new SplitTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplitTestWithDefaults() *SplitTest {
	this := SplitTest{}
	return &this
}

// GetId returns the Id field value
func (o *SplitTest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SplitTest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SplitTest) SetId(v string) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *SplitTest) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *SplitTest) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *SplitTest) SetSiteId(v string) {
	o.SiteId = v
}

// GetName returns the Name field value
func (o *SplitTest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SplitTest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SplitTest) SetName(v string) {
	o.Name = v
}

// GetPath returns the Path field value
func (o *SplitTest) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *SplitTest) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *SplitTest) SetPath(v string) {
	o.Path = v
}

// GetBranches returns the Branches field value
func (o *SplitTest) GetBranches() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Branches
}

// GetBranchesOk returns a tuple with the Branches field value
// and a boolean to check if the value has been set.
func (o *SplitTest) GetBranchesOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Branches, true
}

// SetBranches sets field value
func (o *SplitTest) SetBranches(v []map[string]interface{}) {
	o.Branches = v
}

// GetActive returns the Active field value
func (o *SplitTest) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *SplitTest) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *SplitTest) SetActive(v bool) {
	o.Active = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *SplitTest) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SplitTest) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SplitTest) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *SplitTest) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *SplitTest) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *SplitTest) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUnpublishedAt returns the UnpublishedAt field value
func (o *SplitTest) GetUnpublishedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UnpublishedAt
}

// GetUnpublishedAtOk returns a tuple with the UnpublishedAt field value
// and a boolean to check if the value has been set.
func (o *SplitTest) GetUnpublishedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnpublishedAt, true
}

// SetUnpublishedAt sets field value
func (o *SplitTest) SetUnpublishedAt(v time.Time) {
	o.UnpublishedAt = v
}

func (o SplitTest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SplitTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["site_id"] = o.SiteId
	toSerialize["name"] = o.Name
	toSerialize["path"] = o.Path
	toSerialize["branches"] = o.Branches
	toSerialize["active"] = o.Active
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["unpublished_at"] = o.UnpublishedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SplitTest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"site_id",
		"name",
		"path",
		"branches",
		"active",
		"created_at",
		"updated_at",
		"unpublished_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSplitTest := _SplitTest{}

	err = json.Unmarshal(data, &varSplitTest)

	if err != nil {
		return err
	}

	*o = SplitTest(varSplitTest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "path")
		delete(additionalProperties, "branches")
		delete(additionalProperties, "active")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "unpublished_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSplitTest struct {
	value *SplitTest
	isSet bool
}

func (v NullableSplitTest) Get() *SplitTest {
	return v.value
}

func (v *NullableSplitTest) Set(val *SplitTest) {
	v.value = val
	v.isSet = true
}

func (v NullableSplitTest) IsSet() bool {
	return v.isSet
}

func (v *NullableSplitTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplitTest(val *SplitTest) *NullableSplitTest {
	return &NullableSplitTest{value: val, isSet: true}
}

func (v NullableSplitTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplitTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


